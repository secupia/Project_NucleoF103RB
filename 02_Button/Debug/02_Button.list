
02_Button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000137c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001488  08001488  00011488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080014b4  080014b4  000114b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080014b8  080014b8  000114b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  080014bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  2000000c  080014c8  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000002c  080014c8  0002002c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000946e  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001a48  00000000  00000000  000294a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000001a8  00000000  00000000  0002aef0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000027e4  00000000  00000000  0002b098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001598  00000000  00000000  0002d87c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      0000007c  00000000  00000000  0002ee14  2**0
                  CONTENTS, READONLY
 15 .debug_frame  00000808  00000000  00000000  0002ee90  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00001137  00000000  00000000  0002f698  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000000a0  00000000  00000000  000307d0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001470 	.word	0x08001470

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001470 	.word	0x08001470

0800014c <apInit>:
 */

#include "ap.h"

void apInit(void)
{
 800014c:	4770      	bx	lr

0800014e <apMain>:

}

void apMain(void)
{
 800014e:	b508      	push	{r3, lr}
 8000150:	e002      	b.n	8000158 <apMain+0xa>
    {
      ledOn(0);
    }
    else
    {
      ledOff(0);
 8000152:	2000      	movs	r0, #0
 8000154:	f000 f912 	bl	800037c <ledOff>
    if( buttonGetPressed(0) == true )
 8000158:	2000      	movs	r0, #0
 800015a:	f000 f8e3 	bl	8000324 <buttonGetPressed>
 800015e:	2800      	cmp	r0, #0
 8000160:	d0f7      	beq.n	8000152 <apMain+0x4>
      ledOn(0);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f900 	bl	8000368 <ledOn>
 8000168:	e7f6      	b.n	8000158 <apMain+0xa>
	...

0800016c <SystemClock_Config>:
  *            Flash Latency(WS)              = 2
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 800016c:	b500      	push	{lr}
 800016e:	b091      	sub	sp, #68	; 0x44
  RCC_ClkInitTypeDef clkinitstruct = {0};
 8000170:	2100      	movs	r1, #0
 8000172:	910b      	str	r1, [sp, #44]	; 0x2c
 8000174:	910c      	str	r1, [sp, #48]	; 0x30
 8000176:	910d      	str	r1, [sp, #52]	; 0x34
 8000178:	910e      	str	r1, [sp, #56]	; 0x38
 800017a:	910f      	str	r1, [sp, #60]	; 0x3c
  RCC_OscInitTypeDef oscinitstruct = {0};
 800017c:	2228      	movs	r2, #40	; 0x28
 800017e:	a801      	add	r0, sp, #4
 8000180:	f001 f96e 	bl	8001460 <memset>

  /* Configure PLL ------------------------------------------------------*/
  /* PLL configuration: PLLCLK = (HSI / 2) * PLLMUL = (8 / 2) * 16 = 64 MHz */
  /* PREDIV1 configuration: PREDIV1CLK = PLLCLK / HSEPredivValue = 64 / 1 = 64 MHz */
  /* Enable HSI and activate PLL with HSi_DIV2 as source */
  oscinitstruct.OscillatorType  = RCC_OSCILLATORTYPE_HSI;
 8000184:	2302      	movs	r3, #2
 8000186:	9301      	str	r3, [sp, #4]
  oscinitstruct.HSEState        = RCC_HSE_OFF;
  oscinitstruct.LSEState        = RCC_LSE_OFF;
  oscinitstruct.HSIState        = RCC_HSI_ON;
 8000188:	2201      	movs	r2, #1
 800018a:	9205      	str	r2, [sp, #20]
  oscinitstruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800018c:	2210      	movs	r2, #16
 800018e:	9206      	str	r2, [sp, #24]
  oscinitstruct.HSEPredivValue    = RCC_HSE_PREDIV_DIV1;
  oscinitstruct.PLL.PLLState    = RCC_PLL_ON;
 8000190:	9308      	str	r3, [sp, #32]
  oscinitstruct.PLL.PLLSource   = RCC_PLLSOURCE_HSI_DIV2;
  oscinitstruct.PLL.PLLMUL      = RCC_PLL_MUL16;
 8000192:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000196:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&oscinitstruct)!= HAL_OK)
 8000198:	a801      	add	r0, sp, #4
 800019a:	f000 fd37 	bl	8000c0c <HAL_RCC_OscConfig>
 800019e:	b100      	cbz	r0, 80001a2 <SystemClock_Config+0x36>
 80001a0:	e7fe      	b.n	80001a0 <SystemClock_Config+0x34>
    while(1);
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  clkinitstruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80001a2:	230f      	movs	r3, #15
 80001a4:	930b      	str	r3, [sp, #44]	; 0x2c
  clkinitstruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001a6:	2102      	movs	r1, #2
 80001a8:	910c      	str	r1, [sp, #48]	; 0x30
  clkinitstruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001aa:	2300      	movs	r3, #0
 80001ac:	930d      	str	r3, [sp, #52]	; 0x34
  clkinitstruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001ae:	930f      	str	r3, [sp, #60]	; 0x3c
  clkinitstruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001b4:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_RCC_ClockConfig(&clkinitstruct, FLASH_LATENCY_2)!= HAL_OK)
 80001b6:	a80b      	add	r0, sp, #44	; 0x2c
 80001b8:	f000 ff80 	bl	80010bc <HAL_RCC_ClockConfig>
 80001bc:	b100      	cbz	r0, 80001c0 <SystemClock_Config+0x54>
 80001be:	e7fe      	b.n	80001be <SystemClock_Config+0x52>
  {
    /* Initialization Error */
    while(1);
  }
}
 80001c0:	b011      	add	sp, #68	; 0x44
 80001c2:	f85d fb04 	ldr.w	pc, [sp], #4

080001c6 <bspInit>:
{
 80001c6:	b500      	push	{lr}
 80001c8:	b083      	sub	sp, #12
  HAL_Init();
 80001ca:	f000 f92f 	bl	800042c <HAL_Init>
  SystemClock_Config();
 80001ce:	f7ff ffcd 	bl	800016c <SystemClock_Config>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001d2:	4b0b      	ldr	r3, [pc, #44]	; (8000200 <bspInit+0x3a>)
 80001d4:	699a      	ldr	r2, [r3, #24]
 80001d6:	f042 0204 	orr.w	r2, r2, #4
 80001da:	619a      	str	r2, [r3, #24]
 80001dc:	699a      	ldr	r2, [r3, #24]
 80001de:	f002 0204 	and.w	r2, r2, #4
 80001e2:	9200      	str	r2, [sp, #0]
 80001e4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001e6:	699a      	ldr	r2, [r3, #24]
 80001e8:	f042 0210 	orr.w	r2, r2, #16
 80001ec:	619a      	str	r2, [r3, #24]
 80001ee:	699b      	ldr	r3, [r3, #24]
 80001f0:	f003 0310 	and.w	r3, r3, #16
 80001f4:	9301      	str	r3, [sp, #4]
 80001f6:	9b01      	ldr	r3, [sp, #4]
}
 80001f8:	b003      	add	sp, #12
 80001fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80001fe:	bf00      	nop
 8000200:	40021000 	.word	0x40021000

08000204 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000204:	4b0f      	ldr	r3, [pc, #60]	; (8000244 <SystemInit+0x40>)
 8000206:	681a      	ldr	r2, [r3, #0]
 8000208:	f042 0201 	orr.w	r2, r2, #1
 800020c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800020e:	6859      	ldr	r1, [r3, #4]
 8000210:	4a0d      	ldr	r2, [pc, #52]	; (8000248 <SystemInit+0x44>)
 8000212:	400a      	ands	r2, r1
 8000214:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000216:	681a      	ldr	r2, [r3, #0]
 8000218:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800021c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000220:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000222:	681a      	ldr	r2, [r3, #0]
 8000224:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000228:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800022a:	685a      	ldr	r2, [r3, #4]
 800022c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000230:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000232:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000236:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000238:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800023c:	4b03      	ldr	r3, [pc, #12]	; (800024c <SystemInit+0x48>)
 800023e:	609a      	str	r2, [r3, #8]
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	40021000 	.word	0x40021000
 8000248:	f8ff0000 	.word	0xf8ff0000
 800024c:	e000ed00 	.word	0xe000ed00

08000250 <SystemCoreClockUpdate>:
#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000250:	4b1f      	ldr	r3, [pc, #124]	; (80002d0 <SystemCoreClockUpdate+0x80>)
 8000252:	685b      	ldr	r3, [r3, #4]
 8000254:	f003 030c 	and.w	r3, r3, #12
  
  switch (tmp)
 8000258:	2b04      	cmp	r3, #4
 800025a:	d014      	beq.n	8000286 <SystemCoreClockUpdate+0x36>
 800025c:	2b08      	cmp	r3, #8
 800025e:	d016      	beq.n	800028e <SystemCoreClockUpdate+0x3e>
 8000260:	b11b      	cbz	r3, 800026a <SystemCoreClockUpdate+0x1a>
      }
#endif /* STM32F105xC */ 
      break;

    default:
      SystemCoreClock = HSI_VALUE;
 8000262:	4a1c      	ldr	r2, [pc, #112]	; (80002d4 <SystemCoreClockUpdate+0x84>)
 8000264:	4b1c      	ldr	r3, [pc, #112]	; (80002d8 <SystemCoreClockUpdate+0x88>)
 8000266:	601a      	str	r2, [r3, #0]
      break;
 8000268:	e002      	b.n	8000270 <SystemCoreClockUpdate+0x20>
      SystemCoreClock = HSI_VALUE;
 800026a:	4a1a      	ldr	r2, [pc, #104]	; (80002d4 <SystemCoreClockUpdate+0x84>)
 800026c:	4b1a      	ldr	r3, [pc, #104]	; (80002d8 <SystemCoreClockUpdate+0x88>)
 800026e:	601a      	str	r2, [r3, #0]
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000270:	4b17      	ldr	r3, [pc, #92]	; (80002d0 <SystemCoreClockUpdate+0x80>)
 8000272:	685b      	ldr	r3, [r3, #4]
 8000274:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000278:	4a18      	ldr	r2, [pc, #96]	; (80002dc <SystemCoreClockUpdate+0x8c>)
 800027a:	5cd1      	ldrb	r1, [r2, r3]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 800027c:	4a16      	ldr	r2, [pc, #88]	; (80002d8 <SystemCoreClockUpdate+0x88>)
 800027e:	6813      	ldr	r3, [r2, #0]
 8000280:	40cb      	lsrs	r3, r1
 8000282:	6013      	str	r3, [r2, #0]
 8000284:	4770      	bx	lr
      SystemCoreClock = HSE_VALUE;
 8000286:	4a13      	ldr	r2, [pc, #76]	; (80002d4 <SystemCoreClockUpdate+0x84>)
 8000288:	4b13      	ldr	r3, [pc, #76]	; (80002d8 <SystemCoreClockUpdate+0x88>)
 800028a:	601a      	str	r2, [r3, #0]
      break;
 800028c:	e7f0      	b.n	8000270 <SystemCoreClockUpdate+0x20>
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 800028e:	4a10      	ldr	r2, [pc, #64]	; (80002d0 <SystemCoreClockUpdate+0x80>)
 8000290:	6853      	ldr	r3, [r2, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000292:	6852      	ldr	r2, [r2, #4]
      pllmull = ( pllmull >> 18U) + 2U;
 8000294:	f3c3 4383 	ubfx	r3, r3, #18, #4
 8000298:	3302      	adds	r3, #2
      if (pllsource == 0x00U)
 800029a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800029e:	d00a      	beq.n	80002b6 <SystemCoreClockUpdate+0x66>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 80002a0:	4a0b      	ldr	r2, [pc, #44]	; (80002d0 <SystemCoreClockUpdate+0x80>)
 80002a2:	6852      	ldr	r2, [r2, #4]
 80002a4:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80002a8:	d00b      	beq.n	80002c2 <SystemCoreClockUpdate+0x72>
          SystemCoreClock = (HSE_VALUE >> 1U) * pllmull;
 80002aa:	4a0d      	ldr	r2, [pc, #52]	; (80002e0 <SystemCoreClockUpdate+0x90>)
 80002ac:	fb02 f303 	mul.w	r3, r2, r3
 80002b0:	4a09      	ldr	r2, [pc, #36]	; (80002d8 <SystemCoreClockUpdate+0x88>)
 80002b2:	6013      	str	r3, [r2, #0]
 80002b4:	e7dc      	b.n	8000270 <SystemCoreClockUpdate+0x20>
        SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 80002b6:	4a0a      	ldr	r2, [pc, #40]	; (80002e0 <SystemCoreClockUpdate+0x90>)
 80002b8:	fb02 f303 	mul.w	r3, r2, r3
 80002bc:	4a06      	ldr	r2, [pc, #24]	; (80002d8 <SystemCoreClockUpdate+0x88>)
 80002be:	6013      	str	r3, [r2, #0]
 80002c0:	e7d6      	b.n	8000270 <SystemCoreClockUpdate+0x20>
          SystemCoreClock = HSE_VALUE * pllmull;
 80002c2:	4a04      	ldr	r2, [pc, #16]	; (80002d4 <SystemCoreClockUpdate+0x84>)
 80002c4:	fb02 f303 	mul.w	r3, r2, r3
 80002c8:	4a03      	ldr	r2, [pc, #12]	; (80002d8 <SystemCoreClockUpdate+0x88>)
 80002ca:	6013      	str	r3, [r2, #0]
 80002cc:	e7d0      	b.n	8000270 <SystemCoreClockUpdate+0x20>
 80002ce:	bf00      	nop
 80002d0:	40021000 	.word	0x40021000
 80002d4:	007a1200 	.word	0x007a1200
 80002d8:	20000000 	.word	0x20000000
 80002dc:	08001488 	.word	0x08001488
 80002e0:	003d0900 	.word	0x003d0900

080002e4 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80002e4:	4770      	bx	lr

080002e6 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80002e6:	e7fe      	b.n	80002e6 <HardFault_Handler>

080002e8 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80002e8:	e7fe      	b.n	80002e8 <MemManage_Handler>

080002ea <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80002ea:	e7fe      	b.n	80002ea <BusFault_Handler>

080002ec <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80002ec:	e7fe      	b.n	80002ec <UsageFault_Handler>

080002ee <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80002ee:	4770      	bx	lr

080002f0 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80002f0:	4770      	bx	lr

080002f2 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80002f2:	4770      	bx	lr

080002f4 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80002f4:	b508      	push	{r3, lr}
  HAL_IncTick();
 80002f6:	f000 f8ab 	bl	8000450 <HAL_IncTick>
 80002fa:	bd08      	pop	{r3, pc}

080002fc <buttonInit>:

#include "button.h"


void buttonInit(void)
{
 80002fc:	b500      	push	{lr}
 80002fe:	b085      	sub	sp, #20
  GPIO_InitTypeDef GPIO_InitStruct;

  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000300:	2300      	movs	r3, #0
 8000302:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000304:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000306:	2302      	movs	r3, #2
 8000308:	9303      	str	r3, [sp, #12]

  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800030a:	a904      	add	r1, sp, #16
 800030c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000310:	f841 3d10 	str.w	r3, [r1, #-16]!
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000314:	4802      	ldr	r0, [pc, #8]	; (8000320 <buttonInit+0x24>)
 8000316:	f000 fa49 	bl	80007ac <HAL_GPIO_Init>
}
 800031a:	b005      	add	sp, #20
 800031c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000320:	40011000 	.word	0x40011000

08000324 <buttonGetPressed>:

bool buttonGetPressed(uint8_t ch)
{
 8000324:	b508      	push	{r3, lr}
  if( HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET )
 8000326:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800032a:	4804      	ldr	r0, [pc, #16]	; (800033c <buttonGetPressed+0x18>)
 800032c:	f000 fbac 	bl	8000a88 <HAL_GPIO_ReadPin>
 8000330:	b108      	cbz	r0, 8000336 <buttonGetPressed+0x12>
  {
    return true;
  }
  else
  {
    return false;
 8000332:	2000      	movs	r0, #0
  }
}
 8000334:	bd08      	pop	{r3, pc}
    return true;
 8000336:	2001      	movs	r0, #1
 8000338:	bd08      	pop	{r3, pc}
 800033a:	bf00      	nop
 800033c:	40011000 	.word	0x40011000

08000340 <ledInit>:


#include "led.h"

void ledInit(void)
{
 8000340:	b500      	push	{lr}
 8000342:	b085      	sub	sp, #20

  GPIO_InitTypeDef  GPIO_InitStruct;

  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8000344:	2301      	movs	r3, #1
 8000346:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8000348:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800034a:	2303      	movs	r3, #3
 800034c:	9303      	str	r3, [sp, #12]

  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800034e:	a904      	add	r1, sp, #16
 8000350:	2320      	movs	r3, #32
 8000352:	f841 3d10 	str.w	r3, [r1, #-16]!
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000356:	4803      	ldr	r0, [pc, #12]	; (8000364 <ledInit+0x24>)
 8000358:	f000 fa28 	bl	80007ac <HAL_GPIO_Init>

}
 800035c:	b005      	add	sp, #20
 800035e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000362:	bf00      	nop
 8000364:	40010800 	.word	0x40010800

08000368 <ledOn>:

void ledOn(uint8_t ch)
{
 8000368:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800036a:	2201      	movs	r2, #1
 800036c:	2120      	movs	r1, #32
 800036e:	4802      	ldr	r0, [pc, #8]	; (8000378 <ledOn+0x10>)
 8000370:	f000 fb91 	bl	8000a96 <HAL_GPIO_WritePin>
 8000374:	bd08      	pop	{r3, pc}
 8000376:	bf00      	nop
 8000378:	40010800 	.word	0x40010800

0800037c <ledOff>:
}

void ledOff(uint8_t ch)
{
 800037c:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800037e:	2200      	movs	r2, #0
 8000380:	2120      	movs	r1, #32
 8000382:	4802      	ldr	r0, [pc, #8]	; (800038c <ledOff+0x10>)
 8000384:	f000 fb87 	bl	8000a96 <HAL_GPIO_WritePin>
 8000388:	bd08      	pop	{r3, pc}
 800038a:	bf00      	nop
 800038c:	40010800 	.word	0x40010800

08000390 <ledToggle>:
}

void ledToggle(uint8_t ch)
{
 8000390:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000392:	2120      	movs	r1, #32
 8000394:	4801      	ldr	r0, [pc, #4]	; (800039c <ledToggle+0xc>)
 8000396:	f000 fb84 	bl	8000aa2 <HAL_GPIO_TogglePin>
 800039a:	bd08      	pop	{r3, pc}
 800039c:	40010800 	.word	0x40010800

080003a0 <hwInit>:
 */

#include "hw.h"

void hwInit(void)
{
 80003a0:	b508      	push	{r3, lr}
  bspInit();
 80003a2:	f7ff ff10 	bl	80001c6 <bspInit>

  ledInit();
 80003a6:	f7ff ffcb 	bl	8000340 <ledInit>
  buttonInit();
 80003aa:	f7ff ffa7 	bl	80002fc <buttonInit>
 80003ae:	bd08      	pop	{r3, pc}

080003b0 <delay>:
}

void delay(uint32_t time_ms)
{
 80003b0:	b508      	push	{r3, lr}
  HAL_Delay(time_ms);
 80003b2:	f000 f87b 	bl	80004ac <HAL_Delay>
 80003b6:	bd08      	pop	{r3, pc}

080003b8 <millis>:
}

uint32_t millis(void)
{
 80003b8:	b508      	push	{r3, lr}
  return HAL_GetTick();
 80003ba:	f000 f855 	bl	8000468 <HAL_GetTick>
}
 80003be:	bd08      	pop	{r3, pc}

080003c0 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80003c0:	4770      	bx	lr

080003c2 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80003c2:	4770      	bx	lr

080003c4 <HAL_DeInit>:
{
 80003c4:	b510      	push	{r4, lr}
  __HAL_RCC_APB1_FORCE_RESET();
 80003c6:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <HAL_DeInit+0x1c>)
 80003c8:	f04f 32ff 	mov.w	r2, #4294967295
 80003cc:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB1_RELEASE_RESET();
 80003ce:	2400      	movs	r4, #0
 80003d0:	611c      	str	r4, [r3, #16]
  __HAL_RCC_APB2_FORCE_RESET();
 80003d2:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 80003d4:	60dc      	str	r4, [r3, #12]
  HAL_MspDeInit();
 80003d6:	f7ff fff4 	bl	80003c2 <HAL_MspDeInit>
}
 80003da:	4620      	mov	r0, r4
 80003dc:	bd10      	pop	{r4, pc}
 80003de:	bf00      	nop
 80003e0:	40021000 	.word	0x40021000

080003e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003e4:	b510      	push	{r4, lr}
 80003e6:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80003e8:	4b0e      	ldr	r3, [pc, #56]	; (8000424 <HAL_InitTick+0x40>)
 80003ea:	7818      	ldrb	r0, [r3, #0]
 80003ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003f0:	fbb3 f3f0 	udiv	r3, r3, r0
 80003f4:	4a0c      	ldr	r2, [pc, #48]	; (8000428 <HAL_InitTick+0x44>)
 80003f6:	6810      	ldr	r0, [r2, #0]
 80003f8:	fbb0 f0f3 	udiv	r0, r0, r3
 80003fc:	f000 f93c 	bl	8000678 <HAL_SYSTICK_Config>
 8000400:	b968      	cbnz	r0, 800041e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000402:	2c0f      	cmp	r4, #15
 8000404:	d901      	bls.n	800040a <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000406:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 8000408:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800040a:	2200      	movs	r2, #0
 800040c:	4621      	mov	r1, r4
 800040e:	f04f 30ff 	mov.w	r0, #4294967295
 8000412:	f000 f8d3 	bl	80005bc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000416:	4b03      	ldr	r3, [pc, #12]	; (8000424 <HAL_InitTick+0x40>)
 8000418:	605c      	str	r4, [r3, #4]
  return HAL_OK;
 800041a:	2000      	movs	r0, #0
 800041c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800041e:	2001      	movs	r0, #1
 8000420:	bd10      	pop	{r4, pc}
 8000422:	bf00      	nop
 8000424:	20000004 	.word	0x20000004
 8000428:	20000000 	.word	0x20000000

0800042c <HAL_Init>:
{
 800042c:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800042e:	4a07      	ldr	r2, [pc, #28]	; (800044c <HAL_Init+0x20>)
 8000430:	6813      	ldr	r3, [r2, #0]
 8000432:	f043 0310 	orr.w	r3, r3, #16
 8000436:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000438:	2003      	movs	r0, #3
 800043a:	f000 f8ad 	bl	8000598 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800043e:	200f      	movs	r0, #15
 8000440:	f7ff ffd0 	bl	80003e4 <HAL_InitTick>
  HAL_MspInit();
 8000444:	f7ff ffbc 	bl	80003c0 <HAL_MspInit>
}
 8000448:	2000      	movs	r0, #0
 800044a:	bd08      	pop	{r3, pc}
 800044c:	40022000 	.word	0x40022000

08000450 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000450:	4a03      	ldr	r2, [pc, #12]	; (8000460 <HAL_IncTick+0x10>)
 8000452:	6811      	ldr	r1, [r2, #0]
 8000454:	4b03      	ldr	r3, [pc, #12]	; (8000464 <HAL_IncTick+0x14>)
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	440b      	add	r3, r1
 800045a:	6013      	str	r3, [r2, #0]
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop
 8000460:	20000028 	.word	0x20000028
 8000464:	20000004 	.word	0x20000004

08000468 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000468:	4b01      	ldr	r3, [pc, #4]	; (8000470 <HAL_GetTick+0x8>)
 800046a:	6818      	ldr	r0, [r3, #0]
}
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop
 8000470:	20000028 	.word	0x20000028

08000474 <HAL_GetTickPrio>:
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
  return uwTickPrio;
}
 8000474:	4b01      	ldr	r3, [pc, #4]	; (800047c <HAL_GetTickPrio+0x8>)
 8000476:	6858      	ldr	r0, [r3, #4]
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	20000004 	.word	0x20000004

08000480 <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval Status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
 8000480:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status  = HAL_OK;
  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 8000482:	4b06      	ldr	r3, [pc, #24]	; (800049c <HAL_SetTickFreq+0x1c>)
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	4283      	cmp	r3, r0
 8000488:	d005      	beq.n	8000496 <HAL_SetTickFreq+0x16>
  {
    uwTickFreq = Freq;
 800048a:	4b04      	ldr	r3, [pc, #16]	; (800049c <HAL_SetTickFreq+0x1c>)
 800048c:	7018      	strb	r0, [r3, #0]

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
 800048e:	6858      	ldr	r0, [r3, #4]
 8000490:	f7ff ffa8 	bl	80003e4 <HAL_InitTick>
 8000494:	bd08      	pop	{r3, pc}
  HAL_StatusTypeDef status  = HAL_OK;
 8000496:	2000      	movs	r0, #0
  }

  return status;
}
 8000498:	bd08      	pop	{r3, pc}
 800049a:	bf00      	nop
 800049c:	20000004 	.word	0x20000004

080004a0 <HAL_GetTickFreq>:
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
  return uwTickFreq;
}
 80004a0:	4b01      	ldr	r3, [pc, #4]	; (80004a8 <HAL_GetTickFreq+0x8>)
 80004a2:	7818      	ldrb	r0, [r3, #0]
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	20000004 	.word	0x20000004

080004ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80004ac:	b538      	push	{r3, r4, r5, lr}
 80004ae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80004b0:	f7ff ffda 	bl	8000468 <HAL_GetTick>
 80004b4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80004b6:	f1b4 3fff 	cmp.w	r4, #4294967295
 80004ba:	d002      	beq.n	80004c2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80004bc:	4b04      	ldr	r3, [pc, #16]	; (80004d0 <HAL_Delay+0x24>)
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80004c2:	f7ff ffd1 	bl	8000468 <HAL_GetTick>
 80004c6:	1b40      	subs	r0, r0, r5
 80004c8:	4284      	cmp	r4, r0
 80004ca:	d8fa      	bhi.n	80004c2 <HAL_Delay+0x16>
  {
  }
}
 80004cc:	bd38      	pop	{r3, r4, r5, pc}
 80004ce:	bf00      	nop
 80004d0:	20000004 	.word	0x20000004

080004d4 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80004d4:	4a02      	ldr	r2, [pc, #8]	; (80004e0 <HAL_SuspendTick+0xc>)
 80004d6:	6813      	ldr	r3, [r2, #0]
 80004d8:	f023 0302 	bic.w	r3, r3, #2
 80004dc:	6013      	str	r3, [r2, #0]
 80004de:	4770      	bx	lr
 80004e0:	e000e010 	.word	0xe000e010

080004e4 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80004e4:	4a02      	ldr	r2, [pc, #8]	; (80004f0 <HAL_ResumeTick+0xc>)
 80004e6:	6813      	ldr	r3, [r2, #0]
 80004e8:	f043 0302 	orr.w	r3, r3, #2
 80004ec:	6013      	str	r3, [r2, #0]
 80004ee:	4770      	bx	lr
 80004f0:	e000e010 	.word	0xe000e010

080004f4 <HAL_GetHalVersion>:
  * @retval version 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
  return __STM32F1xx_HAL_VERSION;
}
 80004f4:	4800      	ldr	r0, [pc, #0]	; (80004f8 <HAL_GetHalVersion+0x4>)
 80004f6:	4770      	bx	lr
 80004f8:	01010300 	.word	0x01010300

080004fc <HAL_GetREVID>:
  *       Refer to errata sheet of these devices for more details.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
  return ((DBGMCU->IDCODE) >> DBGMCU_IDCODE_REV_ID_Pos);
 80004fc:	4b01      	ldr	r3, [pc, #4]	; (8000504 <HAL_GetREVID+0x8>)
 80004fe:	6818      	ldr	r0, [r3, #0]
}
 8000500:	0c00      	lsrs	r0, r0, #16
 8000502:	4770      	bx	lr
 8000504:	e0042000 	.word	0xe0042000

08000508 <HAL_GetDEVID>:
  *       Refer to errata sheet of these devices for more details.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
  return ((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8000508:	4b02      	ldr	r3, [pc, #8]	; (8000514 <HAL_GetDEVID+0xc>)
 800050a:	6818      	ldr	r0, [r3, #0]
}
 800050c:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	e0042000 	.word	0xe0042000

08000518 <HAL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8000518:	4a02      	ldr	r2, [pc, #8]	; (8000524 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 800051a:	6853      	ldr	r3, [r2, #4]
 800051c:	f043 0301 	orr.w	r3, r3, #1
 8000520:	6053      	str	r3, [r2, #4]
 8000522:	4770      	bx	lr
 8000524:	e0042000 	.word	0xe0042000

08000528 <HAL_DBGMCU_DisableDBGSleepMode>:
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8000528:	4a02      	ldr	r2, [pc, #8]	; (8000534 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 800052a:	6853      	ldr	r3, [r2, #4]
 800052c:	f023 0301 	bic.w	r3, r3, #1
 8000530:	6053      	str	r3, [r2, #4]
 8000532:	4770      	bx	lr
 8000534:	e0042000 	.word	0xe0042000

08000538 <HAL_DBGMCU_EnableDBGStopMode>:
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8000538:	4a02      	ldr	r2, [pc, #8]	; (8000544 <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 800053a:	6853      	ldr	r3, [r2, #4]
 800053c:	f043 0302 	orr.w	r3, r3, #2
 8000540:	6053      	str	r3, [r2, #4]
 8000542:	4770      	bx	lr
 8000544:	e0042000 	.word	0xe0042000

08000548 <HAL_DBGMCU_DisableDBGStopMode>:
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8000548:	4a02      	ldr	r2, [pc, #8]	; (8000554 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 800054a:	6853      	ldr	r3, [r2, #4]
 800054c:	f023 0302 	bic.w	r3, r3, #2
 8000550:	6053      	str	r3, [r2, #4]
 8000552:	4770      	bx	lr
 8000554:	e0042000 	.word	0xe0042000

08000558 <HAL_DBGMCU_EnableDBGStandbyMode>:
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8000558:	4a02      	ldr	r2, [pc, #8]	; (8000564 <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 800055a:	6853      	ldr	r3, [r2, #4]
 800055c:	f043 0304 	orr.w	r3, r3, #4
 8000560:	6053      	str	r3, [r2, #4]
 8000562:	4770      	bx	lr
 8000564:	e0042000 	.word	0xe0042000

08000568 <HAL_DBGMCU_DisableDBGStandbyMode>:
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8000568:	4a02      	ldr	r2, [pc, #8]	; (8000574 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 800056a:	6853      	ldr	r3, [r2, #4]
 800056c:	f023 0304 	bic.w	r3, r3, #4
 8000570:	6053      	str	r3, [r2, #4]
 8000572:	4770      	bx	lr
 8000574:	e0042000 	.word	0xe0042000

08000578 <HAL_GetUID>:
  * @param UID pointer to 3 words array.
  * @retval Device identifier
  */
void HAL_GetUID(uint32_t *UID)
{
  UID[0] = (uint32_t)(READ_REG(*((uint32_t *)UID_BASE)));
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <HAL_GetUID+0x14>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	6003      	str	r3, [r0, #0]
  UID[1] = (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 800057e:	4b04      	ldr	r3, [pc, #16]	; (8000590 <HAL_GetUID+0x18>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	6043      	str	r3, [r0, #4]
  UID[2] = (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8000584:	4b03      	ldr	r3, [pc, #12]	; (8000594 <HAL_GetUID+0x1c>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	6083      	str	r3, [r0, #8]
 800058a:	4770      	bx	lr
 800058c:	1ffff7e8 	.word	0x1ffff7e8
 8000590:	1ffff7ec 	.word	0x1ffff7ec
 8000594:	1ffff7f0 	.word	0x1ffff7f0

08000598 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000598:	4a07      	ldr	r2, [pc, #28]	; (80005b8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800059a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800059c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005a0:	041b      	lsls	r3, r3, #16
 80005a2:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80005a4:	0200      	lsls	r0, r0, #8
 80005a6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005aa:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80005ac:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80005b0:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80005b4:	60d0      	str	r0, [r2, #12]
 80005b6:	4770      	bx	lr
 80005b8:	e000ed00 	.word	0xe000ed00

080005bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005bc:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005be:	4b16      	ldr	r3, [pc, #88]	; (8000618 <HAL_NVIC_SetPriority+0x5c>)
 80005c0:	68db      	ldr	r3, [r3, #12]
 80005c2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005c6:	f1c3 0407 	rsb	r4, r3, #7
 80005ca:	2c04      	cmp	r4, #4
 80005cc:	bf28      	it	cs
 80005ce:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005d0:	1d1d      	adds	r5, r3, #4
 80005d2:	2d06      	cmp	r5, #6
 80005d4:	d917      	bls.n	8000606 <HAL_NVIC_SetPriority+0x4a>
 80005d6:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d8:	2501      	movs	r5, #1
 80005da:	fa05 f404 	lsl.w	r4, r5, r4
 80005de:	3c01      	subs	r4, #1
 80005e0:	4021      	ands	r1, r4
 80005e2:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005e4:	fa05 f303 	lsl.w	r3, r5, r3
 80005e8:	3b01      	subs	r3, #1
 80005ea:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ec:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 80005ee:	2800      	cmp	r0, #0
 80005f0:	db0b      	blt.n	800060a <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f2:	0109      	lsls	r1, r1, #4
 80005f4:	b2c9      	uxtb	r1, r1
 80005f6:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80005fa:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80005fe:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000602:	bc30      	pop	{r4, r5}
 8000604:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000606:	2300      	movs	r3, #0
 8000608:	e7e6      	b.n	80005d8 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800060a:	f000 000f 	and.w	r0, r0, #15
 800060e:	0109      	lsls	r1, r1, #4
 8000610:	b2c9      	uxtb	r1, r1
 8000612:	4b02      	ldr	r3, [pc, #8]	; (800061c <HAL_NVIC_SetPriority+0x60>)
 8000614:	5419      	strb	r1, [r3, r0]
 8000616:	e7f4      	b.n	8000602 <HAL_NVIC_SetPriority+0x46>
 8000618:	e000ed00 	.word	0xe000ed00
 800061c:	e000ed14 	.word	0xe000ed14

08000620 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000620:	0942      	lsrs	r2, r0, #5
 8000622:	f000 001f 	and.w	r0, r0, #31
 8000626:	2301      	movs	r3, #1
 8000628:	fa03 f000 	lsl.w	r0, r3, r0
 800062c:	4b01      	ldr	r3, [pc, #4]	; (8000634 <HAL_NVIC_EnableIRQ+0x14>)
 800062e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000632:	4770      	bx	lr
 8000634:	e000e100 	.word	0xe000e100

08000638 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000638:	0943      	lsrs	r3, r0, #5
 800063a:	f000 001f 	and.w	r0, r0, #31
 800063e:	2201      	movs	r2, #1
 8000640:	fa02 f000 	lsl.w	r0, r2, r0
 8000644:	3320      	adds	r3, #32
 8000646:	4a02      	ldr	r2, [pc, #8]	; (8000650 <HAL_NVIC_DisableIRQ+0x18>)
 8000648:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	e000e100 	.word	0xe000e100

08000654 <HAL_NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000654:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000658:	4905      	ldr	r1, [pc, #20]	; (8000670 <HAL_NVIC_SystemReset+0x1c>)
 800065a:	68ca      	ldr	r2, [r1, #12]
 800065c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000660:	4b04      	ldr	r3, [pc, #16]	; (8000674 <HAL_NVIC_SystemReset+0x20>)
 8000662:	4313      	orrs	r3, r2
 8000664:	60cb      	str	r3, [r1, #12]
 8000666:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800066a:	bf00      	nop
 800066c:	e7fd      	b.n	800066a <HAL_NVIC_SystemReset+0x16>
 800066e:	bf00      	nop
 8000670:	e000ed00 	.word	0xe000ed00
 8000674:	05fa0004 	.word	0x05fa0004

08000678 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000678:	3801      	subs	r0, #1
 800067a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800067e:	d20a      	bcs.n	8000696 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <HAL_SYSTICK_Config+0x24>)
 8000682:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000684:	21f0      	movs	r1, #240	; 0xf0
 8000686:	4a06      	ldr	r2, [pc, #24]	; (80006a0 <HAL_SYSTICK_Config+0x28>)
 8000688:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800068c:	2000      	movs	r0, #0
 800068e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000690:	2207      	movs	r2, #7
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000696:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	e000e010 	.word	0xe000e010
 80006a0:	e000ed00 	.word	0xe000ed00

080006a4 <HAL_NVIC_GetPriorityGrouping>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006a4:	4b02      	ldr	r3, [pc, #8]	; (80006b0 <HAL_NVIC_GetPriorityGrouping+0xc>)
 80006a6:	68d8      	ldr	r0, [r3, #12]
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
}
 80006a8:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	e000ed00 	.word	0xe000ed00

080006b4 <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority: Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority: Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
 80006b4:	b470      	push	{r4, r5, r6}
  if ((int32_t)(IRQn) < 0)
 80006b6:	2800      	cmp	r0, #0
 80006b8:	db1f      	blt.n	80006fa <HAL_NVIC_GetPriority+0x46>
    return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 80006ba:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80006be:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80006c2:	f890 0300 	ldrb.w	r0, [r0, #768]	; 0x300
 80006c6:	0905      	lsrs	r5, r0, #4
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006c8:	f001 0107 	and.w	r1, r1, #7
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006cc:	f1c1 0407 	rsb	r4, r1, #7
 80006d0:	2c04      	cmp	r4, #4
 80006d2:	bf28      	it	cs
 80006d4:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006d6:	1d08      	adds	r0, r1, #4
 80006d8:	2806      	cmp	r0, #6
 80006da:	d914      	bls.n	8000706 <HAL_NVIC_GetPriority+0x52>
 80006dc:	3903      	subs	r1, #3
  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
 80006de:	fa25 f601 	lsr.w	r6, r5, r1
 80006e2:	2001      	movs	r0, #1
 80006e4:	fa00 f404 	lsl.w	r4, r0, r4
 80006e8:	3c01      	subs	r4, #1
 80006ea:	4034      	ands	r4, r6
 80006ec:	6014      	str	r4, [r2, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
 80006ee:	4088      	lsls	r0, r1
 80006f0:	3801      	subs	r0, #1
 80006f2:	4028      	ands	r0, r5
 80006f4:	6018      	str	r0, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
}
 80006f6:	bc70      	pop	{r4, r5, r6}
 80006f8:	4770      	bx	lr
    return(((uint32_t)SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 80006fa:	f000 000f 	and.w	r0, r0, #15
 80006fe:	4c03      	ldr	r4, [pc, #12]	; (800070c <HAL_NVIC_GetPriority+0x58>)
 8000700:	5c20      	ldrb	r0, [r4, r0]
 8000702:	0905      	lsrs	r5, r0, #4
 8000704:	e7e0      	b.n	80006c8 <HAL_NVIC_GetPriority+0x14>
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000706:	2100      	movs	r1, #0
 8000708:	e7e9      	b.n	80006de <HAL_NVIC_GetPriority+0x2a>
 800070a:	bf00      	nop
 800070c:	e000ed14 	.word	0xe000ed14

08000710 <HAL_NVIC_SetPendingIRQ>:
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000710:	0943      	lsrs	r3, r0, #5
 8000712:	f000 001f 	and.w	r0, r0, #31
 8000716:	2201      	movs	r2, #1
 8000718:	fa02 f000 	lsl.w	r0, r2, r0
 800071c:	3340      	adds	r3, #64	; 0x40
 800071e:	4a02      	ldr	r2, [pc, #8]	; (8000728 <HAL_NVIC_SetPendingIRQ+0x18>)
 8000720:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	e000e100 	.word	0xe000e100

0800072c <HAL_NVIC_GetPendingIRQ>:
  return((uint32_t)(((NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 800072c:	0943      	lsrs	r3, r0, #5
 800072e:	3340      	adds	r3, #64	; 0x40
 8000730:	4a04      	ldr	r2, [pc, #16]	; (8000744 <HAL_NVIC_GetPendingIRQ+0x18>)
 8000732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000736:	f000 001f 	and.w	r0, r0, #31
 800073a:	fa23 f000 	lsr.w	r0, r3, r0
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
}
 800073e:	f000 0001 	and.w	r0, r0, #1
 8000742:	4770      	bx	lr
 8000744:	e000e100 	.word	0xe000e100

08000748 <HAL_NVIC_ClearPendingIRQ>:
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000748:	0943      	lsrs	r3, r0, #5
 800074a:	f000 001f 	and.w	r0, r0, #31
 800074e:	2201      	movs	r2, #1
 8000750:	fa02 f000 	lsl.w	r0, r2, r0
 8000754:	3360      	adds	r3, #96	; 0x60
 8000756:	4a02      	ldr	r2, [pc, #8]	; (8000760 <HAL_NVIC_ClearPendingIRQ+0x18>)
 8000758:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	e000e100 	.word	0xe000e100

08000764 <HAL_NVIC_GetActive>:
  return((uint32_t)(((NVIC->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8000764:	0943      	lsrs	r3, r0, #5
 8000766:	3380      	adds	r3, #128	; 0x80
 8000768:	4a04      	ldr	r2, [pc, #16]	; (800077c <HAL_NVIC_GetActive+0x18>)
 800076a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800076e:	f000 001f 	and.w	r0, r0, #31
 8000772:	fa23 f000 	lsr.w	r0, r3, r0
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
}
 8000776:	f000 0001 	and.w	r0, r0, #1
 800077a:	4770      	bx	lr
 800077c:	e000e100 	.word	0xe000e100

08000780 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000780:	2804      	cmp	r0, #4
 8000782:	d005      	beq.n	8000790 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000784:	4a05      	ldr	r2, [pc, #20]	; (800079c <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8000786:	6813      	ldr	r3, [r2, #0]
 8000788:	f023 0304 	bic.w	r3, r3, #4
 800078c:	6013      	str	r3, [r2, #0]
 800078e:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000790:	4a02      	ldr	r2, [pc, #8]	; (800079c <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8000792:	6813      	ldr	r3, [r2, #0]
 8000794:	f043 0304 	orr.w	r3, r3, #4
 8000798:	6013      	str	r3, [r2, #0]
 800079a:	4770      	bx	lr
 800079c:	e000e010 	.word	0xe000e010

080007a0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80007a0:	4770      	bx	lr

080007a2 <HAL_SYSTICK_IRQHandler>:
{
 80007a2:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80007a4:	f7ff fffc 	bl	80007a0 <HAL_SYSTICK_Callback>
 80007a8:	bd08      	pop	{r3, pc}
 80007aa:	bf00      	nop

080007ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ae:	b083      	sub	sp, #12
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80007b0:	2600      	movs	r6, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80007b2:	4634      	mov	r4, r6
 80007b4:	e071      	b.n	800089a <HAL_GPIO_Init+0xee>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	f000 80a1 	beq.w	80008fe <HAL_GPIO_Init+0x152>
 80007bc:	2d01      	cmp	r5, #1
 80007be:	d100      	bne.n	80007c2 <HAL_GPIO_Init+0x16>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80007c0:	68ce      	ldr	r6, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80007c2:	2bff      	cmp	r3, #255	; 0xff
 80007c4:	f200 80af 	bhi.w	8000926 <HAL_GPIO_Init+0x17a>
 80007c8:	4686      	mov	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80007ca:	2bff      	cmp	r3, #255	; 0xff
 80007cc:	f200 80ae 	bhi.w	800092c <HAL_GPIO_Init+0x180>
 80007d0:	00a5      	lsls	r5, r4, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80007d2:	f8de 2000 	ldr.w	r2, [lr]
 80007d6:	270f      	movs	r7, #15
 80007d8:	40af      	lsls	r7, r5
 80007da:	ea22 0207 	bic.w	r2, r2, r7
 80007de:	fa06 f505 	lsl.w	r5, r6, r5
 80007e2:	432a      	orrs	r2, r5
 80007e4:	f8ce 2000 	str.w	r2, [lr]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007e8:	684a      	ldr	r2, [r1, #4]
 80007ea:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80007ee:	d053      	beq.n	8000898 <HAL_GPIO_Init+0xec>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80007f0:	4a63      	ldr	r2, [pc, #396]	; (8000980 <HAL_GPIO_Init+0x1d4>)
 80007f2:	6995      	ldr	r5, [r2, #24]
 80007f4:	f045 0501 	orr.w	r5, r5, #1
 80007f8:	6195      	str	r5, [r2, #24]
 80007fa:	6992      	ldr	r2, [r2, #24]
 80007fc:	f002 0201 	and.w	r2, r2, #1
 8000800:	9201      	str	r2, [sp, #4]
 8000802:	9a01      	ldr	r2, [sp, #4]
        temp = AFIO->EXTICR[position >> 2U];
 8000804:	08a5      	lsrs	r5, r4, #2
 8000806:	1caf      	adds	r7, r5, #2
 8000808:	4a5e      	ldr	r2, [pc, #376]	; (8000984 <HAL_GPIO_Init+0x1d8>)
 800080a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800080e:	f004 0703 	and.w	r7, r4, #3
 8000812:	00bf      	lsls	r7, r7, #2
 8000814:	f04f 0e0f 	mov.w	lr, #15
 8000818:	fa0e fe07 	lsl.w	lr, lr, r7
 800081c:	ea22 020e 	bic.w	r2, r2, lr
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000820:	f8df e170 	ldr.w	lr, [pc, #368]	; 8000994 <HAL_GPIO_Init+0x1e8>
 8000824:	4570      	cmp	r0, lr
 8000826:	f000 8088 	beq.w	800093a <HAL_GPIO_Init+0x18e>
 800082a:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 800082e:	4570      	cmp	r0, lr
 8000830:	f000 8086 	beq.w	8000940 <HAL_GPIO_Init+0x194>
 8000834:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 8000838:	4570      	cmp	r0, lr
 800083a:	f000 8084 	beq.w	8000946 <HAL_GPIO_Init+0x19a>
 800083e:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 8000842:	4570      	cmp	r0, lr
 8000844:	d076      	beq.n	8000934 <HAL_GPIO_Init+0x188>
 8000846:	f04f 0e04 	mov.w	lr, #4
 800084a:	fa0e f707 	lsl.w	r7, lr, r7
 800084e:	433a      	orrs	r2, r7
        AFIO->EXTICR[position >> 2U] = temp;
 8000850:	3502      	adds	r5, #2
 8000852:	4f4c      	ldr	r7, [pc, #304]	; (8000984 <HAL_GPIO_Init+0x1d8>)
 8000854:	f847 2025 	str.w	r2, [r7, r5, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000858:	684a      	ldr	r2, [r1, #4]
 800085a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800085e:	d075      	beq.n	800094c <HAL_GPIO_Init+0x1a0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000860:	4d49      	ldr	r5, [pc, #292]	; (8000988 <HAL_GPIO_Init+0x1dc>)
 8000862:	682a      	ldr	r2, [r5, #0]
 8000864:	431a      	orrs	r2, r3
 8000866:	602a      	str	r2, [r5, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000868:	684a      	ldr	r2, [r1, #4]
 800086a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800086e:	d073      	beq.n	8000958 <HAL_GPIO_Init+0x1ac>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000870:	4d45      	ldr	r5, [pc, #276]	; (8000988 <HAL_GPIO_Init+0x1dc>)
 8000872:	686a      	ldr	r2, [r5, #4]
 8000874:	431a      	orrs	r2, r3
 8000876:	606a      	str	r2, [r5, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000878:	684a      	ldr	r2, [r1, #4]
 800087a:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 800087e:	d071      	beq.n	8000964 <HAL_GPIO_Init+0x1b8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000880:	4d41      	ldr	r5, [pc, #260]	; (8000988 <HAL_GPIO_Init+0x1dc>)
 8000882:	68aa      	ldr	r2, [r5, #8]
 8000884:	431a      	orrs	r2, r3
 8000886:	60aa      	str	r2, [r5, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000888:	684a      	ldr	r2, [r1, #4]
 800088a:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 800088e:	d06f      	beq.n	8000970 <HAL_GPIO_Init+0x1c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000890:	4d3d      	ldr	r5, [pc, #244]	; (8000988 <HAL_GPIO_Init+0x1dc>)
 8000892:	68ea      	ldr	r2, [r5, #12]
 8000894:	4313      	orrs	r3, r2
 8000896:	60eb      	str	r3, [r5, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000898:	3401      	adds	r4, #1
 800089a:	2c0f      	cmp	r4, #15
 800089c:	d86e      	bhi.n	800097c <HAL_GPIO_Init+0x1d0>
    ioposition = (0x01U << position);
 800089e:	2201      	movs	r2, #1
 80008a0:	40a2      	lsls	r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008a2:	680b      	ldr	r3, [r1, #0]
 80008a4:	4013      	ands	r3, r2
    if (iocurrent == ioposition)
 80008a6:	429a      	cmp	r2, r3
 80008a8:	d1f6      	bne.n	8000898 <HAL_GPIO_Init+0xec>
      switch (GPIO_Init->Mode)
 80008aa:	684d      	ldr	r5, [r1, #4]
 80008ac:	2d12      	cmp	r5, #18
 80008ae:	d030      	beq.n	8000912 <HAL_GPIO_Init+0x166>
 80008b0:	d80b      	bhi.n	80008ca <HAL_GPIO_Init+0x11e>
 80008b2:	2d02      	cmp	r5, #2
 80008b4:	d02a      	beq.n	800090c <HAL_GPIO_Init+0x160>
 80008b6:	f67f af7e 	bls.w	80007b6 <HAL_GPIO_Init+0xa>
 80008ba:	2d03      	cmp	r5, #3
 80008bc:	d02f      	beq.n	800091e <HAL_GPIO_Init+0x172>
 80008be:	2d11      	cmp	r5, #17
 80008c0:	f47f af7f 	bne.w	80007c2 <HAL_GPIO_Init+0x16>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008c4:	68ce      	ldr	r6, [r1, #12]
 80008c6:	3604      	adds	r6, #4
          break;
 80008c8:	e77b      	b.n	80007c2 <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 80008ca:	4f30      	ldr	r7, [pc, #192]	; (800098c <HAL_GPIO_Init+0x1e0>)
 80008cc:	42bd      	cmp	r5, r7
 80008ce:	d016      	beq.n	80008fe <HAL_GPIO_Init+0x152>
 80008d0:	d90c      	bls.n	80008ec <HAL_GPIO_Init+0x140>
 80008d2:	4f2f      	ldr	r7, [pc, #188]	; (8000990 <HAL_GPIO_Init+0x1e4>)
 80008d4:	42bd      	cmp	r5, r7
 80008d6:	d012      	beq.n	80008fe <HAL_GPIO_Init+0x152>
 80008d8:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80008dc:	42bd      	cmp	r5, r7
 80008de:	d00e      	beq.n	80008fe <HAL_GPIO_Init+0x152>
 80008e0:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 80008e4:	42bd      	cmp	r5, r7
 80008e6:	f47f af6c 	bne.w	80007c2 <HAL_GPIO_Init+0x16>
 80008ea:	e008      	b.n	80008fe <HAL_GPIO_Init+0x152>
 80008ec:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 80008f0:	42bd      	cmp	r5, r7
 80008f2:	d004      	beq.n	80008fe <HAL_GPIO_Init+0x152>
 80008f4:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80008f8:	42bd      	cmp	r5, r7
 80008fa:	f47f af62 	bne.w	80007c2 <HAL_GPIO_Init+0x16>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80008fe:	688d      	ldr	r5, [r1, #8]
 8000900:	b17d      	cbz	r5, 8000922 <HAL_GPIO_Init+0x176>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000902:	2d01      	cmp	r5, #1
 8000904:	d008      	beq.n	8000918 <HAL_GPIO_Init+0x16c>
            GPIOx->BRR = ioposition;
 8000906:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000908:	2608      	movs	r6, #8
 800090a:	e75a      	b.n	80007c2 <HAL_GPIO_Init+0x16>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800090c:	68ce      	ldr	r6, [r1, #12]
 800090e:	3608      	adds	r6, #8
          break;
 8000910:	e757      	b.n	80007c2 <HAL_GPIO_Init+0x16>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000912:	68ce      	ldr	r6, [r1, #12]
 8000914:	360c      	adds	r6, #12
          break;
 8000916:	e754      	b.n	80007c2 <HAL_GPIO_Init+0x16>
            GPIOx->BSRR = ioposition;
 8000918:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800091a:	2608      	movs	r6, #8
 800091c:	e751      	b.n	80007c2 <HAL_GPIO_Init+0x16>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800091e:	2600      	movs	r6, #0
 8000920:	e74f      	b.n	80007c2 <HAL_GPIO_Init+0x16>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000922:	2604      	movs	r6, #4
 8000924:	e74d      	b.n	80007c2 <HAL_GPIO_Init+0x16>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000926:	f100 0e04 	add.w	lr, r0, #4
 800092a:	e74e      	b.n	80007ca <HAL_GPIO_Init+0x1e>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 800092c:	f1a4 0508 	sub.w	r5, r4, #8
 8000930:	00ad      	lsls	r5, r5, #2
 8000932:	e74e      	b.n	80007d2 <HAL_GPIO_Init+0x26>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000934:	f04f 0e03 	mov.w	lr, #3
 8000938:	e787      	b.n	800084a <HAL_GPIO_Init+0x9e>
 800093a:	f04f 0e00 	mov.w	lr, #0
 800093e:	e784      	b.n	800084a <HAL_GPIO_Init+0x9e>
 8000940:	f04f 0e01 	mov.w	lr, #1
 8000944:	e781      	b.n	800084a <HAL_GPIO_Init+0x9e>
 8000946:	f04f 0e02 	mov.w	lr, #2
 800094a:	e77e      	b.n	800084a <HAL_GPIO_Init+0x9e>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800094c:	4d0e      	ldr	r5, [pc, #56]	; (8000988 <HAL_GPIO_Init+0x1dc>)
 800094e:	682a      	ldr	r2, [r5, #0]
 8000950:	ea22 0203 	bic.w	r2, r2, r3
 8000954:	602a      	str	r2, [r5, #0]
 8000956:	e787      	b.n	8000868 <HAL_GPIO_Init+0xbc>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000958:	4d0b      	ldr	r5, [pc, #44]	; (8000988 <HAL_GPIO_Init+0x1dc>)
 800095a:	686a      	ldr	r2, [r5, #4]
 800095c:	ea22 0203 	bic.w	r2, r2, r3
 8000960:	606a      	str	r2, [r5, #4]
 8000962:	e789      	b.n	8000878 <HAL_GPIO_Init+0xcc>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000964:	4d08      	ldr	r5, [pc, #32]	; (8000988 <HAL_GPIO_Init+0x1dc>)
 8000966:	68aa      	ldr	r2, [r5, #8]
 8000968:	ea22 0203 	bic.w	r2, r2, r3
 800096c:	60aa      	str	r2, [r5, #8]
 800096e:	e78b      	b.n	8000888 <HAL_GPIO_Init+0xdc>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000970:	4d05      	ldr	r5, [pc, #20]	; (8000988 <HAL_GPIO_Init+0x1dc>)
 8000972:	68ea      	ldr	r2, [r5, #12]
 8000974:	ea22 0303 	bic.w	r3, r2, r3
 8000978:	60eb      	str	r3, [r5, #12]
 800097a:	e78d      	b.n	8000898 <HAL_GPIO_Init+0xec>
        }
      }
    }
  }
}
 800097c:	b003      	add	sp, #12
 800097e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000980:	40021000 	.word	0x40021000
 8000984:	40010000 	.word	0x40010000
 8000988:	40010400 	.word	0x40010400
 800098c:	10210000 	.word	0x10210000
 8000990:	10310000 	.word	0x10310000
 8000994:	40010800 	.word	0x40010800

08000998 <HAL_GPIO_DeInit>:
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00U;
 8000998:	2200      	movs	r2, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800099a:	e065      	b.n	8000a68 <HAL_GPIO_DeInit+0xd0>
    if (iocurrent)
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800099c:	f100 0e04 	add.w	lr, r0, #4
 80009a0:	e03d      	b.n	8000a1e <HAL_GPIO_DeInit+0x86>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80009a2:	f1a2 0608 	sub.w	r6, r2, #8
 80009a6:	00b7      	lsls	r7, r6, #2

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80009a8:	f8de 4000 	ldr.w	r4, [lr]
 80009ac:	250f      	movs	r5, #15
 80009ae:	fa05 f607 	lsl.w	r6, r5, r7
 80009b2:	ea24 0406 	bic.w	r4, r4, r6
 80009b6:	2604      	movs	r6, #4
 80009b8:	40be      	lsls	r6, r7
 80009ba:	4334      	orrs	r4, r6
 80009bc:	f8ce 4000 	str.w	r4, [lr]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80009c0:	68c4      	ldr	r4, [r0, #12]
 80009c2:	43db      	mvns	r3, r3
 80009c4:	401c      	ands	r4, r3
 80009c6:	60c4      	str	r4, [r0, #12]

      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2U];
 80009c8:	ea4f 0e92 	mov.w	lr, r2, lsr #2
 80009cc:	f10e 0602 	add.w	r6, lr, #2
 80009d0:	4c2a      	ldr	r4, [pc, #168]	; (8000a7c <HAL_GPIO_DeInit+0xe4>)
 80009d2:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
      tmp &= 0x0FU << (4U * (position & 0x03U));
 80009d6:	f002 0403 	and.w	r4, r2, #3
 80009da:	00a4      	lsls	r4, r4, #2
 80009dc:	40a5      	lsls	r5, r4
 80009de:	402e      	ands	r6, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80009e0:	4f27      	ldr	r7, [pc, #156]	; (8000a80 <HAL_GPIO_DeInit+0xe8>)
 80009e2:	42b8      	cmp	r0, r7
 80009e4:	d021      	beq.n	8000a2a <HAL_GPIO_DeInit+0x92>
 80009e6:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80009ea:	42b8      	cmp	r0, r7
 80009ec:	d01f      	beq.n	8000a2e <HAL_GPIO_DeInit+0x96>
 80009ee:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80009f2:	42b8      	cmp	r0, r7
 80009f4:	d01d      	beq.n	8000a32 <HAL_GPIO_DeInit+0x9a>
 80009f6:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80009fa:	42b8      	cmp	r0, r7
 80009fc:	d013      	beq.n	8000a26 <HAL_GPIO_DeInit+0x8e>
 80009fe:	2704      	movs	r7, #4
 8000a00:	fa07 f404 	lsl.w	r4, r7, r4
 8000a04:	42a6      	cmp	r6, r4
 8000a06:	d016      	beq.n	8000a36 <HAL_GPIO_DeInit+0x9e>
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
      }
    }

    position++;
 8000a08:	3201      	adds	r2, #1
  while ((GPIO_Pin >> position) != 0U)
 8000a0a:	fa31 f302 	lsrs.w	r3, r1, r2
 8000a0e:	d029      	beq.n	8000a64 <HAL_GPIO_DeInit+0xcc>
    iocurrent = (GPIO_Pin) & (1U << position);
 8000a10:	2301      	movs	r3, #1
 8000a12:	4093      	lsls	r3, r2
    if (iocurrent)
 8000a14:	400b      	ands	r3, r1
 8000a16:	d0f7      	beq.n	8000a08 <HAL_GPIO_DeInit+0x70>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a18:	2bff      	cmp	r3, #255	; 0xff
 8000a1a:	d8bf      	bhi.n	800099c <HAL_GPIO_DeInit+0x4>
 8000a1c:	4686      	mov	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000a1e:	2bff      	cmp	r3, #255	; 0xff
 8000a20:	d8bf      	bhi.n	80009a2 <HAL_GPIO_DeInit+0xa>
 8000a22:	0097      	lsls	r7, r2, #2
 8000a24:	e7c0      	b.n	80009a8 <HAL_GPIO_DeInit+0x10>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8000a26:	2703      	movs	r7, #3
 8000a28:	e7ea      	b.n	8000a00 <HAL_GPIO_DeInit+0x68>
 8000a2a:	2700      	movs	r7, #0
 8000a2c:	e7e8      	b.n	8000a00 <HAL_GPIO_DeInit+0x68>
 8000a2e:	2701      	movs	r7, #1
 8000a30:	e7e6      	b.n	8000a00 <HAL_GPIO_DeInit+0x68>
 8000a32:	2702      	movs	r7, #2
 8000a34:	e7e4      	b.n	8000a00 <HAL_GPIO_DeInit+0x68>
        CLEAR_BIT(AFIO->EXTICR[position >> 2U], tmp);
 8000a36:	4f11      	ldr	r7, [pc, #68]	; (8000a7c <HAL_GPIO_DeInit+0xe4>)
 8000a38:	f10e 0402 	add.w	r4, lr, #2
 8000a3c:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
 8000a40:	ea26 0505 	bic.w	r5, r6, r5
 8000a44:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8000a48:	4c0e      	ldr	r4, [pc, #56]	; (8000a84 <HAL_GPIO_DeInit+0xec>)
 8000a4a:	6825      	ldr	r5, [r4, #0]
 8000a4c:	401d      	ands	r5, r3
 8000a4e:	6025      	str	r5, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8000a50:	6865      	ldr	r5, [r4, #4]
 8000a52:	401d      	ands	r5, r3
 8000a54:	6065      	str	r5, [r4, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8000a56:	68a5      	ldr	r5, [r4, #8]
 8000a58:	401d      	ands	r5, r3
 8000a5a:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8000a5c:	68e5      	ldr	r5, [r4, #12]
 8000a5e:	402b      	ands	r3, r5
 8000a60:	60e3      	str	r3, [r4, #12]
 8000a62:	e7d1      	b.n	8000a08 <HAL_GPIO_DeInit+0x70>
  }
}
 8000a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    position++;
 8000a66:	3201      	adds	r2, #1
  while ((GPIO_Pin >> position) != 0U)
 8000a68:	fa31 f302 	lsrs.w	r3, r1, r2
 8000a6c:	d005      	beq.n	8000a7a <HAL_GPIO_DeInit+0xe2>
    iocurrent = (GPIO_Pin) & (1U << position);
 8000a6e:	2301      	movs	r3, #1
 8000a70:	4093      	lsls	r3, r2
    if (iocurrent)
 8000a72:	400b      	ands	r3, r1
 8000a74:	d0f7      	beq.n	8000a66 <HAL_GPIO_DeInit+0xce>
{
 8000a76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a78:	e7ce      	b.n	8000a18 <HAL_GPIO_DeInit+0x80>
 8000a7a:	4770      	bx	lr
 8000a7c:	40010000 	.word	0x40010000
 8000a80:	40010800 	.word	0x40010800
 8000a84:	40010400 	.word	0x40010400

08000a88 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000a88:	6883      	ldr	r3, [r0, #8]
 8000a8a:	4219      	tst	r1, r3
 8000a8c:	d101      	bne.n	8000a92 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000a8e:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8000a90:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8000a92:	2001      	movs	r0, #1
 8000a94:	4770      	bx	lr

08000a96 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a96:	b912      	cbnz	r2, 8000a9e <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000a98:	0409      	lsls	r1, r1, #16
 8000a9a:	6101      	str	r1, [r0, #16]
 8000a9c:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8000a9e:	6101      	str	r1, [r0, #16]
 8000aa0:	4770      	bx	lr

08000aa2 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000aa2:	68c3      	ldr	r3, [r0, #12]
 8000aa4:	4059      	eors	r1, r3
 8000aa6:	60c1      	str	r1, [r0, #12]
 8000aa8:	4770      	bx	lr

08000aaa <HAL_GPIO_LockPin>:
* @param  GPIO_Pin: specifies the port bit to be locked.
*         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
* @retval None
*/
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000aaa:	b082      	sub	sp, #8
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 8000aac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ab0:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_LOCK_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  SET_BIT(tmp, GPIO_Pin);
 8000ab2:	9b01      	ldr	r3, [sp, #4]
 8000ab4:	430b      	orrs	r3, r1
 8000ab6:	9301      	str	r3, [sp, #4]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 8000ab8:	9b01      	ldr	r3, [sp, #4]
 8000aba:	6183      	str	r3, [r0, #24]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
 8000abc:	6181      	str	r1, [r0, #24]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 8000abe:	9b01      	ldr	r3, [sp, #4]
 8000ac0:	6183      	str	r3, [r0, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8000ac2:	6983      	ldr	r3, [r0, #24]
 8000ac4:	9301      	str	r3, [sp, #4]

  if ((uint32_t)(GPIOx->LCKR & GPIO_LCKR_LCKK))
 8000ac6:	6983      	ldr	r3, [r0, #24]
 8000ac8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000acc:	d102      	bne.n	8000ad4 <HAL_GPIO_LockPin+0x2a>
  {
    return HAL_OK;
  }
  else
  {
    return HAL_ERROR;
 8000ace:	2001      	movs	r0, #1
  }
}
 8000ad0:	b002      	add	sp, #8
 8000ad2:	4770      	bx	lr
    return HAL_OK;
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	e7fb      	b.n	8000ad0 <HAL_GPIO_LockPin+0x26>

08000ad8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ad8:	4770      	bx	lr

08000ada <HAL_GPIO_EXTI_IRQHandler>:
{
 8000ada:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000adc:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <HAL_GPIO_EXTI_IRQHandler+0x16>)
 8000ade:	695b      	ldr	r3, [r3, #20]
 8000ae0:	4203      	tst	r3, r0
 8000ae2:	d100      	bne.n	8000ae6 <HAL_GPIO_EXTI_IRQHandler+0xc>
 8000ae4:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ae6:	4b02      	ldr	r3, [pc, #8]	; (8000af0 <HAL_GPIO_EXTI_IRQHandler+0x16>)
 8000ae8:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000aea:	f7ff fff5 	bl	8000ad8 <HAL_GPIO_EXTI_Callback>
}
 8000aee:	e7f9      	b.n	8000ae4 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8000af0:	40010400 	.word	0x40010400

08000af4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000af4:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000af6:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <RCC_Delay+0x24>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a08      	ldr	r2, [pc, #32]	; (8000b1c <RCC_Delay+0x28>)
 8000afc:	fba2 2303 	umull	r2, r3, r2, r3
 8000b00:	0a5b      	lsrs	r3, r3, #9
 8000b02:	fb00 f003 	mul.w	r0, r0, r3
 8000b06:	9001      	str	r0, [sp, #4]
 8000b08:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000b0a:	9b01      	ldr	r3, [sp, #4]
 8000b0c:	1e5a      	subs	r2, r3, #1
 8000b0e:	9201      	str	r2, [sp, #4]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d1f9      	bne.n	8000b08 <RCC_Delay+0x14>
}
 8000b14:	b002      	add	sp, #8
 8000b16:	4770      	bx	lr
 8000b18:	20000000 	.word	0x20000000
 8000b1c:	10624dd3 	.word	0x10624dd3

08000b20 <HAL_RCC_DeInit>:
{
 8000b20:	b570      	push	{r4, r5, r6, lr}
  tickstart = HAL_GetTick();
 8000b22:	f7ff fca1 	bl	8000468 <HAL_GetTick>
 8000b26:	4604      	mov	r4, r0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000b28:	4a35      	ldr	r2, [pc, #212]	; (8000c00 <HAL_RCC_DeInit+0xe0>)
 8000b2a:	6813      	ldr	r3, [r2, #0]
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	6013      	str	r3, [r2, #0]
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000b32:	4b33      	ldr	r3, [pc, #204]	; (8000c00 <HAL_RCC_DeInit+0xe0>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f013 0f02 	tst.w	r3, #2
 8000b3a:	d107      	bne.n	8000b4c <HAL_RCC_DeInit+0x2c>
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b3c:	f7ff fc94 	bl	8000468 <HAL_GetTick>
 8000b40:	1b00      	subs	r0, r0, r4
 8000b42:	2802      	cmp	r0, #2
 8000b44:	d9f5      	bls.n	8000b32 <HAL_RCC_DeInit+0x12>
      return HAL_TIMEOUT;
 8000b46:	2403      	movs	r4, #3
}
 8000b48:	4620      	mov	r0, r4
 8000b4a:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 8000b4c:	4d2c      	ldr	r5, [pc, #176]	; (8000c00 <HAL_RCC_DeInit+0xe0>)
 8000b4e:	682b      	ldr	r3, [r5, #0]
 8000b50:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b58:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8000b5a:	f7ff fc85 	bl	8000468 <HAL_GetTick>
 8000b5e:	4604      	mov	r4, r0
  CLEAR_REG(RCC->CFGR);
 8000b60:	2300      	movs	r3, #0
 8000b62:	606b      	str	r3, [r5, #4]
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8000b64:	4b26      	ldr	r3, [pc, #152]	; (8000c00 <HAL_RCC_DeInit+0xe0>)
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	f013 0f0c 	tst.w	r3, #12
 8000b6c:	d008      	beq.n	8000b80 <HAL_RCC_DeInit+0x60>
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b6e:	f7ff fc7b 	bl	8000468 <HAL_GetTick>
 8000b72:	1b00      	subs	r0, r0, r4
 8000b74:	f241 3388 	movw	r3, #5000	; 0x1388
 8000b78:	4298      	cmp	r0, r3
 8000b7a:	d9f3      	bls.n	8000b64 <HAL_RCC_DeInit+0x44>
      return HAL_TIMEOUT;
 8000b7c:	2403      	movs	r4, #3
 8000b7e:	e7e3      	b.n	8000b48 <HAL_RCC_DeInit+0x28>
  SystemCoreClock = HSI_VALUE;
 8000b80:	4a20      	ldr	r2, [pc, #128]	; (8000c04 <HAL_RCC_DeInit+0xe4>)
 8000b82:	4b21      	ldr	r3, [pc, #132]	; (8000c08 <HAL_RCC_DeInit+0xe8>)
 8000b84:	601a      	str	r2, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b86:	200f      	movs	r0, #15
 8000b88:	f7ff fc2c 	bl	80003e4 <HAL_InitTick>
 8000b8c:	4604      	mov	r4, r0
 8000b8e:	b108      	cbz	r0, 8000b94 <HAL_RCC_DeInit+0x74>
    return HAL_ERROR;
 8000b90:	2401      	movs	r4, #1
 8000b92:	e7d9      	b.n	8000b48 <HAL_RCC_DeInit+0x28>
  tickstart = HAL_GetTick();
 8000b94:	f7ff fc68 	bl	8000468 <HAL_GetTick>
 8000b98:	4605      	mov	r5, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8000b9a:	4a19      	ldr	r2, [pc, #100]	; (8000c00 <HAL_RCC_DeInit+0xe0>)
 8000b9c:	6813      	ldr	r3, [r2, #0]
 8000b9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000ba2:	6013      	str	r3, [r2, #0]
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8000ba4:	4b16      	ldr	r3, [pc, #88]	; (8000c00 <HAL_RCC_DeInit+0xe0>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000bac:	d006      	beq.n	8000bbc <HAL_RCC_DeInit+0x9c>
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000bae:	f7ff fc5b 	bl	8000468 <HAL_GetTick>
 8000bb2:	1b40      	subs	r0, r0, r5
 8000bb4:	2802      	cmp	r0, #2
 8000bb6:	d9f5      	bls.n	8000ba4 <HAL_RCC_DeInit+0x84>
      return HAL_TIMEOUT;
 8000bb8:	2403      	movs	r4, #3
 8000bba:	e7c5      	b.n	8000b48 <HAL_RCC_DeInit+0x28>
  CLEAR_REG(RCC->CFGR);
 8000bbc:	4e10      	ldr	r6, [pc, #64]	; (8000c00 <HAL_RCC_DeInit+0xe0>)
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	6073      	str	r3, [r6, #4]
  tickstart = HAL_GetTick();
 8000bc2:	f7ff fc51 	bl	8000468 <HAL_GetTick>
 8000bc6:	4605      	mov	r5, r0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 8000bc8:	6833      	ldr	r3, [r6, #0]
 8000bca:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000bce:	6033      	str	r3, [r6, #0]
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8000bd0:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <HAL_RCC_DeInit+0xe0>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000bd8:	d006      	beq.n	8000be8 <HAL_RCC_DeInit+0xc8>
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bda:	f7ff fc45 	bl	8000468 <HAL_GetTick>
 8000bde:	1b40      	subs	r0, r0, r5
 8000be0:	2864      	cmp	r0, #100	; 0x64
 8000be2:	d9f5      	bls.n	8000bd0 <HAL_RCC_DeInit+0xb0>
      return HAL_TIMEOUT;
 8000be4:	2403      	movs	r4, #3
 8000be6:	e7af      	b.n	8000b48 <HAL_RCC_DeInit+0x28>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8000be8:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <HAL_RCC_DeInit+0xe0>)
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000bf0:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8000bf2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000bf4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000bf8:	625a      	str	r2, [r3, #36]	; 0x24
  CLEAR_REG(RCC->CIR);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8000bfe:	e7a3      	b.n	8000b48 <HAL_RCC_DeInit+0x28>
 8000c00:	40021000 	.word	0x40021000
 8000c04:	007a1200 	.word	0x007a1200
 8000c08:	20000000 	.word	0x20000000

08000c0c <HAL_RCC_OscConfig>:
{
 8000c0c:	b570      	push	{r4, r5, r6, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c12:	6803      	ldr	r3, [r0, #0]
 8000c14:	f013 0f01 	tst.w	r3, #1
 8000c18:	d03d      	beq.n	8000c96 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c1a:	4bac      	ldr	r3, [pc, #688]	; (8000ecc <HAL_RCC_OscConfig+0x2c0>)
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f003 030c 	and.w	r3, r3, #12
 8000c22:	2b04      	cmp	r3, #4
 8000c24:	d02e      	beq.n	8000c84 <HAL_RCC_OscConfig+0x78>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c26:	4ba9      	ldr	r3, [pc, #676]	; (8000ecc <HAL_RCC_OscConfig+0x2c0>)
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f003 030c 	and.w	r3, r3, #12
 8000c2e:	2b08      	cmp	r3, #8
 8000c30:	d023      	beq.n	8000c7a <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c32:	6863      	ldr	r3, [r4, #4]
 8000c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c38:	d051      	beq.n	8000cde <HAL_RCC_OscConfig+0xd2>
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d155      	bne.n	8000cea <HAL_RCC_OscConfig+0xde>
 8000c3e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000c42:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000c54:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c56:	6863      	ldr	r3, [r4, #4]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d060      	beq.n	8000d1e <HAL_RCC_OscConfig+0x112>
        tickstart = HAL_GetTick();
 8000c5c:	f7ff fc04 	bl	8000468 <HAL_GetTick>
 8000c60:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c62:	4b9a      	ldr	r3, [pc, #616]	; (8000ecc <HAL_RCC_OscConfig+0x2c0>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000c6a:	d114      	bne.n	8000c96 <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c6c:	f7ff fbfc 	bl	8000468 <HAL_GetTick>
 8000c70:	1b40      	subs	r0, r0, r5
 8000c72:	2864      	cmp	r0, #100	; 0x64
 8000c74:	d9f5      	bls.n	8000c62 <HAL_RCC_OscConfig+0x56>
            return HAL_TIMEOUT;
 8000c76:	2003      	movs	r0, #3
 8000c78:	e1af      	b.n	8000fda <HAL_RCC_OscConfig+0x3ce>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c7a:	4b94      	ldr	r3, [pc, #592]	; (8000ecc <HAL_RCC_OscConfig+0x2c0>)
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000c82:	d0d6      	beq.n	8000c32 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c84:	4b91      	ldr	r3, [pc, #580]	; (8000ecc <HAL_RCC_OscConfig+0x2c0>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000c8c:	d003      	beq.n	8000c96 <HAL_RCC_OscConfig+0x8a>
 8000c8e:	6863      	ldr	r3, [r4, #4]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	f000 819f 	beq.w	8000fd4 <HAL_RCC_OscConfig+0x3c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c96:	6823      	ldr	r3, [r4, #0]
 8000c98:	f013 0f02 	tst.w	r3, #2
 8000c9c:	d065      	beq.n	8000d6a <HAL_RCC_OscConfig+0x15e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000c9e:	4b8b      	ldr	r3, [pc, #556]	; (8000ecc <HAL_RCC_OscConfig+0x2c0>)
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f013 0f0c 	tst.w	r3, #12
 8000ca6:	d04e      	beq.n	8000d46 <HAL_RCC_OscConfig+0x13a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000ca8:	4b88      	ldr	r3, [pc, #544]	; (8000ecc <HAL_RCC_OscConfig+0x2c0>)
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f003 030c 	and.w	r3, r3, #12
 8000cb0:	2b08      	cmp	r3, #8
 8000cb2:	d043      	beq.n	8000d3c <HAL_RCC_OscConfig+0x130>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000cb4:	6923      	ldr	r3, [r4, #16]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d079      	beq.n	8000dae <HAL_RCC_OscConfig+0x1a2>
        __HAL_RCC_HSI_ENABLE();
 8000cba:	2201      	movs	r2, #1
 8000cbc:	4b84      	ldr	r3, [pc, #528]	; (8000ed0 <HAL_RCC_OscConfig+0x2c4>)
 8000cbe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000cc0:	f7ff fbd2 	bl	8000468 <HAL_GetTick>
 8000cc4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cc6:	4b81      	ldr	r3, [pc, #516]	; (8000ecc <HAL_RCC_OscConfig+0x2c0>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f013 0f02 	tst.w	r3, #2
 8000cce:	d165      	bne.n	8000d9c <HAL_RCC_OscConfig+0x190>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cd0:	f7ff fbca 	bl	8000468 <HAL_GetTick>
 8000cd4:	1b40      	subs	r0, r0, r5
 8000cd6:	2802      	cmp	r0, #2
 8000cd8:	d9f5      	bls.n	8000cc6 <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
 8000cda:	2003      	movs	r0, #3
 8000cdc:	e17d      	b.n	8000fda <HAL_RCC_OscConfig+0x3ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cde:	4a7b      	ldr	r2, [pc, #492]	; (8000ecc <HAL_RCC_OscConfig+0x2c0>)
 8000ce0:	6813      	ldr	r3, [r2, #0]
 8000ce2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ce6:	6013      	str	r3, [r2, #0]
 8000ce8:	e7b5      	b.n	8000c56 <HAL_RCC_OscConfig+0x4a>
 8000cea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cee:	d009      	beq.n	8000d04 <HAL_RCC_OscConfig+0xf8>
 8000cf0:	4b76      	ldr	r3, [pc, #472]	; (8000ecc <HAL_RCC_OscConfig+0x2c0>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	e7a8      	b.n	8000c56 <HAL_RCC_OscConfig+0x4a>
 8000d04:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d08:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	e79b      	b.n	8000c56 <HAL_RCC_OscConfig+0x4a>
        tickstart = HAL_GetTick();
 8000d1e:	f7ff fba3 	bl	8000468 <HAL_GetTick>
 8000d22:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d24:	4b69      	ldr	r3, [pc, #420]	; (8000ecc <HAL_RCC_OscConfig+0x2c0>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000d2c:	d0b3      	beq.n	8000c96 <HAL_RCC_OscConfig+0x8a>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d2e:	f7ff fb9b 	bl	8000468 <HAL_GetTick>
 8000d32:	1b40      	subs	r0, r0, r5
 8000d34:	2864      	cmp	r0, #100	; 0x64
 8000d36:	d9f5      	bls.n	8000d24 <HAL_RCC_OscConfig+0x118>
            return HAL_TIMEOUT;
 8000d38:	2003      	movs	r0, #3
 8000d3a:	e14e      	b.n	8000fda <HAL_RCC_OscConfig+0x3ce>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d3c:	4b63      	ldr	r3, [pc, #396]	; (8000ecc <HAL_RCC_OscConfig+0x2c0>)
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000d44:	d1b6      	bne.n	8000cb4 <HAL_RCC_OscConfig+0xa8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d46:	4b61      	ldr	r3, [pc, #388]	; (8000ecc <HAL_RCC_OscConfig+0x2c0>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f013 0f02 	tst.w	r3, #2
 8000d4e:	d004      	beq.n	8000d5a <HAL_RCC_OscConfig+0x14e>
 8000d50:	6923      	ldr	r3, [r4, #16]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d001      	beq.n	8000d5a <HAL_RCC_OscConfig+0x14e>
        return HAL_ERROR;
 8000d56:	2001      	movs	r0, #1
 8000d58:	e13f      	b.n	8000fda <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d5a:	4a5c      	ldr	r2, [pc, #368]	; (8000ecc <HAL_RCC_OscConfig+0x2c0>)
 8000d5c:	6813      	ldr	r3, [r2, #0]
 8000d5e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000d62:	6961      	ldr	r1, [r4, #20]
 8000d64:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000d68:	6013      	str	r3, [r2, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d6a:	6823      	ldr	r3, [r4, #0]
 8000d6c:	f013 0f08 	tst.w	r3, #8
 8000d70:	d032      	beq.n	8000dd8 <HAL_RCC_OscConfig+0x1cc>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d72:	69a3      	ldr	r3, [r4, #24]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d06e      	beq.n	8000e56 <HAL_RCC_OscConfig+0x24a>
      __HAL_RCC_LSI_ENABLE();
 8000d78:	2201      	movs	r2, #1
 8000d7a:	4b56      	ldr	r3, [pc, #344]	; (8000ed4 <HAL_RCC_OscConfig+0x2c8>)
 8000d7c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000d7e:	f7ff fb73 	bl	8000468 <HAL_GetTick>
 8000d82:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d84:	4b51      	ldr	r3, [pc, #324]	; (8000ecc <HAL_RCC_OscConfig+0x2c0>)
 8000d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d88:	f013 0f02 	tst.w	r3, #2
 8000d8c:	d121      	bne.n	8000dd2 <HAL_RCC_OscConfig+0x1c6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d8e:	f7ff fb6b 	bl	8000468 <HAL_GetTick>
 8000d92:	1b40      	subs	r0, r0, r5
 8000d94:	2802      	cmp	r0, #2
 8000d96:	d9f5      	bls.n	8000d84 <HAL_RCC_OscConfig+0x178>
          return HAL_TIMEOUT;
 8000d98:	2003      	movs	r0, #3
 8000d9a:	e11e      	b.n	8000fda <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d9c:	4a4b      	ldr	r2, [pc, #300]	; (8000ecc <HAL_RCC_OscConfig+0x2c0>)
 8000d9e:	6813      	ldr	r3, [r2, #0]
 8000da0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000da4:	6961      	ldr	r1, [r4, #20]
 8000da6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000daa:	6013      	str	r3, [r2, #0]
 8000dac:	e7dd      	b.n	8000d6a <HAL_RCC_OscConfig+0x15e>
        __HAL_RCC_HSI_DISABLE();
 8000dae:	2200      	movs	r2, #0
 8000db0:	4b47      	ldr	r3, [pc, #284]	; (8000ed0 <HAL_RCC_OscConfig+0x2c4>)
 8000db2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000db4:	f7ff fb58 	bl	8000468 <HAL_GetTick>
 8000db8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dba:	4b44      	ldr	r3, [pc, #272]	; (8000ecc <HAL_RCC_OscConfig+0x2c0>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f013 0f02 	tst.w	r3, #2
 8000dc2:	d0d2      	beq.n	8000d6a <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dc4:	f7ff fb50 	bl	8000468 <HAL_GetTick>
 8000dc8:	1b40      	subs	r0, r0, r5
 8000dca:	2802      	cmp	r0, #2
 8000dcc:	d9f5      	bls.n	8000dba <HAL_RCC_OscConfig+0x1ae>
            return HAL_TIMEOUT;
 8000dce:	2003      	movs	r0, #3
 8000dd0:	e103      	b.n	8000fda <HAL_RCC_OscConfig+0x3ce>
      RCC_Delay(1);
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	f7ff fe8e 	bl	8000af4 <RCC_Delay>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dd8:	6823      	ldr	r3, [r4, #0]
 8000dda:	f013 0f04 	tst.w	r3, #4
 8000dde:	f000 8099 	beq.w	8000f14 <HAL_RCC_OscConfig+0x308>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000de2:	4b3a      	ldr	r3, [pc, #232]	; (8000ecc <HAL_RCC_OscConfig+0x2c0>)
 8000de4:	69db      	ldr	r3, [r3, #28]
 8000de6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000dea:	d146      	bne.n	8000e7a <HAL_RCC_OscConfig+0x26e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dec:	4b37      	ldr	r3, [pc, #220]	; (8000ecc <HAL_RCC_OscConfig+0x2c0>)
 8000dee:	69da      	ldr	r2, [r3, #28]
 8000df0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000df4:	61da      	str	r2, [r3, #28]
 8000df6:	69db      	ldr	r3, [r3, #28]
 8000df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfc:	9301      	str	r3, [sp, #4]
 8000dfe:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000e00:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e02:	4b35      	ldr	r3, [pc, #212]	; (8000ed8 <HAL_RCC_OscConfig+0x2cc>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000e0a:	d038      	beq.n	8000e7e <HAL_RCC_OscConfig+0x272>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e0c:	68e3      	ldr	r3, [r4, #12]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d049      	beq.n	8000ea6 <HAL_RCC_OscConfig+0x29a>
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d14d      	bne.n	8000eb2 <HAL_RCC_OscConfig+0x2a6>
 8000e16:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e1a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000e1e:	6a1a      	ldr	r2, [r3, #32]
 8000e20:	f022 0201 	bic.w	r2, r2, #1
 8000e24:	621a      	str	r2, [r3, #32]
 8000e26:	6a1a      	ldr	r2, [r3, #32]
 8000e28:	f022 0204 	bic.w	r2, r2, #4
 8000e2c:	621a      	str	r2, [r3, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e2e:	68e3      	ldr	r3, [r4, #12]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d05d      	beq.n	8000ef0 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8000e34:	f7ff fb18 	bl	8000468 <HAL_GetTick>
 8000e38:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e3a:	4b24      	ldr	r3, [pc, #144]	; (8000ecc <HAL_RCC_OscConfig+0x2c0>)
 8000e3c:	6a1b      	ldr	r3, [r3, #32]
 8000e3e:	f013 0f02 	tst.w	r3, #2
 8000e42:	d166      	bne.n	8000f12 <HAL_RCC_OscConfig+0x306>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e44:	f7ff fb10 	bl	8000468 <HAL_GetTick>
 8000e48:	1b80      	subs	r0, r0, r6
 8000e4a:	f241 3388 	movw	r3, #5000	; 0x1388
 8000e4e:	4298      	cmp	r0, r3
 8000e50:	d9f3      	bls.n	8000e3a <HAL_RCC_OscConfig+0x22e>
          return HAL_TIMEOUT;
 8000e52:	2003      	movs	r0, #3
 8000e54:	e0c1      	b.n	8000fda <HAL_RCC_OscConfig+0x3ce>
      __HAL_RCC_LSI_DISABLE();
 8000e56:	2200      	movs	r2, #0
 8000e58:	4b1e      	ldr	r3, [pc, #120]	; (8000ed4 <HAL_RCC_OscConfig+0x2c8>)
 8000e5a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000e5c:	f7ff fb04 	bl	8000468 <HAL_GetTick>
 8000e60:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e62:	4b1a      	ldr	r3, [pc, #104]	; (8000ecc <HAL_RCC_OscConfig+0x2c0>)
 8000e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e66:	f013 0f02 	tst.w	r3, #2
 8000e6a:	d0b5      	beq.n	8000dd8 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e6c:	f7ff fafc 	bl	8000468 <HAL_GetTick>
 8000e70:	1b40      	subs	r0, r0, r5
 8000e72:	2802      	cmp	r0, #2
 8000e74:	d9f5      	bls.n	8000e62 <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 8000e76:	2003      	movs	r0, #3
 8000e78:	e0af      	b.n	8000fda <HAL_RCC_OscConfig+0x3ce>
    FlagStatus       pwrclkchanged = RESET;
 8000e7a:	2500      	movs	r5, #0
 8000e7c:	e7c1      	b.n	8000e02 <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e7e:	4a16      	ldr	r2, [pc, #88]	; (8000ed8 <HAL_RCC_OscConfig+0x2cc>)
 8000e80:	6813      	ldr	r3, [r2, #0]
 8000e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e86:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000e88:	f7ff faee 	bl	8000468 <HAL_GetTick>
 8000e8c:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e8e:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <HAL_RCC_OscConfig+0x2cc>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000e96:	d1b9      	bne.n	8000e0c <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e98:	f7ff fae6 	bl	8000468 <HAL_GetTick>
 8000e9c:	1b80      	subs	r0, r0, r6
 8000e9e:	2864      	cmp	r0, #100	; 0x64
 8000ea0:	d9f5      	bls.n	8000e8e <HAL_RCC_OscConfig+0x282>
          return HAL_TIMEOUT;
 8000ea2:	2003      	movs	r0, #3
 8000ea4:	e099      	b.n	8000fda <HAL_RCC_OscConfig+0x3ce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ea6:	4a09      	ldr	r2, [pc, #36]	; (8000ecc <HAL_RCC_OscConfig+0x2c0>)
 8000ea8:	6a13      	ldr	r3, [r2, #32]
 8000eaa:	f043 0301 	orr.w	r3, r3, #1
 8000eae:	6213      	str	r3, [r2, #32]
 8000eb0:	e7bd      	b.n	8000e2e <HAL_RCC_OscConfig+0x222>
 8000eb2:	2b05      	cmp	r3, #5
 8000eb4:	d012      	beq.n	8000edc <HAL_RCC_OscConfig+0x2d0>
 8000eb6:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <HAL_RCC_OscConfig+0x2c0>)
 8000eb8:	6a1a      	ldr	r2, [r3, #32]
 8000eba:	f022 0201 	bic.w	r2, r2, #1
 8000ebe:	621a      	str	r2, [r3, #32]
 8000ec0:	6a1a      	ldr	r2, [r3, #32]
 8000ec2:	f022 0204 	bic.w	r2, r2, #4
 8000ec6:	621a      	str	r2, [r3, #32]
 8000ec8:	e7b1      	b.n	8000e2e <HAL_RCC_OscConfig+0x222>
 8000eca:	bf00      	nop
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	42420000 	.word	0x42420000
 8000ed4:	42420480 	.word	0x42420480
 8000ed8:	40007000 	.word	0x40007000
 8000edc:	4b41      	ldr	r3, [pc, #260]	; (8000fe4 <HAL_RCC_OscConfig+0x3d8>)
 8000ede:	6a1a      	ldr	r2, [r3, #32]
 8000ee0:	f042 0204 	orr.w	r2, r2, #4
 8000ee4:	621a      	str	r2, [r3, #32]
 8000ee6:	6a1a      	ldr	r2, [r3, #32]
 8000ee8:	f042 0201 	orr.w	r2, r2, #1
 8000eec:	621a      	str	r2, [r3, #32]
 8000eee:	e79e      	b.n	8000e2e <HAL_RCC_OscConfig+0x222>
      tickstart = HAL_GetTick();
 8000ef0:	f7ff faba 	bl	8000468 <HAL_GetTick>
 8000ef4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ef6:	4b3b      	ldr	r3, [pc, #236]	; (8000fe4 <HAL_RCC_OscConfig+0x3d8>)
 8000ef8:	6a1b      	ldr	r3, [r3, #32]
 8000efa:	f013 0f02 	tst.w	r3, #2
 8000efe:	d008      	beq.n	8000f12 <HAL_RCC_OscConfig+0x306>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f00:	f7ff fab2 	bl	8000468 <HAL_GetTick>
 8000f04:	1b80      	subs	r0, r0, r6
 8000f06:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f0a:	4298      	cmp	r0, r3
 8000f0c:	d9f3      	bls.n	8000ef6 <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 8000f0e:	2003      	movs	r0, #3
 8000f10:	e063      	b.n	8000fda <HAL_RCC_OscConfig+0x3ce>
    if(pwrclkchanged == SET)
 8000f12:	b9e5      	cbnz	r5, 8000f4e <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f14:	69e3      	ldr	r3, [r4, #28]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d05e      	beq.n	8000fd8 <HAL_RCC_OscConfig+0x3cc>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f1a:	4a32      	ldr	r2, [pc, #200]	; (8000fe4 <HAL_RCC_OscConfig+0x3d8>)
 8000f1c:	6852      	ldr	r2, [r2, #4]
 8000f1e:	f002 020c 	and.w	r2, r2, #12
 8000f22:	2a08      	cmp	r2, #8
 8000f24:	d05b      	beq.n	8000fde <HAL_RCC_OscConfig+0x3d2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d017      	beq.n	8000f5a <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	4b2e      	ldr	r3, [pc, #184]	; (8000fe8 <HAL_RCC_OscConfig+0x3dc>)
 8000f2e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f30:	f7ff fa9a 	bl	8000468 <HAL_GetTick>
 8000f34:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f36:	4b2b      	ldr	r3, [pc, #172]	; (8000fe4 <HAL_RCC_OscConfig+0x3d8>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000f3e:	d047      	beq.n	8000fd0 <HAL_RCC_OscConfig+0x3c4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f40:	f7ff fa92 	bl	8000468 <HAL_GetTick>
 8000f44:	1b00      	subs	r0, r0, r4
 8000f46:	2802      	cmp	r0, #2
 8000f48:	d9f5      	bls.n	8000f36 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8000f4a:	2003      	movs	r0, #3
 8000f4c:	e045      	b.n	8000fda <HAL_RCC_OscConfig+0x3ce>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f4e:	4a25      	ldr	r2, [pc, #148]	; (8000fe4 <HAL_RCC_OscConfig+0x3d8>)
 8000f50:	69d3      	ldr	r3, [r2, #28]
 8000f52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f56:	61d3      	str	r3, [r2, #28]
 8000f58:	e7dc      	b.n	8000f14 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	4b22      	ldr	r3, [pc, #136]	; (8000fe8 <HAL_RCC_OscConfig+0x3dc>)
 8000f5e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f60:	f7ff fa82 	bl	8000468 <HAL_GetTick>
 8000f64:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f66:	4b1f      	ldr	r3, [pc, #124]	; (8000fe4 <HAL_RCC_OscConfig+0x3d8>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000f6e:	d006      	beq.n	8000f7e <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f70:	f7ff fa7a 	bl	8000468 <HAL_GetTick>
 8000f74:	1b40      	subs	r0, r0, r5
 8000f76:	2802      	cmp	r0, #2
 8000f78:	d9f5      	bls.n	8000f66 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8000f7a:	2003      	movs	r0, #3
 8000f7c:	e02d      	b.n	8000fda <HAL_RCC_OscConfig+0x3ce>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f7e:	6a23      	ldr	r3, [r4, #32]
 8000f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f84:	d01a      	beq.n	8000fbc <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f86:	4917      	ldr	r1, [pc, #92]	; (8000fe4 <HAL_RCC_OscConfig+0x3d8>)
 8000f88:	684b      	ldr	r3, [r1, #4]
 8000f8a:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8000f8e:	6a22      	ldr	r2, [r4, #32]
 8000f90:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000f92:	4302      	orrs	r2, r0
 8000f94:	4313      	orrs	r3, r2
 8000f96:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8000f98:	2201      	movs	r2, #1
 8000f9a:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <HAL_RCC_OscConfig+0x3dc>)
 8000f9c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f9e:	f7ff fa63 	bl	8000468 <HAL_GetTick>
 8000fa2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fa4:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <HAL_RCC_OscConfig+0x3d8>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000fac:	d10e      	bne.n	8000fcc <HAL_RCC_OscConfig+0x3c0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fae:	f7ff fa5b 	bl	8000468 <HAL_GetTick>
 8000fb2:	1b00      	subs	r0, r0, r4
 8000fb4:	2802      	cmp	r0, #2
 8000fb6:	d9f5      	bls.n	8000fa4 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8000fb8:	2003      	movs	r0, #3
 8000fba:	e00e      	b.n	8000fda <HAL_RCC_OscConfig+0x3ce>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fbc:	4a09      	ldr	r2, [pc, #36]	; (8000fe4 <HAL_RCC_OscConfig+0x3d8>)
 8000fbe:	6853      	ldr	r3, [r2, #4]
 8000fc0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000fc4:	68a1      	ldr	r1, [r4, #8]
 8000fc6:	430b      	orrs	r3, r1
 8000fc8:	6053      	str	r3, [r2, #4]
 8000fca:	e7dc      	b.n	8000f86 <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8000fcc:	2000      	movs	r0, #0
 8000fce:	e004      	b.n	8000fda <HAL_RCC_OscConfig+0x3ce>
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	e002      	b.n	8000fda <HAL_RCC_OscConfig+0x3ce>
        return HAL_ERROR;
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	e000      	b.n	8000fda <HAL_RCC_OscConfig+0x3ce>
  return HAL_OK;
 8000fd8:	2000      	movs	r0, #0
}
 8000fda:	b002      	add	sp, #8
 8000fdc:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8000fde:	2001      	movs	r0, #1
 8000fe0:	e7fb      	b.n	8000fda <HAL_RCC_OscConfig+0x3ce>
 8000fe2:	bf00      	nop
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	42420060 	.word	0x42420060

08000fec <HAL_RCC_MCOConfig>:
{
 8000fec:	b530      	push	{r4, r5, lr}
 8000fee:	b087      	sub	sp, #28
 8000ff0:	460d      	mov	r5, r1
  GPIO_InitTypeDef gpio = {0U};
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	9304      	str	r3, [sp, #16]
  gpio.Mode      = GPIO_MODE_AF_PP;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	9303      	str	r3, [sp, #12]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	9305      	str	r3, [sp, #20]
  gpio.Pin       = MCO1_PIN;
 8000ffe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001002:	9302      	str	r3, [sp, #8]
  MCO1_CLK_ENABLE();
 8001004:	4c0a      	ldr	r4, [pc, #40]	; (8001030 <HAL_RCC_MCOConfig+0x44>)
 8001006:	69a3      	ldr	r3, [r4, #24]
 8001008:	f043 0304 	orr.w	r3, r3, #4
 800100c:	61a3      	str	r3, [r4, #24]
 800100e:	69a3      	ldr	r3, [r4, #24]
 8001010:	f003 0304 	and.w	r3, r3, #4
 8001014:	9301      	str	r3, [sp, #4]
 8001016:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8001018:	a902      	add	r1, sp, #8
 800101a:	4806      	ldr	r0, [pc, #24]	; (8001034 <HAL_RCC_MCOConfig+0x48>)
 800101c:	f7ff fbc6 	bl	80007ac <HAL_GPIO_Init>
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8001020:	6861      	ldr	r1, [r4, #4]
 8001022:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 8001026:	4329      	orrs	r1, r5
 8001028:	6061      	str	r1, [r4, #4]
}
 800102a:	b007      	add	sp, #28
 800102c:	bd30      	pop	{r4, r5, pc}
 800102e:	bf00      	nop
 8001030:	40021000 	.word	0x40021000
 8001034:	40010800 	.word	0x40010800

08001038 <HAL_RCC_EnableCSS>:
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8001038:	2201      	movs	r2, #1
 800103a:	4b01      	ldr	r3, [pc, #4]	; (8001040 <HAL_RCC_EnableCSS+0x8>)
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	4770      	bx	lr
 8001040:	4242004c 	.word	0x4242004c

08001044 <HAL_RCC_DisableCSS>:
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
 8001044:	2200      	movs	r2, #0
 8001046:	4b01      	ldr	r3, [pc, #4]	; (800104c <HAL_RCC_DisableCSS+0x8>)
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	4770      	bx	lr
 800104c:	4242004c 	.word	0x4242004c

08001050 <HAL_RCC_GetSysClockFreq>:
{
 8001050:	b510      	push	{r4, lr}
 8001052:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001054:	4c15      	ldr	r4, [pc, #84]	; (80010ac <HAL_RCC_GetSysClockFreq+0x5c>)
 8001056:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800105a:	f10d 0e18 	add.w	lr, sp, #24
 800105e:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001062:	8a23      	ldrh	r3, [r4, #16]
 8001064:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8001068:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <HAL_RCC_GetSysClockFreq+0x60>)
 800106a:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800106c:	f003 020c 	and.w	r2, r3, #12
 8001070:	2a08      	cmp	r2, #8
 8001072:	d118      	bne.n	80010a6 <HAL_RCC_GetSysClockFreq+0x56>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001074:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001078:	4472      	add	r2, lr
 800107a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800107e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001082:	d103      	bne.n	800108c <HAL_RCC_GetSysClockFreq+0x3c>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001084:	480b      	ldr	r0, [pc, #44]	; (80010b4 <HAL_RCC_GetSysClockFreq+0x64>)
 8001086:	fb00 f002 	mul.w	r0, r0, r2
 800108a:	e00d      	b.n	80010a8 <HAL_RCC_GetSysClockFreq+0x58>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <HAL_RCC_GetSysClockFreq+0x60>)
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8001094:	4473      	add	r3, lr
 8001096:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800109a:	4807      	ldr	r0, [pc, #28]	; (80010b8 <HAL_RCC_GetSysClockFreq+0x68>)
 800109c:	fb00 f002 	mul.w	r0, r0, r2
 80010a0:	fbb0 f0f3 	udiv	r0, r0, r3
 80010a4:	e000      	b.n	80010a8 <HAL_RCC_GetSysClockFreq+0x58>
      sysclockfreq = HSE_VALUE;
 80010a6:	4804      	ldr	r0, [pc, #16]	; (80010b8 <HAL_RCC_GetSysClockFreq+0x68>)
}
 80010a8:	b006      	add	sp, #24
 80010aa:	bd10      	pop	{r4, pc}
 80010ac:	080014a0 	.word	0x080014a0
 80010b0:	40021000 	.word	0x40021000
 80010b4:	003d0900 	.word	0x003d0900
 80010b8:	007a1200 	.word	0x007a1200

080010bc <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80010bc:	4b62      	ldr	r3, [pc, #392]	; (8001248 <HAL_RCC_ClockConfig+0x18c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f003 0307 	and.w	r3, r3, #7
 80010c4:	428b      	cmp	r3, r1
 80010c6:	d20c      	bcs.n	80010e2 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010c8:	4a5f      	ldr	r2, [pc, #380]	; (8001248 <HAL_RCC_ClockConfig+0x18c>)
 80010ca:	6813      	ldr	r3, [r2, #0]
 80010cc:	f023 0307 	bic.w	r3, r3, #7
 80010d0:	430b      	orrs	r3, r1
 80010d2:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80010d4:	6813      	ldr	r3, [r2, #0]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	4299      	cmp	r1, r3
 80010dc:	d001      	beq.n	80010e2 <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
 80010de:	2001      	movs	r0, #1
 80010e0:	4770      	bx	lr
{
 80010e2:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010e4:	6803      	ldr	r3, [r0, #0]
 80010e6:	f013 0f02 	tst.w	r3, #2
 80010ea:	d017      	beq.n	800111c <HAL_RCC_ClockConfig+0x60>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010ec:	f013 0f04 	tst.w	r3, #4
 80010f0:	d004      	beq.n	80010fc <HAL_RCC_ClockConfig+0x40>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010f2:	4a56      	ldr	r2, [pc, #344]	; (800124c <HAL_RCC_ClockConfig+0x190>)
 80010f4:	6853      	ldr	r3, [r2, #4]
 80010f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80010fa:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010fc:	6803      	ldr	r3, [r0, #0]
 80010fe:	f013 0f08 	tst.w	r3, #8
 8001102:	d004      	beq.n	800110e <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001104:	4a51      	ldr	r2, [pc, #324]	; (800124c <HAL_RCC_ClockConfig+0x190>)
 8001106:	6853      	ldr	r3, [r2, #4]
 8001108:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800110c:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800110e:	4a4f      	ldr	r2, [pc, #316]	; (800124c <HAL_RCC_ClockConfig+0x190>)
 8001110:	6853      	ldr	r3, [r2, #4]
 8001112:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001116:	6884      	ldr	r4, [r0, #8]
 8001118:	4323      	orrs	r3, r4
 800111a:	6053      	str	r3, [r2, #4]
 800111c:	460d      	mov	r5, r1
 800111e:	4604      	mov	r4, r0
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001120:	6803      	ldr	r3, [r0, #0]
 8001122:	f013 0f01 	tst.w	r3, #1
 8001126:	d052      	beq.n	80011ce <HAL_RCC_ClockConfig+0x112>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001128:	6843      	ldr	r3, [r0, #4]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d023      	beq.n	8001176 <HAL_RCC_ClockConfig+0xba>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800112e:	2b02      	cmp	r3, #2
 8001130:	d028      	beq.n	8001184 <HAL_RCC_ClockConfig+0xc8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001132:	4a46      	ldr	r2, [pc, #280]	; (800124c <HAL_RCC_ClockConfig+0x190>)
 8001134:	6812      	ldr	r2, [r2, #0]
 8001136:	f012 0f02 	tst.w	r2, #2
 800113a:	f000 8082 	beq.w	8001242 <HAL_RCC_ClockConfig+0x186>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800113e:	4943      	ldr	r1, [pc, #268]	; (800124c <HAL_RCC_ClockConfig+0x190>)
 8001140:	684a      	ldr	r2, [r1, #4]
 8001142:	f022 0203 	bic.w	r2, r2, #3
 8001146:	4313      	orrs	r3, r2
 8001148:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 800114a:	f7ff f98d 	bl	8000468 <HAL_GetTick>
 800114e:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001150:	6863      	ldr	r3, [r4, #4]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d01d      	beq.n	8001192 <HAL_RCC_ClockConfig+0xd6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001156:	2b02      	cmp	r3, #2
 8001158:	d02a      	beq.n	80011b0 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800115a:	4b3c      	ldr	r3, [pc, #240]	; (800124c <HAL_RCC_ClockConfig+0x190>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f013 0f0c 	tst.w	r3, #12
 8001162:	d034      	beq.n	80011ce <HAL_RCC_ClockConfig+0x112>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001164:	f7ff f980 	bl	8000468 <HAL_GetTick>
 8001168:	1b80      	subs	r0, r0, r6
 800116a:	f241 3388 	movw	r3, #5000	; 0x1388
 800116e:	4298      	cmp	r0, r3
 8001170:	d9f3      	bls.n	800115a <HAL_RCC_ClockConfig+0x9e>
          return HAL_TIMEOUT;
 8001172:	2003      	movs	r0, #3
 8001174:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001176:	4a35      	ldr	r2, [pc, #212]	; (800124c <HAL_RCC_ClockConfig+0x190>)
 8001178:	6812      	ldr	r2, [r2, #0]
 800117a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800117e:	d1de      	bne.n	800113e <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8001180:	2001      	movs	r0, #1
 8001182:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001184:	4a31      	ldr	r2, [pc, #196]	; (800124c <HAL_RCC_ClockConfig+0x190>)
 8001186:	6812      	ldr	r2, [r2, #0]
 8001188:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800118c:	d1d7      	bne.n	800113e <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 800118e:	2001      	movs	r0, #1
 8001190:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001192:	4b2e      	ldr	r3, [pc, #184]	; (800124c <HAL_RCC_ClockConfig+0x190>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f003 030c 	and.w	r3, r3, #12
 800119a:	2b04      	cmp	r3, #4
 800119c:	d017      	beq.n	80011ce <HAL_RCC_ClockConfig+0x112>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800119e:	f7ff f963 	bl	8000468 <HAL_GetTick>
 80011a2:	1b80      	subs	r0, r0, r6
 80011a4:	f241 3388 	movw	r3, #5000	; 0x1388
 80011a8:	4298      	cmp	r0, r3
 80011aa:	d9f2      	bls.n	8001192 <HAL_RCC_ClockConfig+0xd6>
          return HAL_TIMEOUT;
 80011ac:	2003      	movs	r0, #3
 80011ae:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011b0:	4b26      	ldr	r3, [pc, #152]	; (800124c <HAL_RCC_ClockConfig+0x190>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 030c 	and.w	r3, r3, #12
 80011b8:	2b08      	cmp	r3, #8
 80011ba:	d008      	beq.n	80011ce <HAL_RCC_ClockConfig+0x112>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011bc:	f7ff f954 	bl	8000468 <HAL_GetTick>
 80011c0:	1b80      	subs	r0, r0, r6
 80011c2:	f241 3388 	movw	r3, #5000	; 0x1388
 80011c6:	4298      	cmp	r0, r3
 80011c8:	d9f2      	bls.n	80011b0 <HAL_RCC_ClockConfig+0xf4>
          return HAL_TIMEOUT;
 80011ca:	2003      	movs	r0, #3
 80011cc:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80011ce:	4b1e      	ldr	r3, [pc, #120]	; (8001248 <HAL_RCC_ClockConfig+0x18c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	429d      	cmp	r5, r3
 80011d8:	d20c      	bcs.n	80011f4 <HAL_RCC_ClockConfig+0x138>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011da:	4a1b      	ldr	r2, [pc, #108]	; (8001248 <HAL_RCC_ClockConfig+0x18c>)
 80011dc:	6813      	ldr	r3, [r2, #0]
 80011de:	f023 0307 	bic.w	r3, r3, #7
 80011e2:	432b      	orrs	r3, r5
 80011e4:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80011e6:	6813      	ldr	r3, [r2, #0]
 80011e8:	f003 0307 	and.w	r3, r3, #7
 80011ec:	429d      	cmp	r5, r3
 80011ee:	d001      	beq.n	80011f4 <HAL_RCC_ClockConfig+0x138>
      return HAL_ERROR;
 80011f0:	2001      	movs	r0, #1
}
 80011f2:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011f4:	6823      	ldr	r3, [r4, #0]
 80011f6:	f013 0f04 	tst.w	r3, #4
 80011fa:	d006      	beq.n	800120a <HAL_RCC_ClockConfig+0x14e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011fc:	4a13      	ldr	r2, [pc, #76]	; (800124c <HAL_RCC_ClockConfig+0x190>)
 80011fe:	6853      	ldr	r3, [r2, #4]
 8001200:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001204:	68e1      	ldr	r1, [r4, #12]
 8001206:	430b      	orrs	r3, r1
 8001208:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800120a:	6823      	ldr	r3, [r4, #0]
 800120c:	f013 0f08 	tst.w	r3, #8
 8001210:	d007      	beq.n	8001222 <HAL_RCC_ClockConfig+0x166>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001212:	4a0e      	ldr	r2, [pc, #56]	; (800124c <HAL_RCC_ClockConfig+0x190>)
 8001214:	6853      	ldr	r3, [r2, #4]
 8001216:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800121a:	6921      	ldr	r1, [r4, #16]
 800121c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001220:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001222:	f7ff ff15 	bl	8001050 <HAL_RCC_GetSysClockFreq>
 8001226:	4b09      	ldr	r3, [pc, #36]	; (800124c <HAL_RCC_ClockConfig+0x190>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800122e:	4a08      	ldr	r2, [pc, #32]	; (8001250 <HAL_RCC_ClockConfig+0x194>)
 8001230:	5cd3      	ldrb	r3, [r2, r3]
 8001232:	40d8      	lsrs	r0, r3
 8001234:	4b07      	ldr	r3, [pc, #28]	; (8001254 <HAL_RCC_ClockConfig+0x198>)
 8001236:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001238:	200f      	movs	r0, #15
 800123a:	f7ff f8d3 	bl	80003e4 <HAL_InitTick>
  return HAL_OK;
 800123e:	2000      	movs	r0, #0
 8001240:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001242:	2001      	movs	r0, #1
 8001244:	bd70      	pop	{r4, r5, r6, pc}
 8001246:	bf00      	nop
 8001248:	40022000 	.word	0x40022000
 800124c:	40021000 	.word	0x40021000
 8001250:	08001488 	.word	0x08001488
 8001254:	20000000 	.word	0x20000000

08001258 <HAL_RCC_GetHCLKFreq>:
}
 8001258:	4b01      	ldr	r3, [pc, #4]	; (8001260 <HAL_RCC_GetHCLKFreq+0x8>)
 800125a:	6818      	ldr	r0, [r3, #0]
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	20000000 	.word	0x20000000

08001264 <HAL_RCC_GetPCLK1Freq>:
{
 8001264:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001266:	f7ff fff7 	bl	8001258 <HAL_RCC_GetHCLKFreq>
 800126a:	4b04      	ldr	r3, [pc, #16]	; (800127c <HAL_RCC_GetPCLK1Freq+0x18>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001272:	4a03      	ldr	r2, [pc, #12]	; (8001280 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001274:	5cd3      	ldrb	r3, [r2, r3]
}    
 8001276:	40d8      	lsrs	r0, r3
 8001278:	bd08      	pop	{r3, pc}
 800127a:	bf00      	nop
 800127c:	40021000 	.word	0x40021000
 8001280:	08001498 	.word	0x08001498

08001284 <HAL_RCC_GetPCLK2Freq>:
{
 8001284:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001286:	f7ff ffe7 	bl	8001258 <HAL_RCC_GetHCLKFreq>
 800128a:	4b04      	ldr	r3, [pc, #16]	; (800129c <HAL_RCC_GetPCLK2Freq+0x18>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001292:	4a03      	ldr	r2, [pc, #12]	; (80012a0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001294:	5cd3      	ldrb	r3, [r2, r3]
} 
 8001296:	40d8      	lsrs	r0, r3
 8001298:	bd08      	pop	{r3, pc}
 800129a:	bf00      	nop
 800129c:	40021000 	.word	0x40021000
 80012a0:	08001498 	.word	0x08001498

080012a4 <HAL_RCC_GetOscConfig>:
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI  \
 80012a4:	230f      	movs	r3, #15
 80012a6:	6003      	str	r3, [r0, #0]
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 80012a8:	4b2a      	ldr	r3, [pc, #168]	; (8001354 <HAL_RCC_GetOscConfig+0xb0>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80012b0:	d030      	beq.n	8001314 <HAL_RCC_GetOscConfig+0x70>
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 80012b2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80012b6:	6043      	str	r3, [r0, #4]
  RCC_OscInitStruct->HSEPredivValue = __HAL_RCC_HSE_GET_PREDIV();
 80012b8:	4a26      	ldr	r2, [pc, #152]	; (8001354 <HAL_RCC_GetOscConfig+0xb0>)
 80012ba:	6853      	ldr	r3, [r2, #4]
 80012bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c0:	6083      	str	r3, [r0, #8]
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 80012c2:	6813      	ldr	r3, [r2, #0]
 80012c4:	f013 0f01 	tst.w	r3, #1
 80012c8:	d030      	beq.n	800132c <HAL_RCC_GetOscConfig+0x88>
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 80012ca:	2301      	movs	r3, #1
 80012cc:	6103      	str	r3, [r0, #16]
  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR & RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_Pos);
 80012ce:	4a21      	ldr	r2, [pc, #132]	; (8001354 <HAL_RCC_GetOscConfig+0xb0>)
 80012d0:	6813      	ldr	r3, [r2, #0]
 80012d2:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 80012d6:	6143      	str	r3, [r0, #20]
  if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 80012d8:	6a13      	ldr	r3, [r2, #32]
 80012da:	f013 0f04 	tst.w	r3, #4
 80012de:	d028      	beq.n	8001332 <HAL_RCC_GetOscConfig+0x8e>
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 80012e0:	2305      	movs	r3, #5
 80012e2:	60c3      	str	r3, [r0, #12]
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 80012e4:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <HAL_RCC_GetOscConfig+0xb0>)
 80012e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e8:	f013 0f01 	tst.w	r3, #1
 80012ec:	d02c      	beq.n	8001348 <HAL_RCC_GetOscConfig+0xa4>
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 80012ee:	2301      	movs	r3, #1
 80012f0:	6183      	str	r3, [r0, #24]
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 80012f2:	4b18      	ldr	r3, [pc, #96]	; (8001354 <HAL_RCC_GetOscConfig+0xb0>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80012fa:	d128      	bne.n	800134e <HAL_RCC_GetOscConfig+0xaa>
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 80012fc:	2301      	movs	r3, #1
 80012fe:	61c3      	str	r3, [r0, #28]
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLSRC);
 8001300:	4a14      	ldr	r2, [pc, #80]	; (8001354 <HAL_RCC_GetOscConfig+0xb0>)
 8001302:	6853      	ldr	r3, [r2, #4]
 8001304:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001308:	6203      	str	r3, [r0, #32]
  RCC_OscInitStruct->PLL.PLLMUL = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLMULL);
 800130a:	6853      	ldr	r3, [r2, #4]
 800130c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001310:	6243      	str	r3, [r0, #36]	; 0x24
 8001312:	4770      	bx	lr
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 8001314:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <HAL_RCC_GetOscConfig+0xb0>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800131c:	d003      	beq.n	8001326 <HAL_RCC_GetOscConfig+0x82>
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 800131e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001322:	6043      	str	r3, [r0, #4]
 8001324:	e7c8      	b.n	80012b8 <HAL_RCC_GetOscConfig+0x14>
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 8001326:	2300      	movs	r3, #0
 8001328:	6043      	str	r3, [r0, #4]
 800132a:	e7c5      	b.n	80012b8 <HAL_RCC_GetOscConfig+0x14>
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 800132c:	2300      	movs	r3, #0
 800132e:	6103      	str	r3, [r0, #16]
 8001330:	e7cd      	b.n	80012ce <HAL_RCC_GetOscConfig+0x2a>
  else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 8001332:	4b08      	ldr	r3, [pc, #32]	; (8001354 <HAL_RCC_GetOscConfig+0xb0>)
 8001334:	6a1b      	ldr	r3, [r3, #32]
 8001336:	f013 0f01 	tst.w	r3, #1
 800133a:	d002      	beq.n	8001342 <HAL_RCC_GetOscConfig+0x9e>
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 800133c:	2301      	movs	r3, #1
 800133e:	60c3      	str	r3, [r0, #12]
 8001340:	e7d0      	b.n	80012e4 <HAL_RCC_GetOscConfig+0x40>
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 8001342:	2300      	movs	r3, #0
 8001344:	60c3      	str	r3, [r0, #12]
 8001346:	e7cd      	b.n	80012e4 <HAL_RCC_GetOscConfig+0x40>
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 8001348:	2300      	movs	r3, #0
 800134a:	6183      	str	r3, [r0, #24]
 800134c:	e7d1      	b.n	80012f2 <HAL_RCC_GetOscConfig+0x4e>
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 800134e:	2302      	movs	r3, #2
 8001350:	61c3      	str	r3, [r0, #28]
 8001352:	e7d5      	b.n	8001300 <HAL_RCC_GetOscConfig+0x5c>
 8001354:	40021000 	.word	0x40021000

08001358 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001358:	230f      	movs	r3, #15
 800135a:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800135c:	4b0b      	ldr	r3, [pc, #44]	; (800138c <HAL_RCC_GetClockConfig+0x34>)
 800135e:	685a      	ldr	r2, [r3, #4]
 8001360:	f002 0203 	and.w	r2, r2, #3
 8001364:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001366:	685a      	ldr	r2, [r3, #4]
 8001368:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800136c:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800136e:	685a      	ldr	r2, [r3, #4]
 8001370:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001374:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	08db      	lsrs	r3, r3, #3
 800137a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800137e:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8001380:	4b03      	ldr	r3, [pc, #12]	; (8001390 <HAL_RCC_GetClockConfig+0x38>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0307 	and.w	r3, r3, #7
 8001388:	600b      	str	r3, [r1, #0]
 800138a:	4770      	bx	lr
 800138c:	40021000 	.word	0x40021000
 8001390:	40022000 	.word	0x40022000

08001394 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8001394:	4770      	bx	lr

08001396 <HAL_RCC_NMI_IRQHandler>:
{
 8001396:	b508      	push	{r3, lr}
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <HAL_RCC_NMI_IRQHandler+0x1a>)
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f013 0f80 	tst.w	r3, #128	; 0x80
 80013a0:	d100      	bne.n	80013a4 <HAL_RCC_NMI_IRQHandler+0xe>
 80013a2:	bd08      	pop	{r3, pc}
    HAL_RCC_CSSCallback();
 80013a4:	f7ff fff6 	bl	8001394 <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80013a8:	2280      	movs	r2, #128	; 0x80
 80013aa:	4b02      	ldr	r3, [pc, #8]	; (80013b4 <HAL_RCC_NMI_IRQHandler+0x1e>)
 80013ac:	701a      	strb	r2, [r3, #0]
}
 80013ae:	e7f8      	b.n	80013a2 <HAL_RCC_NMI_IRQHandler+0xc>
 80013b0:	40021000 	.word	0x40021000
 80013b4:	4002100a 	.word	0x4002100a

080013b8 <main>:

//#include "main.h"
#include "ap.h"

int main(void)
{
 80013b8:	b508      	push	{r3, lr}

  hwInit();
 80013ba:	f7fe fff1 	bl	80003a0 <hwInit>
  apInit();
 80013be:	f7fe fec5 	bl	800014c <apInit>

  apMain();
 80013c2:	f7fe fec4 	bl	800014e <apMain>

}
 80013c6:	2000      	movs	r0, #0
 80013c8:	bd08      	pop	{r3, pc}
	...

080013cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80013cc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80013ce:	e003      	b.n	80013d8 <LoopCopyDataInit>

080013d0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80013d0:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80013d2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80013d4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80013d6:	3104      	adds	r1, #4

080013d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80013d8:	480a      	ldr	r0, [pc, #40]	; (8001404 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80013da:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80013dc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80013de:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80013e0:	d3f6      	bcc.n	80013d0 <CopyDataInit>
  ldr r2, =_sbss
 80013e2:	4a0a      	ldr	r2, [pc, #40]	; (800140c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80013e4:	e002      	b.n	80013ec <LoopFillZerobss>

080013e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80013e6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80013e8:	f842 3b04 	str.w	r3, [r2], #4

080013ec <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80013ec:	4b08      	ldr	r3, [pc, #32]	; (8001410 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80013ee:	429a      	cmp	r2, r3
  bcc FillZerobss
 80013f0:	d3f9      	bcc.n	80013e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013f2:	f7fe ff07 	bl	8000204 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013f6:	f000 f80f 	bl	8001418 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013fa:	f7ff ffdd 	bl	80013b8 <main>
  bx lr
 80013fe:	4770      	bx	lr
  ldr r3, =_sidata
 8001400:	080014bc 	.word	0x080014bc
  ldr r0, =_sdata
 8001404:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001408:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 800140c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8001410:	2000002c 	.word	0x2000002c

08001414 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001414:	e7fe      	b.n	8001414 <ADC1_2_IRQHandler>
	...

08001418 <__libc_init_array>:
 8001418:	b570      	push	{r4, r5, r6, lr}
 800141a:	2500      	movs	r5, #0
 800141c:	4e0c      	ldr	r6, [pc, #48]	; (8001450 <__libc_init_array+0x38>)
 800141e:	4c0d      	ldr	r4, [pc, #52]	; (8001454 <__libc_init_array+0x3c>)
 8001420:	1ba4      	subs	r4, r4, r6
 8001422:	10a4      	asrs	r4, r4, #2
 8001424:	42a5      	cmp	r5, r4
 8001426:	d109      	bne.n	800143c <__libc_init_array+0x24>
 8001428:	f000 f822 	bl	8001470 <_init>
 800142c:	2500      	movs	r5, #0
 800142e:	4e0a      	ldr	r6, [pc, #40]	; (8001458 <__libc_init_array+0x40>)
 8001430:	4c0a      	ldr	r4, [pc, #40]	; (800145c <__libc_init_array+0x44>)
 8001432:	1ba4      	subs	r4, r4, r6
 8001434:	10a4      	asrs	r4, r4, #2
 8001436:	42a5      	cmp	r5, r4
 8001438:	d105      	bne.n	8001446 <__libc_init_array+0x2e>
 800143a:	bd70      	pop	{r4, r5, r6, pc}
 800143c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001440:	4798      	blx	r3
 8001442:	3501      	adds	r5, #1
 8001444:	e7ee      	b.n	8001424 <__libc_init_array+0xc>
 8001446:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800144a:	4798      	blx	r3
 800144c:	3501      	adds	r5, #1
 800144e:	e7f2      	b.n	8001436 <__libc_init_array+0x1e>
 8001450:	080014b4 	.word	0x080014b4
 8001454:	080014b4 	.word	0x080014b4
 8001458:	080014b4 	.word	0x080014b4
 800145c:	080014b8 	.word	0x080014b8

08001460 <memset>:
 8001460:	4603      	mov	r3, r0
 8001462:	4402      	add	r2, r0
 8001464:	4293      	cmp	r3, r2
 8001466:	d100      	bne.n	800146a <memset+0xa>
 8001468:	4770      	bx	lr
 800146a:	f803 1b01 	strb.w	r1, [r3], #1
 800146e:	e7f9      	b.n	8001464 <memset+0x4>

08001470 <_init>:
 8001470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001472:	bf00      	nop
 8001474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001476:	bc08      	pop	{r3}
 8001478:	469e      	mov	lr, r3
 800147a:	4770      	bx	lr

0800147c <_fini>:
 800147c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800147e:	bf00      	nop
 8001480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001482:	bc08      	pop	{r3}
 8001484:	469e      	mov	lr, r3
 8001486:	4770      	bx	lr
