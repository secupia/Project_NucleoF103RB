
01_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001314  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001420  08001420  00011420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800144c  0800144c  0001144c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001450  08001450  00011450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001454  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  2000000c  08001460  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000002c  08001460  0002002c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00008925  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001847  00000000  00000000  0002895a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000188  00000000  00000000  0002a1a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000024b7  00000000  00000000  0002a330  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000155b  00000000  00000000  0002c7e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      0000007c  00000000  00000000  0002dd42  2**0
                  CONTENTS, READONLY
 15 .debug_frame  000007c4  00000000  00000000  0002ddc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00001116  00000000  00000000  0002e584  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000000a0  00000000  00000000  0002f6a0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001408 	.word	0x08001408

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001408 	.word	0x08001408

0800014c <apInit>:
 */

#include "ap.h"

void apInit(void)
{
 800014c:	4770      	bx	lr

0800014e <apMain>:

}

void apMain(void)
{
 800014e:	b508      	push	{r3, lr}
  while(1)
  {
    ledToggle(0);
 8000150:	2000      	movs	r0, #0
 8000152:	f000 f8eb 	bl	800032c <ledToggle>
    //ledOn(0);
    delay(500);
 8000156:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800015a:	f000 f8f5 	bl	8000348 <delay>
 800015e:	e7f7      	b.n	8000150 <apMain+0x2>

08000160 <SystemClock_Config>:
  *            Flash Latency(WS)              = 2
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 8000160:	b500      	push	{lr}
 8000162:	b091      	sub	sp, #68	; 0x44
  RCC_ClkInitTypeDef clkinitstruct = {0};
 8000164:	2100      	movs	r1, #0
 8000166:	910b      	str	r1, [sp, #44]	; 0x2c
 8000168:	910c      	str	r1, [sp, #48]	; 0x30
 800016a:	910d      	str	r1, [sp, #52]	; 0x34
 800016c:	910e      	str	r1, [sp, #56]	; 0x38
 800016e:	910f      	str	r1, [sp, #60]	; 0x3c
  RCC_OscInitTypeDef oscinitstruct = {0};
 8000170:	2228      	movs	r2, #40	; 0x28
 8000172:	a801      	add	r0, sp, #4
 8000174:	f001 f940 	bl	80013f8 <memset>

  /* Configure PLL ------------------------------------------------------*/
  /* PLL configuration: PLLCLK = (HSI / 2) * PLLMUL = (8 / 2) * 16 = 64 MHz */
  /* PREDIV1 configuration: PREDIV1CLK = PLLCLK / HSEPredivValue = 64 / 1 = 64 MHz */
  /* Enable HSI and activate PLL with HSi_DIV2 as source */
  oscinitstruct.OscillatorType  = RCC_OSCILLATORTYPE_HSI;
 8000178:	2302      	movs	r3, #2
 800017a:	9301      	str	r3, [sp, #4]
  oscinitstruct.HSEState        = RCC_HSE_OFF;
  oscinitstruct.LSEState        = RCC_LSE_OFF;
  oscinitstruct.HSIState        = RCC_HSI_ON;
 800017c:	2201      	movs	r2, #1
 800017e:	9205      	str	r2, [sp, #20]
  oscinitstruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000180:	2210      	movs	r2, #16
 8000182:	9206      	str	r2, [sp, #24]
  oscinitstruct.HSEPredivValue    = RCC_HSE_PREDIV_DIV1;
  oscinitstruct.PLL.PLLState    = RCC_PLL_ON;
 8000184:	9308      	str	r3, [sp, #32]
  oscinitstruct.PLL.PLLSource   = RCC_PLLSOURCE_HSI_DIV2;
  oscinitstruct.PLL.PLLMUL      = RCC_PLL_MUL16;
 8000186:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800018a:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&oscinitstruct)!= HAL_OK)
 800018c:	a801      	add	r0, sp, #4
 800018e:	f000 fd09 	bl	8000ba4 <HAL_RCC_OscConfig>
 8000192:	b100      	cbz	r0, 8000196 <SystemClock_Config+0x36>
 8000194:	e7fe      	b.n	8000194 <SystemClock_Config+0x34>
    while(1);
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  clkinitstruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000196:	230f      	movs	r3, #15
 8000198:	930b      	str	r3, [sp, #44]	; 0x2c
  clkinitstruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800019a:	2102      	movs	r1, #2
 800019c:	910c      	str	r1, [sp, #48]	; 0x30
  clkinitstruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800019e:	2300      	movs	r3, #0
 80001a0:	930d      	str	r3, [sp, #52]	; 0x34
  clkinitstruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001a2:	930f      	str	r3, [sp, #60]	; 0x3c
  clkinitstruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001a8:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_RCC_ClockConfig(&clkinitstruct, FLASH_LATENCY_2)!= HAL_OK)
 80001aa:	a80b      	add	r0, sp, #44	; 0x2c
 80001ac:	f000 ff52 	bl	8001054 <HAL_RCC_ClockConfig>
 80001b0:	b100      	cbz	r0, 80001b4 <SystemClock_Config+0x54>
 80001b2:	e7fe      	b.n	80001b2 <SystemClock_Config+0x52>
  {
    /* Initialization Error */
    while(1);
  }
}
 80001b4:	b011      	add	sp, #68	; 0x44
 80001b6:	f85d fb04 	ldr.w	pc, [sp], #4

080001ba <bspInit>:
{
 80001ba:	b500      	push	{lr}
 80001bc:	b083      	sub	sp, #12
  HAL_Init();
 80001be:	f000 f901 	bl	80003c4 <HAL_Init>
  SystemClock_Config();
 80001c2:	f7ff ffcd 	bl	8000160 <SystemClock_Config>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001c6:	4b06      	ldr	r3, [pc, #24]	; (80001e0 <bspInit+0x26>)
 80001c8:	699a      	ldr	r2, [r3, #24]
 80001ca:	f042 0204 	orr.w	r2, r2, #4
 80001ce:	619a      	str	r2, [r3, #24]
 80001d0:	699b      	ldr	r3, [r3, #24]
 80001d2:	f003 0304 	and.w	r3, r3, #4
 80001d6:	9301      	str	r3, [sp, #4]
 80001d8:	9b01      	ldr	r3, [sp, #4]
}
 80001da:	b003      	add	sp, #12
 80001dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80001e0:	40021000 	.word	0x40021000

080001e4 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80001e4:	4b0f      	ldr	r3, [pc, #60]	; (8000224 <SystemInit+0x40>)
 80001e6:	681a      	ldr	r2, [r3, #0]
 80001e8:	f042 0201 	orr.w	r2, r2, #1
 80001ec:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80001ee:	6859      	ldr	r1, [r3, #4]
 80001f0:	4a0d      	ldr	r2, [pc, #52]	; (8000228 <SystemInit+0x44>)
 80001f2:	400a      	ands	r2, r1
 80001f4:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80001f6:	681a      	ldr	r2, [r3, #0]
 80001f8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80001fc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000200:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000202:	681a      	ldr	r2, [r3, #0]
 8000204:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000208:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800020a:	685a      	ldr	r2, [r3, #4]
 800020c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000210:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000212:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000216:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000218:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800021c:	4b03      	ldr	r3, [pc, #12]	; (800022c <SystemInit+0x48>)
 800021e:	609a      	str	r2, [r3, #8]
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	40021000 	.word	0x40021000
 8000228:	f8ff0000 	.word	0xf8ff0000
 800022c:	e000ed00 	.word	0xe000ed00

08000230 <SystemCoreClockUpdate>:
#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000230:	4b1f      	ldr	r3, [pc, #124]	; (80002b0 <SystemCoreClockUpdate+0x80>)
 8000232:	685b      	ldr	r3, [r3, #4]
 8000234:	f003 030c 	and.w	r3, r3, #12
  
  switch (tmp)
 8000238:	2b04      	cmp	r3, #4
 800023a:	d014      	beq.n	8000266 <SystemCoreClockUpdate+0x36>
 800023c:	2b08      	cmp	r3, #8
 800023e:	d016      	beq.n	800026e <SystemCoreClockUpdate+0x3e>
 8000240:	b11b      	cbz	r3, 800024a <SystemCoreClockUpdate+0x1a>
      }
#endif /* STM32F105xC */ 
      break;

    default:
      SystemCoreClock = HSI_VALUE;
 8000242:	4a1c      	ldr	r2, [pc, #112]	; (80002b4 <SystemCoreClockUpdate+0x84>)
 8000244:	4b1c      	ldr	r3, [pc, #112]	; (80002b8 <SystemCoreClockUpdate+0x88>)
 8000246:	601a      	str	r2, [r3, #0]
      break;
 8000248:	e002      	b.n	8000250 <SystemCoreClockUpdate+0x20>
      SystemCoreClock = HSI_VALUE;
 800024a:	4a1a      	ldr	r2, [pc, #104]	; (80002b4 <SystemCoreClockUpdate+0x84>)
 800024c:	4b1a      	ldr	r3, [pc, #104]	; (80002b8 <SystemCoreClockUpdate+0x88>)
 800024e:	601a      	str	r2, [r3, #0]
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000250:	4b17      	ldr	r3, [pc, #92]	; (80002b0 <SystemCoreClockUpdate+0x80>)
 8000252:	685b      	ldr	r3, [r3, #4]
 8000254:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000258:	4a18      	ldr	r2, [pc, #96]	; (80002bc <SystemCoreClockUpdate+0x8c>)
 800025a:	5cd1      	ldrb	r1, [r2, r3]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 800025c:	4a16      	ldr	r2, [pc, #88]	; (80002b8 <SystemCoreClockUpdate+0x88>)
 800025e:	6813      	ldr	r3, [r2, #0]
 8000260:	40cb      	lsrs	r3, r1
 8000262:	6013      	str	r3, [r2, #0]
 8000264:	4770      	bx	lr
      SystemCoreClock = HSE_VALUE;
 8000266:	4a13      	ldr	r2, [pc, #76]	; (80002b4 <SystemCoreClockUpdate+0x84>)
 8000268:	4b13      	ldr	r3, [pc, #76]	; (80002b8 <SystemCoreClockUpdate+0x88>)
 800026a:	601a      	str	r2, [r3, #0]
      break;
 800026c:	e7f0      	b.n	8000250 <SystemCoreClockUpdate+0x20>
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 800026e:	4a10      	ldr	r2, [pc, #64]	; (80002b0 <SystemCoreClockUpdate+0x80>)
 8000270:	6853      	ldr	r3, [r2, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000272:	6852      	ldr	r2, [r2, #4]
      pllmull = ( pllmull >> 18U) + 2U;
 8000274:	f3c3 4383 	ubfx	r3, r3, #18, #4
 8000278:	3302      	adds	r3, #2
      if (pllsource == 0x00U)
 800027a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800027e:	d00a      	beq.n	8000296 <SystemCoreClockUpdate+0x66>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 8000280:	4a0b      	ldr	r2, [pc, #44]	; (80002b0 <SystemCoreClockUpdate+0x80>)
 8000282:	6852      	ldr	r2, [r2, #4]
 8000284:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8000288:	d00b      	beq.n	80002a2 <SystemCoreClockUpdate+0x72>
          SystemCoreClock = (HSE_VALUE >> 1U) * pllmull;
 800028a:	4a0d      	ldr	r2, [pc, #52]	; (80002c0 <SystemCoreClockUpdate+0x90>)
 800028c:	fb02 f303 	mul.w	r3, r2, r3
 8000290:	4a09      	ldr	r2, [pc, #36]	; (80002b8 <SystemCoreClockUpdate+0x88>)
 8000292:	6013      	str	r3, [r2, #0]
 8000294:	e7dc      	b.n	8000250 <SystemCoreClockUpdate+0x20>
        SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 8000296:	4a0a      	ldr	r2, [pc, #40]	; (80002c0 <SystemCoreClockUpdate+0x90>)
 8000298:	fb02 f303 	mul.w	r3, r2, r3
 800029c:	4a06      	ldr	r2, [pc, #24]	; (80002b8 <SystemCoreClockUpdate+0x88>)
 800029e:	6013      	str	r3, [r2, #0]
 80002a0:	e7d6      	b.n	8000250 <SystemCoreClockUpdate+0x20>
          SystemCoreClock = HSE_VALUE * pllmull;
 80002a2:	4a04      	ldr	r2, [pc, #16]	; (80002b4 <SystemCoreClockUpdate+0x84>)
 80002a4:	fb02 f303 	mul.w	r3, r2, r3
 80002a8:	4a03      	ldr	r2, [pc, #12]	; (80002b8 <SystemCoreClockUpdate+0x88>)
 80002aa:	6013      	str	r3, [r2, #0]
 80002ac:	e7d0      	b.n	8000250 <SystemCoreClockUpdate+0x20>
 80002ae:	bf00      	nop
 80002b0:	40021000 	.word	0x40021000
 80002b4:	007a1200 	.word	0x007a1200
 80002b8:	20000000 	.word	0x20000000
 80002bc:	08001420 	.word	0x08001420
 80002c0:	003d0900 	.word	0x003d0900

080002c4 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80002c4:	4770      	bx	lr

080002c6 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80002c6:	e7fe      	b.n	80002c6 <HardFault_Handler>

080002c8 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80002c8:	e7fe      	b.n	80002c8 <MemManage_Handler>

080002ca <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80002ca:	e7fe      	b.n	80002ca <BusFault_Handler>

080002cc <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80002cc:	e7fe      	b.n	80002cc <UsageFault_Handler>

080002ce <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80002ce:	4770      	bx	lr

080002d0 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80002d0:	4770      	bx	lr

080002d2 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80002d2:	4770      	bx	lr

080002d4 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80002d4:	b508      	push	{r3, lr}
  HAL_IncTick();
 80002d6:	f000 f887 	bl	80003e8 <HAL_IncTick>
 80002da:	bd08      	pop	{r3, pc}

080002dc <ledInit>:


#include "led.h"

void ledInit(void)
{
 80002dc:	b500      	push	{lr}
 80002de:	b085      	sub	sp, #20

  GPIO_InitTypeDef  GPIO_InitStruct;

  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80002e0:	2301      	movs	r3, #1
 80002e2:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 80002e4:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002e6:	2303      	movs	r3, #3
 80002e8:	9303      	str	r3, [sp, #12]

  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80002ea:	a904      	add	r1, sp, #16
 80002ec:	2320      	movs	r3, #32
 80002ee:	f841 3d10 	str.w	r3, [r1, #-16]!
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002f2:	4803      	ldr	r0, [pc, #12]	; (8000300 <ledInit+0x24>)
 80002f4:	f000 fa26 	bl	8000744 <HAL_GPIO_Init>

}
 80002f8:	b005      	add	sp, #20
 80002fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80002fe:	bf00      	nop
 8000300:	40010800 	.word	0x40010800

08000304 <ledOn>:

void ledOn(uint8_t ch)
{
 8000304:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000306:	2201      	movs	r2, #1
 8000308:	2120      	movs	r1, #32
 800030a:	4802      	ldr	r0, [pc, #8]	; (8000314 <ledOn+0x10>)
 800030c:	f000 fb8f 	bl	8000a2e <HAL_GPIO_WritePin>
 8000310:	bd08      	pop	{r3, pc}
 8000312:	bf00      	nop
 8000314:	40010800 	.word	0x40010800

08000318 <ledOff>:
}

void ledOff(uint8_t ch)
{
 8000318:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800031a:	2200      	movs	r2, #0
 800031c:	2120      	movs	r1, #32
 800031e:	4802      	ldr	r0, [pc, #8]	; (8000328 <ledOff+0x10>)
 8000320:	f000 fb85 	bl	8000a2e <HAL_GPIO_WritePin>
 8000324:	bd08      	pop	{r3, pc}
 8000326:	bf00      	nop
 8000328:	40010800 	.word	0x40010800

0800032c <ledToggle>:
}

void ledToggle(uint8_t ch)
{
 800032c:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800032e:	2120      	movs	r1, #32
 8000330:	4801      	ldr	r0, [pc, #4]	; (8000338 <ledToggle+0xc>)
 8000332:	f000 fb82 	bl	8000a3a <HAL_GPIO_TogglePin>
 8000336:	bd08      	pop	{r3, pc}
 8000338:	40010800 	.word	0x40010800

0800033c <hwInit>:
 */

#include "hw.h"

void hwInit(void)
{
 800033c:	b508      	push	{r3, lr}
  bspInit();
 800033e:	f7ff ff3c 	bl	80001ba <bspInit>
  ledInit();
 8000342:	f7ff ffcb 	bl	80002dc <ledInit>
 8000346:	bd08      	pop	{r3, pc}

08000348 <delay>:
}

void delay(uint32_t time_ms)
{
 8000348:	b508      	push	{r3, lr}
  HAL_Delay(time_ms);
 800034a:	f000 f87b 	bl	8000444 <HAL_Delay>
 800034e:	bd08      	pop	{r3, pc}

08000350 <millis>:
}

uint32_t millis(void)
{
 8000350:	b508      	push	{r3, lr}
  return HAL_GetTick();
 8000352:	f000 f855 	bl	8000400 <HAL_GetTick>
}
 8000356:	bd08      	pop	{r3, pc}

08000358 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000358:	4770      	bx	lr

0800035a <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 800035a:	4770      	bx	lr

0800035c <HAL_DeInit>:
{
 800035c:	b510      	push	{r4, lr}
  __HAL_RCC_APB1_FORCE_RESET();
 800035e:	4b06      	ldr	r3, [pc, #24]	; (8000378 <HAL_DeInit+0x1c>)
 8000360:	f04f 32ff 	mov.w	r2, #4294967295
 8000364:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000366:	2400      	movs	r4, #0
 8000368:	611c      	str	r4, [r3, #16]
  __HAL_RCC_APB2_FORCE_RESET();
 800036a:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 800036c:	60dc      	str	r4, [r3, #12]
  HAL_MspDeInit();
 800036e:	f7ff fff4 	bl	800035a <HAL_MspDeInit>
}
 8000372:	4620      	mov	r0, r4
 8000374:	bd10      	pop	{r4, pc}
 8000376:	bf00      	nop
 8000378:	40021000 	.word	0x40021000

0800037c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800037c:	b510      	push	{r4, lr}
 800037e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000380:	4b0e      	ldr	r3, [pc, #56]	; (80003bc <HAL_InitTick+0x40>)
 8000382:	7818      	ldrb	r0, [r3, #0]
 8000384:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000388:	fbb3 f3f0 	udiv	r3, r3, r0
 800038c:	4a0c      	ldr	r2, [pc, #48]	; (80003c0 <HAL_InitTick+0x44>)
 800038e:	6810      	ldr	r0, [r2, #0]
 8000390:	fbb0 f0f3 	udiv	r0, r0, r3
 8000394:	f000 f93c 	bl	8000610 <HAL_SYSTICK_Config>
 8000398:	b968      	cbnz	r0, 80003b6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800039a:	2c0f      	cmp	r4, #15
 800039c:	d901      	bls.n	80003a2 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800039e:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 80003a0:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80003a2:	2200      	movs	r2, #0
 80003a4:	4621      	mov	r1, r4
 80003a6:	f04f 30ff 	mov.w	r0, #4294967295
 80003aa:	f000 f8d3 	bl	8000554 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80003ae:	4b03      	ldr	r3, [pc, #12]	; (80003bc <HAL_InitTick+0x40>)
 80003b0:	605c      	str	r4, [r3, #4]
  return HAL_OK;
 80003b2:	2000      	movs	r0, #0
 80003b4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80003b6:	2001      	movs	r0, #1
 80003b8:	bd10      	pop	{r4, pc}
 80003ba:	bf00      	nop
 80003bc:	20000004 	.word	0x20000004
 80003c0:	20000000 	.word	0x20000000

080003c4 <HAL_Init>:
{
 80003c4:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003c6:	4a07      	ldr	r2, [pc, #28]	; (80003e4 <HAL_Init+0x20>)
 80003c8:	6813      	ldr	r3, [r2, #0]
 80003ca:	f043 0310 	orr.w	r3, r3, #16
 80003ce:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003d0:	2003      	movs	r0, #3
 80003d2:	f000 f8ad 	bl	8000530 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80003d6:	200f      	movs	r0, #15
 80003d8:	f7ff ffd0 	bl	800037c <HAL_InitTick>
  HAL_MspInit();
 80003dc:	f7ff ffbc 	bl	8000358 <HAL_MspInit>
}
 80003e0:	2000      	movs	r0, #0
 80003e2:	bd08      	pop	{r3, pc}
 80003e4:	40022000 	.word	0x40022000

080003e8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80003e8:	4a03      	ldr	r2, [pc, #12]	; (80003f8 <HAL_IncTick+0x10>)
 80003ea:	6811      	ldr	r1, [r2, #0]
 80003ec:	4b03      	ldr	r3, [pc, #12]	; (80003fc <HAL_IncTick+0x14>)
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	440b      	add	r3, r1
 80003f2:	6013      	str	r3, [r2, #0]
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	20000028 	.word	0x20000028
 80003fc:	20000004 	.word	0x20000004

08000400 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000400:	4b01      	ldr	r3, [pc, #4]	; (8000408 <HAL_GetTick+0x8>)
 8000402:	6818      	ldr	r0, [r3, #0]
}
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop
 8000408:	20000028 	.word	0x20000028

0800040c <HAL_GetTickPrio>:
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
  return uwTickPrio;
}
 800040c:	4b01      	ldr	r3, [pc, #4]	; (8000414 <HAL_GetTickPrio+0x8>)
 800040e:	6858      	ldr	r0, [r3, #4]
 8000410:	4770      	bx	lr
 8000412:	bf00      	nop
 8000414:	20000004 	.word	0x20000004

08000418 <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval Status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
 8000418:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status  = HAL_OK;
  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 800041a:	4b06      	ldr	r3, [pc, #24]	; (8000434 <HAL_SetTickFreq+0x1c>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	4283      	cmp	r3, r0
 8000420:	d005      	beq.n	800042e <HAL_SetTickFreq+0x16>
  {
    uwTickFreq = Freq;
 8000422:	4b04      	ldr	r3, [pc, #16]	; (8000434 <HAL_SetTickFreq+0x1c>)
 8000424:	7018      	strb	r0, [r3, #0]

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
 8000426:	6858      	ldr	r0, [r3, #4]
 8000428:	f7ff ffa8 	bl	800037c <HAL_InitTick>
 800042c:	bd08      	pop	{r3, pc}
  HAL_StatusTypeDef status  = HAL_OK;
 800042e:	2000      	movs	r0, #0
  }

  return status;
}
 8000430:	bd08      	pop	{r3, pc}
 8000432:	bf00      	nop
 8000434:	20000004 	.word	0x20000004

08000438 <HAL_GetTickFreq>:
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
  return uwTickFreq;
}
 8000438:	4b01      	ldr	r3, [pc, #4]	; (8000440 <HAL_GetTickFreq+0x8>)
 800043a:	7818      	ldrb	r0, [r3, #0]
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	20000004 	.word	0x20000004

08000444 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000444:	b538      	push	{r3, r4, r5, lr}
 8000446:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000448:	f7ff ffda 	bl	8000400 <HAL_GetTick>
 800044c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800044e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000452:	d002      	beq.n	800045a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000454:	4b04      	ldr	r3, [pc, #16]	; (8000468 <HAL_Delay+0x24>)
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800045a:	f7ff ffd1 	bl	8000400 <HAL_GetTick>
 800045e:	1b40      	subs	r0, r0, r5
 8000460:	4284      	cmp	r4, r0
 8000462:	d8fa      	bhi.n	800045a <HAL_Delay+0x16>
  {
  }
}
 8000464:	bd38      	pop	{r3, r4, r5, pc}
 8000466:	bf00      	nop
 8000468:	20000004 	.word	0x20000004

0800046c <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800046c:	4a02      	ldr	r2, [pc, #8]	; (8000478 <HAL_SuspendTick+0xc>)
 800046e:	6813      	ldr	r3, [r2, #0]
 8000470:	f023 0302 	bic.w	r3, r3, #2
 8000474:	6013      	str	r3, [r2, #0]
 8000476:	4770      	bx	lr
 8000478:	e000e010 	.word	0xe000e010

0800047c <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800047c:	4a02      	ldr	r2, [pc, #8]	; (8000488 <HAL_ResumeTick+0xc>)
 800047e:	6813      	ldr	r3, [r2, #0]
 8000480:	f043 0302 	orr.w	r3, r3, #2
 8000484:	6013      	str	r3, [r2, #0]
 8000486:	4770      	bx	lr
 8000488:	e000e010 	.word	0xe000e010

0800048c <HAL_GetHalVersion>:
  * @retval version 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
  return __STM32F1xx_HAL_VERSION;
}
 800048c:	4800      	ldr	r0, [pc, #0]	; (8000490 <HAL_GetHalVersion+0x4>)
 800048e:	4770      	bx	lr
 8000490:	01010300 	.word	0x01010300

08000494 <HAL_GetREVID>:
  *       Refer to errata sheet of these devices for more details.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
  return ((DBGMCU->IDCODE) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000494:	4b01      	ldr	r3, [pc, #4]	; (800049c <HAL_GetREVID+0x8>)
 8000496:	6818      	ldr	r0, [r3, #0]
}
 8000498:	0c00      	lsrs	r0, r0, #16
 800049a:	4770      	bx	lr
 800049c:	e0042000 	.word	0xe0042000

080004a0 <HAL_GetDEVID>:
  *       Refer to errata sheet of these devices for more details.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
  return ((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 80004a0:	4b02      	ldr	r3, [pc, #8]	; (80004ac <HAL_GetDEVID+0xc>)
 80004a2:	6818      	ldr	r0, [r3, #0]
}
 80004a4:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	e0042000 	.word	0xe0042000

080004b0 <HAL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80004b0:	4a02      	ldr	r2, [pc, #8]	; (80004bc <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 80004b2:	6853      	ldr	r3, [r2, #4]
 80004b4:	f043 0301 	orr.w	r3, r3, #1
 80004b8:	6053      	str	r3, [r2, #4]
 80004ba:	4770      	bx	lr
 80004bc:	e0042000 	.word	0xe0042000

080004c0 <HAL_DBGMCU_DisableDBGSleepMode>:
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80004c0:	4a02      	ldr	r2, [pc, #8]	; (80004cc <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 80004c2:	6853      	ldr	r3, [r2, #4]
 80004c4:	f023 0301 	bic.w	r3, r3, #1
 80004c8:	6053      	str	r3, [r2, #4]
 80004ca:	4770      	bx	lr
 80004cc:	e0042000 	.word	0xe0042000

080004d0 <HAL_DBGMCU_EnableDBGStopMode>:
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80004d0:	4a02      	ldr	r2, [pc, #8]	; (80004dc <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 80004d2:	6853      	ldr	r3, [r2, #4]
 80004d4:	f043 0302 	orr.w	r3, r3, #2
 80004d8:	6053      	str	r3, [r2, #4]
 80004da:	4770      	bx	lr
 80004dc:	e0042000 	.word	0xe0042000

080004e0 <HAL_DBGMCU_DisableDBGStopMode>:
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80004e0:	4a02      	ldr	r2, [pc, #8]	; (80004ec <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 80004e2:	6853      	ldr	r3, [r2, #4]
 80004e4:	f023 0302 	bic.w	r3, r3, #2
 80004e8:	6053      	str	r3, [r2, #4]
 80004ea:	4770      	bx	lr
 80004ec:	e0042000 	.word	0xe0042000

080004f0 <HAL_DBGMCU_EnableDBGStandbyMode>:
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80004f0:	4a02      	ldr	r2, [pc, #8]	; (80004fc <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 80004f2:	6853      	ldr	r3, [r2, #4]
 80004f4:	f043 0304 	orr.w	r3, r3, #4
 80004f8:	6053      	str	r3, [r2, #4]
 80004fa:	4770      	bx	lr
 80004fc:	e0042000 	.word	0xe0042000

08000500 <HAL_DBGMCU_DisableDBGStandbyMode>:
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8000500:	4a02      	ldr	r2, [pc, #8]	; (800050c <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 8000502:	6853      	ldr	r3, [r2, #4]
 8000504:	f023 0304 	bic.w	r3, r3, #4
 8000508:	6053      	str	r3, [r2, #4]
 800050a:	4770      	bx	lr
 800050c:	e0042000 	.word	0xe0042000

08000510 <HAL_GetUID>:
  * @param UID pointer to 3 words array.
  * @retval Device identifier
  */
void HAL_GetUID(uint32_t *UID)
{
  UID[0] = (uint32_t)(READ_REG(*((uint32_t *)UID_BASE)));
 8000510:	4b04      	ldr	r3, [pc, #16]	; (8000524 <HAL_GetUID+0x14>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	6003      	str	r3, [r0, #0]
  UID[1] = (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8000516:	4b04      	ldr	r3, [pc, #16]	; (8000528 <HAL_GetUID+0x18>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	6043      	str	r3, [r0, #4]
  UID[2] = (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 800051c:	4b03      	ldr	r3, [pc, #12]	; (800052c <HAL_GetUID+0x1c>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	6083      	str	r3, [r0, #8]
 8000522:	4770      	bx	lr
 8000524:	1ffff7e8 	.word	0x1ffff7e8
 8000528:	1ffff7ec 	.word	0x1ffff7ec
 800052c:	1ffff7f0 	.word	0x1ffff7f0

08000530 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000530:	4a07      	ldr	r2, [pc, #28]	; (8000550 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000532:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000534:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000538:	041b      	lsls	r3, r3, #16
 800053a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800053c:	0200      	lsls	r0, r0, #8
 800053e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000542:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8000544:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000548:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800054c:	60d0      	str	r0, [r2, #12]
 800054e:	4770      	bx	lr
 8000550:	e000ed00 	.word	0xe000ed00

08000554 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000554:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000556:	4b16      	ldr	r3, [pc, #88]	; (80005b0 <HAL_NVIC_SetPriority+0x5c>)
 8000558:	68db      	ldr	r3, [r3, #12]
 800055a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800055e:	f1c3 0407 	rsb	r4, r3, #7
 8000562:	2c04      	cmp	r4, #4
 8000564:	bf28      	it	cs
 8000566:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000568:	1d1d      	adds	r5, r3, #4
 800056a:	2d06      	cmp	r5, #6
 800056c:	d917      	bls.n	800059e <HAL_NVIC_SetPriority+0x4a>
 800056e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000570:	2501      	movs	r5, #1
 8000572:	fa05 f404 	lsl.w	r4, r5, r4
 8000576:	3c01      	subs	r4, #1
 8000578:	4021      	ands	r1, r4
 800057a:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800057c:	fa05 f303 	lsl.w	r3, r5, r3
 8000580:	3b01      	subs	r3, #1
 8000582:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000584:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8000586:	2800      	cmp	r0, #0
 8000588:	db0b      	blt.n	80005a2 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800058a:	0109      	lsls	r1, r1, #4
 800058c:	b2c9      	uxtb	r1, r1
 800058e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000592:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000596:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800059a:	bc30      	pop	{r4, r5}
 800059c:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800059e:	2300      	movs	r3, #0
 80005a0:	e7e6      	b.n	8000570 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005a2:	f000 000f 	and.w	r0, r0, #15
 80005a6:	0109      	lsls	r1, r1, #4
 80005a8:	b2c9      	uxtb	r1, r1
 80005aa:	4b02      	ldr	r3, [pc, #8]	; (80005b4 <HAL_NVIC_SetPriority+0x60>)
 80005ac:	5419      	strb	r1, [r3, r0]
 80005ae:	e7f4      	b.n	800059a <HAL_NVIC_SetPriority+0x46>
 80005b0:	e000ed00 	.word	0xe000ed00
 80005b4:	e000ed14 	.word	0xe000ed14

080005b8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80005b8:	0942      	lsrs	r2, r0, #5
 80005ba:	f000 001f 	and.w	r0, r0, #31
 80005be:	2301      	movs	r3, #1
 80005c0:	fa03 f000 	lsl.w	r0, r3, r0
 80005c4:	4b01      	ldr	r3, [pc, #4]	; (80005cc <HAL_NVIC_EnableIRQ+0x14>)
 80005c6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80005ca:	4770      	bx	lr
 80005cc:	e000e100 	.word	0xe000e100

080005d0 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80005d0:	0943      	lsrs	r3, r0, #5
 80005d2:	f000 001f 	and.w	r0, r0, #31
 80005d6:	2201      	movs	r2, #1
 80005d8:	fa02 f000 	lsl.w	r0, r2, r0
 80005dc:	3320      	adds	r3, #32
 80005de:	4a02      	ldr	r2, [pc, #8]	; (80005e8 <HAL_NVIC_DisableIRQ+0x18>)
 80005e0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	e000e100 	.word	0xe000e100

080005ec <HAL_NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005ec:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80005f0:	4905      	ldr	r1, [pc, #20]	; (8000608 <HAL_NVIC_SystemReset+0x1c>)
 80005f2:	68ca      	ldr	r2, [r1, #12]
 80005f4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80005f8:	4b04      	ldr	r3, [pc, #16]	; (800060c <HAL_NVIC_SystemReset+0x20>)
 80005fa:	4313      	orrs	r3, r2
 80005fc:	60cb      	str	r3, [r1, #12]
 80005fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8000602:	bf00      	nop
 8000604:	e7fd      	b.n	8000602 <HAL_NVIC_SystemReset+0x16>
 8000606:	bf00      	nop
 8000608:	e000ed00 	.word	0xe000ed00
 800060c:	05fa0004 	.word	0x05fa0004

08000610 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000610:	3801      	subs	r0, #1
 8000612:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000616:	d20a      	bcs.n	800062e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <HAL_SYSTICK_Config+0x24>)
 800061a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061c:	21f0      	movs	r1, #240	; 0xf0
 800061e:	4a06      	ldr	r2, [pc, #24]	; (8000638 <HAL_SYSTICK_Config+0x28>)
 8000620:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000624:	2000      	movs	r0, #0
 8000626:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000628:	2207      	movs	r2, #7
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800062e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	e000e010 	.word	0xe000e010
 8000638:	e000ed00 	.word	0xe000ed00

0800063c <HAL_NVIC_GetPriorityGrouping>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800063c:	4b02      	ldr	r3, [pc, #8]	; (8000648 <HAL_NVIC_GetPriorityGrouping+0xc>)
 800063e:	68d8      	ldr	r0, [r3, #12]
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
}
 8000640:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	e000ed00 	.word	0xe000ed00

0800064c <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority: Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority: Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
 800064c:	b470      	push	{r4, r5, r6}
  if ((int32_t)(IRQn) < 0)
 800064e:	2800      	cmp	r0, #0
 8000650:	db1f      	blt.n	8000692 <HAL_NVIC_GetPriority+0x46>
    return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 8000652:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000656:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800065a:	f890 0300 	ldrb.w	r0, [r0, #768]	; 0x300
 800065e:	0905      	lsrs	r5, r0, #4
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000660:	f001 0107 	and.w	r1, r1, #7
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000664:	f1c1 0407 	rsb	r4, r1, #7
 8000668:	2c04      	cmp	r4, #4
 800066a:	bf28      	it	cs
 800066c:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800066e:	1d08      	adds	r0, r1, #4
 8000670:	2806      	cmp	r0, #6
 8000672:	d914      	bls.n	800069e <HAL_NVIC_GetPriority+0x52>
 8000674:	3903      	subs	r1, #3
  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
 8000676:	fa25 f601 	lsr.w	r6, r5, r1
 800067a:	2001      	movs	r0, #1
 800067c:	fa00 f404 	lsl.w	r4, r0, r4
 8000680:	3c01      	subs	r4, #1
 8000682:	4034      	ands	r4, r6
 8000684:	6014      	str	r4, [r2, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
 8000686:	4088      	lsls	r0, r1
 8000688:	3801      	subs	r0, #1
 800068a:	4028      	ands	r0, r5
 800068c:	6018      	str	r0, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
}
 800068e:	bc70      	pop	{r4, r5, r6}
 8000690:	4770      	bx	lr
    return(((uint32_t)SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 8000692:	f000 000f 	and.w	r0, r0, #15
 8000696:	4c03      	ldr	r4, [pc, #12]	; (80006a4 <HAL_NVIC_GetPriority+0x58>)
 8000698:	5c20      	ldrb	r0, [r4, r0]
 800069a:	0905      	lsrs	r5, r0, #4
 800069c:	e7e0      	b.n	8000660 <HAL_NVIC_GetPriority+0x14>
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800069e:	2100      	movs	r1, #0
 80006a0:	e7e9      	b.n	8000676 <HAL_NVIC_GetPriority+0x2a>
 80006a2:	bf00      	nop
 80006a4:	e000ed14 	.word	0xe000ed14

080006a8 <HAL_NVIC_SetPendingIRQ>:
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80006a8:	0943      	lsrs	r3, r0, #5
 80006aa:	f000 001f 	and.w	r0, r0, #31
 80006ae:	2201      	movs	r2, #1
 80006b0:	fa02 f000 	lsl.w	r0, r2, r0
 80006b4:	3340      	adds	r3, #64	; 0x40
 80006b6:	4a02      	ldr	r2, [pc, #8]	; (80006c0 <HAL_NVIC_SetPendingIRQ+0x18>)
 80006b8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	e000e100 	.word	0xe000e100

080006c4 <HAL_NVIC_GetPendingIRQ>:
  return((uint32_t)(((NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 80006c4:	0943      	lsrs	r3, r0, #5
 80006c6:	3340      	adds	r3, #64	; 0x40
 80006c8:	4a04      	ldr	r2, [pc, #16]	; (80006dc <HAL_NVIC_GetPendingIRQ+0x18>)
 80006ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006ce:	f000 001f 	and.w	r0, r0, #31
 80006d2:	fa23 f000 	lsr.w	r0, r3, r0
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
}
 80006d6:	f000 0001 	and.w	r0, r0, #1
 80006da:	4770      	bx	lr
 80006dc:	e000e100 	.word	0xe000e100

080006e0 <HAL_NVIC_ClearPendingIRQ>:
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80006e0:	0943      	lsrs	r3, r0, #5
 80006e2:	f000 001f 	and.w	r0, r0, #31
 80006e6:	2201      	movs	r2, #1
 80006e8:	fa02 f000 	lsl.w	r0, r2, r0
 80006ec:	3360      	adds	r3, #96	; 0x60
 80006ee:	4a02      	ldr	r2, [pc, #8]	; (80006f8 <HAL_NVIC_ClearPendingIRQ+0x18>)
 80006f0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	e000e100 	.word	0xe000e100

080006fc <HAL_NVIC_GetActive>:
  return((uint32_t)(((NVIC->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 80006fc:	0943      	lsrs	r3, r0, #5
 80006fe:	3380      	adds	r3, #128	; 0x80
 8000700:	4a04      	ldr	r2, [pc, #16]	; (8000714 <HAL_NVIC_GetActive+0x18>)
 8000702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000706:	f000 001f 	and.w	r0, r0, #31
 800070a:	fa23 f000 	lsr.w	r0, r3, r0
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
}
 800070e:	f000 0001 	and.w	r0, r0, #1
 8000712:	4770      	bx	lr
 8000714:	e000e100 	.word	0xe000e100

08000718 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000718:	2804      	cmp	r0, #4
 800071a:	d005      	beq.n	8000728 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800071c:	4a05      	ldr	r2, [pc, #20]	; (8000734 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 800071e:	6813      	ldr	r3, [r2, #0]
 8000720:	f023 0304 	bic.w	r3, r3, #4
 8000724:	6013      	str	r3, [r2, #0]
 8000726:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000728:	4a02      	ldr	r2, [pc, #8]	; (8000734 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 800072a:	6813      	ldr	r3, [r2, #0]
 800072c:	f043 0304 	orr.w	r3, r3, #4
 8000730:	6013      	str	r3, [r2, #0]
 8000732:	4770      	bx	lr
 8000734:	e000e010 	.word	0xe000e010

08000738 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000738:	4770      	bx	lr

0800073a <HAL_SYSTICK_IRQHandler>:
{
 800073a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800073c:	f7ff fffc 	bl	8000738 <HAL_SYSTICK_Callback>
 8000740:	bd08      	pop	{r3, pc}
 8000742:	bf00      	nop

08000744 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000746:	b083      	sub	sp, #12
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000748:	2600      	movs	r6, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800074a:	4634      	mov	r4, r6
 800074c:	e071      	b.n	8000832 <HAL_GPIO_Init+0xee>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800074e:	2d00      	cmp	r5, #0
 8000750:	f000 80a1 	beq.w	8000896 <HAL_GPIO_Init+0x152>
 8000754:	2d01      	cmp	r5, #1
 8000756:	d100      	bne.n	800075a <HAL_GPIO_Init+0x16>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000758:	68ce      	ldr	r6, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800075a:	2bff      	cmp	r3, #255	; 0xff
 800075c:	f200 80af 	bhi.w	80008be <HAL_GPIO_Init+0x17a>
 8000760:	4686      	mov	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000762:	2bff      	cmp	r3, #255	; 0xff
 8000764:	f200 80ae 	bhi.w	80008c4 <HAL_GPIO_Init+0x180>
 8000768:	00a5      	lsls	r5, r4, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800076a:	f8de 2000 	ldr.w	r2, [lr]
 800076e:	270f      	movs	r7, #15
 8000770:	40af      	lsls	r7, r5
 8000772:	ea22 0207 	bic.w	r2, r2, r7
 8000776:	fa06 f505 	lsl.w	r5, r6, r5
 800077a:	432a      	orrs	r2, r5
 800077c:	f8ce 2000 	str.w	r2, [lr]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000780:	684a      	ldr	r2, [r1, #4]
 8000782:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000786:	d053      	beq.n	8000830 <HAL_GPIO_Init+0xec>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000788:	4a63      	ldr	r2, [pc, #396]	; (8000918 <HAL_GPIO_Init+0x1d4>)
 800078a:	6995      	ldr	r5, [r2, #24]
 800078c:	f045 0501 	orr.w	r5, r5, #1
 8000790:	6195      	str	r5, [r2, #24]
 8000792:	6992      	ldr	r2, [r2, #24]
 8000794:	f002 0201 	and.w	r2, r2, #1
 8000798:	9201      	str	r2, [sp, #4]
 800079a:	9a01      	ldr	r2, [sp, #4]
        temp = AFIO->EXTICR[position >> 2U];
 800079c:	08a5      	lsrs	r5, r4, #2
 800079e:	1caf      	adds	r7, r5, #2
 80007a0:	4a5e      	ldr	r2, [pc, #376]	; (800091c <HAL_GPIO_Init+0x1d8>)
 80007a2:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80007a6:	f004 0703 	and.w	r7, r4, #3
 80007aa:	00bf      	lsls	r7, r7, #2
 80007ac:	f04f 0e0f 	mov.w	lr, #15
 80007b0:	fa0e fe07 	lsl.w	lr, lr, r7
 80007b4:	ea22 020e 	bic.w	r2, r2, lr
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007b8:	f8df e170 	ldr.w	lr, [pc, #368]	; 800092c <HAL_GPIO_Init+0x1e8>
 80007bc:	4570      	cmp	r0, lr
 80007be:	f000 8088 	beq.w	80008d2 <HAL_GPIO_Init+0x18e>
 80007c2:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 80007c6:	4570      	cmp	r0, lr
 80007c8:	f000 8086 	beq.w	80008d8 <HAL_GPIO_Init+0x194>
 80007cc:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 80007d0:	4570      	cmp	r0, lr
 80007d2:	f000 8084 	beq.w	80008de <HAL_GPIO_Init+0x19a>
 80007d6:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 80007da:	4570      	cmp	r0, lr
 80007dc:	d076      	beq.n	80008cc <HAL_GPIO_Init+0x188>
 80007de:	f04f 0e04 	mov.w	lr, #4
 80007e2:	fa0e f707 	lsl.w	r7, lr, r7
 80007e6:	433a      	orrs	r2, r7
        AFIO->EXTICR[position >> 2U] = temp;
 80007e8:	3502      	adds	r5, #2
 80007ea:	4f4c      	ldr	r7, [pc, #304]	; (800091c <HAL_GPIO_Init+0x1d8>)
 80007ec:	f847 2025 	str.w	r2, [r7, r5, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007f0:	684a      	ldr	r2, [r1, #4]
 80007f2:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80007f6:	d075      	beq.n	80008e4 <HAL_GPIO_Init+0x1a0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80007f8:	4d49      	ldr	r5, [pc, #292]	; (8000920 <HAL_GPIO_Init+0x1dc>)
 80007fa:	682a      	ldr	r2, [r5, #0]
 80007fc:	431a      	orrs	r2, r3
 80007fe:	602a      	str	r2, [r5, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000800:	684a      	ldr	r2, [r1, #4]
 8000802:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8000806:	d073      	beq.n	80008f0 <HAL_GPIO_Init+0x1ac>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000808:	4d45      	ldr	r5, [pc, #276]	; (8000920 <HAL_GPIO_Init+0x1dc>)
 800080a:	686a      	ldr	r2, [r5, #4]
 800080c:	431a      	orrs	r2, r3
 800080e:	606a      	str	r2, [r5, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000810:	684a      	ldr	r2, [r1, #4]
 8000812:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 8000816:	d071      	beq.n	80008fc <HAL_GPIO_Init+0x1b8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000818:	4d41      	ldr	r5, [pc, #260]	; (8000920 <HAL_GPIO_Init+0x1dc>)
 800081a:	68aa      	ldr	r2, [r5, #8]
 800081c:	431a      	orrs	r2, r3
 800081e:	60aa      	str	r2, [r5, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000820:	684a      	ldr	r2, [r1, #4]
 8000822:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 8000826:	d06f      	beq.n	8000908 <HAL_GPIO_Init+0x1c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000828:	4d3d      	ldr	r5, [pc, #244]	; (8000920 <HAL_GPIO_Init+0x1dc>)
 800082a:	68ea      	ldr	r2, [r5, #12]
 800082c:	4313      	orrs	r3, r2
 800082e:	60eb      	str	r3, [r5, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000830:	3401      	adds	r4, #1
 8000832:	2c0f      	cmp	r4, #15
 8000834:	d86e      	bhi.n	8000914 <HAL_GPIO_Init+0x1d0>
    ioposition = (0x01U << position);
 8000836:	2201      	movs	r2, #1
 8000838:	40a2      	lsls	r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800083a:	680b      	ldr	r3, [r1, #0]
 800083c:	4013      	ands	r3, r2
    if (iocurrent == ioposition)
 800083e:	429a      	cmp	r2, r3
 8000840:	d1f6      	bne.n	8000830 <HAL_GPIO_Init+0xec>
      switch (GPIO_Init->Mode)
 8000842:	684d      	ldr	r5, [r1, #4]
 8000844:	2d12      	cmp	r5, #18
 8000846:	d030      	beq.n	80008aa <HAL_GPIO_Init+0x166>
 8000848:	d80b      	bhi.n	8000862 <HAL_GPIO_Init+0x11e>
 800084a:	2d02      	cmp	r5, #2
 800084c:	d02a      	beq.n	80008a4 <HAL_GPIO_Init+0x160>
 800084e:	f67f af7e 	bls.w	800074e <HAL_GPIO_Init+0xa>
 8000852:	2d03      	cmp	r5, #3
 8000854:	d02f      	beq.n	80008b6 <HAL_GPIO_Init+0x172>
 8000856:	2d11      	cmp	r5, #17
 8000858:	f47f af7f 	bne.w	800075a <HAL_GPIO_Init+0x16>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800085c:	68ce      	ldr	r6, [r1, #12]
 800085e:	3604      	adds	r6, #4
          break;
 8000860:	e77b      	b.n	800075a <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 8000862:	4f30      	ldr	r7, [pc, #192]	; (8000924 <HAL_GPIO_Init+0x1e0>)
 8000864:	42bd      	cmp	r5, r7
 8000866:	d016      	beq.n	8000896 <HAL_GPIO_Init+0x152>
 8000868:	d90c      	bls.n	8000884 <HAL_GPIO_Init+0x140>
 800086a:	4f2f      	ldr	r7, [pc, #188]	; (8000928 <HAL_GPIO_Init+0x1e4>)
 800086c:	42bd      	cmp	r5, r7
 800086e:	d012      	beq.n	8000896 <HAL_GPIO_Init+0x152>
 8000870:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000874:	42bd      	cmp	r5, r7
 8000876:	d00e      	beq.n	8000896 <HAL_GPIO_Init+0x152>
 8000878:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 800087c:	42bd      	cmp	r5, r7
 800087e:	f47f af6c 	bne.w	800075a <HAL_GPIO_Init+0x16>
 8000882:	e008      	b.n	8000896 <HAL_GPIO_Init+0x152>
 8000884:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8000888:	42bd      	cmp	r5, r7
 800088a:	d004      	beq.n	8000896 <HAL_GPIO_Init+0x152>
 800088c:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000890:	42bd      	cmp	r5, r7
 8000892:	f47f af62 	bne.w	800075a <HAL_GPIO_Init+0x16>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000896:	688d      	ldr	r5, [r1, #8]
 8000898:	b17d      	cbz	r5, 80008ba <HAL_GPIO_Init+0x176>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800089a:	2d01      	cmp	r5, #1
 800089c:	d008      	beq.n	80008b0 <HAL_GPIO_Init+0x16c>
            GPIOx->BRR = ioposition;
 800089e:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008a0:	2608      	movs	r6, #8
 80008a2:	e75a      	b.n	800075a <HAL_GPIO_Init+0x16>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80008a4:	68ce      	ldr	r6, [r1, #12]
 80008a6:	3608      	adds	r6, #8
          break;
 80008a8:	e757      	b.n	800075a <HAL_GPIO_Init+0x16>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80008aa:	68ce      	ldr	r6, [r1, #12]
 80008ac:	360c      	adds	r6, #12
          break;
 80008ae:	e754      	b.n	800075a <HAL_GPIO_Init+0x16>
            GPIOx->BSRR = ioposition;
 80008b0:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008b2:	2608      	movs	r6, #8
 80008b4:	e751      	b.n	800075a <HAL_GPIO_Init+0x16>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80008b6:	2600      	movs	r6, #0
 80008b8:	e74f      	b.n	800075a <HAL_GPIO_Init+0x16>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80008ba:	2604      	movs	r6, #4
 80008bc:	e74d      	b.n	800075a <HAL_GPIO_Init+0x16>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008be:	f100 0e04 	add.w	lr, r0, #4
 80008c2:	e74e      	b.n	8000762 <HAL_GPIO_Init+0x1e>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80008c4:	f1a4 0508 	sub.w	r5, r4, #8
 80008c8:	00ad      	lsls	r5, r5, #2
 80008ca:	e74e      	b.n	800076a <HAL_GPIO_Init+0x26>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008cc:	f04f 0e03 	mov.w	lr, #3
 80008d0:	e787      	b.n	80007e2 <HAL_GPIO_Init+0x9e>
 80008d2:	f04f 0e00 	mov.w	lr, #0
 80008d6:	e784      	b.n	80007e2 <HAL_GPIO_Init+0x9e>
 80008d8:	f04f 0e01 	mov.w	lr, #1
 80008dc:	e781      	b.n	80007e2 <HAL_GPIO_Init+0x9e>
 80008de:	f04f 0e02 	mov.w	lr, #2
 80008e2:	e77e      	b.n	80007e2 <HAL_GPIO_Init+0x9e>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80008e4:	4d0e      	ldr	r5, [pc, #56]	; (8000920 <HAL_GPIO_Init+0x1dc>)
 80008e6:	682a      	ldr	r2, [r5, #0]
 80008e8:	ea22 0203 	bic.w	r2, r2, r3
 80008ec:	602a      	str	r2, [r5, #0]
 80008ee:	e787      	b.n	8000800 <HAL_GPIO_Init+0xbc>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80008f0:	4d0b      	ldr	r5, [pc, #44]	; (8000920 <HAL_GPIO_Init+0x1dc>)
 80008f2:	686a      	ldr	r2, [r5, #4]
 80008f4:	ea22 0203 	bic.w	r2, r2, r3
 80008f8:	606a      	str	r2, [r5, #4]
 80008fa:	e789      	b.n	8000810 <HAL_GPIO_Init+0xcc>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80008fc:	4d08      	ldr	r5, [pc, #32]	; (8000920 <HAL_GPIO_Init+0x1dc>)
 80008fe:	68aa      	ldr	r2, [r5, #8]
 8000900:	ea22 0203 	bic.w	r2, r2, r3
 8000904:	60aa      	str	r2, [r5, #8]
 8000906:	e78b      	b.n	8000820 <HAL_GPIO_Init+0xdc>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000908:	4d05      	ldr	r5, [pc, #20]	; (8000920 <HAL_GPIO_Init+0x1dc>)
 800090a:	68ea      	ldr	r2, [r5, #12]
 800090c:	ea22 0303 	bic.w	r3, r2, r3
 8000910:	60eb      	str	r3, [r5, #12]
 8000912:	e78d      	b.n	8000830 <HAL_GPIO_Init+0xec>
        }
      }
    }
  }
}
 8000914:	b003      	add	sp, #12
 8000916:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000918:	40021000 	.word	0x40021000
 800091c:	40010000 	.word	0x40010000
 8000920:	40010400 	.word	0x40010400
 8000924:	10210000 	.word	0x10210000
 8000928:	10310000 	.word	0x10310000
 800092c:	40010800 	.word	0x40010800

08000930 <HAL_GPIO_DeInit>:
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00U;
 8000930:	2200      	movs	r2, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8000932:	e065      	b.n	8000a00 <HAL_GPIO_DeInit+0xd0>
    if (iocurrent)
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000934:	f100 0e04 	add.w	lr, r0, #4
 8000938:	e03d      	b.n	80009b6 <HAL_GPIO_DeInit+0x86>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 800093a:	f1a2 0608 	sub.w	r6, r2, #8
 800093e:	00b7      	lsls	r7, r6, #2

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8000940:	f8de 4000 	ldr.w	r4, [lr]
 8000944:	250f      	movs	r5, #15
 8000946:	fa05 f607 	lsl.w	r6, r5, r7
 800094a:	ea24 0406 	bic.w	r4, r4, r6
 800094e:	2604      	movs	r6, #4
 8000950:	40be      	lsls	r6, r7
 8000952:	4334      	orrs	r4, r6
 8000954:	f8ce 4000 	str.w	r4, [lr]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8000958:	68c4      	ldr	r4, [r0, #12]
 800095a:	43db      	mvns	r3, r3
 800095c:	401c      	ands	r4, r3
 800095e:	60c4      	str	r4, [r0, #12]

      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2U];
 8000960:	ea4f 0e92 	mov.w	lr, r2, lsr #2
 8000964:	f10e 0602 	add.w	r6, lr, #2
 8000968:	4c2a      	ldr	r4, [pc, #168]	; (8000a14 <HAL_GPIO_DeInit+0xe4>)
 800096a:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
      tmp &= 0x0FU << (4U * (position & 0x03U));
 800096e:	f002 0403 	and.w	r4, r2, #3
 8000972:	00a4      	lsls	r4, r4, #2
 8000974:	40a5      	lsls	r5, r4
 8000976:	402e      	ands	r6, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8000978:	4f27      	ldr	r7, [pc, #156]	; (8000a18 <HAL_GPIO_DeInit+0xe8>)
 800097a:	42b8      	cmp	r0, r7
 800097c:	d021      	beq.n	80009c2 <HAL_GPIO_DeInit+0x92>
 800097e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000982:	42b8      	cmp	r0, r7
 8000984:	d01f      	beq.n	80009c6 <HAL_GPIO_DeInit+0x96>
 8000986:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800098a:	42b8      	cmp	r0, r7
 800098c:	d01d      	beq.n	80009ca <HAL_GPIO_DeInit+0x9a>
 800098e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000992:	42b8      	cmp	r0, r7
 8000994:	d013      	beq.n	80009be <HAL_GPIO_DeInit+0x8e>
 8000996:	2704      	movs	r7, #4
 8000998:	fa07 f404 	lsl.w	r4, r7, r4
 800099c:	42a6      	cmp	r6, r4
 800099e:	d016      	beq.n	80009ce <HAL_GPIO_DeInit+0x9e>
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
      }
    }

    position++;
 80009a0:	3201      	adds	r2, #1
  while ((GPIO_Pin >> position) != 0U)
 80009a2:	fa31 f302 	lsrs.w	r3, r1, r2
 80009a6:	d029      	beq.n	80009fc <HAL_GPIO_DeInit+0xcc>
    iocurrent = (GPIO_Pin) & (1U << position);
 80009a8:	2301      	movs	r3, #1
 80009aa:	4093      	lsls	r3, r2
    if (iocurrent)
 80009ac:	400b      	ands	r3, r1
 80009ae:	d0f7      	beq.n	80009a0 <HAL_GPIO_DeInit+0x70>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009b0:	2bff      	cmp	r3, #255	; 0xff
 80009b2:	d8bf      	bhi.n	8000934 <HAL_GPIO_DeInit+0x4>
 80009b4:	4686      	mov	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80009b6:	2bff      	cmp	r3, #255	; 0xff
 80009b8:	d8bf      	bhi.n	800093a <HAL_GPIO_DeInit+0xa>
 80009ba:	0097      	lsls	r7, r2, #2
 80009bc:	e7c0      	b.n	8000940 <HAL_GPIO_DeInit+0x10>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80009be:	2703      	movs	r7, #3
 80009c0:	e7ea      	b.n	8000998 <HAL_GPIO_DeInit+0x68>
 80009c2:	2700      	movs	r7, #0
 80009c4:	e7e8      	b.n	8000998 <HAL_GPIO_DeInit+0x68>
 80009c6:	2701      	movs	r7, #1
 80009c8:	e7e6      	b.n	8000998 <HAL_GPIO_DeInit+0x68>
 80009ca:	2702      	movs	r7, #2
 80009cc:	e7e4      	b.n	8000998 <HAL_GPIO_DeInit+0x68>
        CLEAR_BIT(AFIO->EXTICR[position >> 2U], tmp);
 80009ce:	4f11      	ldr	r7, [pc, #68]	; (8000a14 <HAL_GPIO_DeInit+0xe4>)
 80009d0:	f10e 0402 	add.w	r4, lr, #2
 80009d4:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
 80009d8:	ea26 0505 	bic.w	r5, r6, r5
 80009dc:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80009e0:	4c0e      	ldr	r4, [pc, #56]	; (8000a1c <HAL_GPIO_DeInit+0xec>)
 80009e2:	6825      	ldr	r5, [r4, #0]
 80009e4:	401d      	ands	r5, r3
 80009e6:	6025      	str	r5, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80009e8:	6865      	ldr	r5, [r4, #4]
 80009ea:	401d      	ands	r5, r3
 80009ec:	6065      	str	r5, [r4, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80009ee:	68a5      	ldr	r5, [r4, #8]
 80009f0:	401d      	ands	r5, r3
 80009f2:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80009f4:	68e5      	ldr	r5, [r4, #12]
 80009f6:	402b      	ands	r3, r5
 80009f8:	60e3      	str	r3, [r4, #12]
 80009fa:	e7d1      	b.n	80009a0 <HAL_GPIO_DeInit+0x70>
  }
}
 80009fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    position++;
 80009fe:	3201      	adds	r2, #1
  while ((GPIO_Pin >> position) != 0U)
 8000a00:	fa31 f302 	lsrs.w	r3, r1, r2
 8000a04:	d005      	beq.n	8000a12 <HAL_GPIO_DeInit+0xe2>
    iocurrent = (GPIO_Pin) & (1U << position);
 8000a06:	2301      	movs	r3, #1
 8000a08:	4093      	lsls	r3, r2
    if (iocurrent)
 8000a0a:	400b      	ands	r3, r1
 8000a0c:	d0f7      	beq.n	80009fe <HAL_GPIO_DeInit+0xce>
{
 8000a0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a10:	e7ce      	b.n	80009b0 <HAL_GPIO_DeInit+0x80>
 8000a12:	4770      	bx	lr
 8000a14:	40010000 	.word	0x40010000
 8000a18:	40010800 	.word	0x40010800
 8000a1c:	40010400 	.word	0x40010400

08000a20 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000a20:	6883      	ldr	r3, [r0, #8]
 8000a22:	4219      	tst	r1, r3
 8000a24:	d101      	bne.n	8000a2a <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000a26:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8000a28:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8000a2a:	2001      	movs	r0, #1
 8000a2c:	4770      	bx	lr

08000a2e <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a2e:	b912      	cbnz	r2, 8000a36 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000a30:	0409      	lsls	r1, r1, #16
 8000a32:	6101      	str	r1, [r0, #16]
 8000a34:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8000a36:	6101      	str	r1, [r0, #16]
 8000a38:	4770      	bx	lr

08000a3a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000a3a:	68c3      	ldr	r3, [r0, #12]
 8000a3c:	4059      	eors	r1, r3
 8000a3e:	60c1      	str	r1, [r0, #12]
 8000a40:	4770      	bx	lr

08000a42 <HAL_GPIO_LockPin>:
* @param  GPIO_Pin: specifies the port bit to be locked.
*         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
* @retval None
*/
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000a42:	b082      	sub	sp, #8
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 8000a44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a48:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_LOCK_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  SET_BIT(tmp, GPIO_Pin);
 8000a4a:	9b01      	ldr	r3, [sp, #4]
 8000a4c:	430b      	orrs	r3, r1
 8000a4e:	9301      	str	r3, [sp, #4]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 8000a50:	9b01      	ldr	r3, [sp, #4]
 8000a52:	6183      	str	r3, [r0, #24]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
 8000a54:	6181      	str	r1, [r0, #24]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 8000a56:	9b01      	ldr	r3, [sp, #4]
 8000a58:	6183      	str	r3, [r0, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8000a5a:	6983      	ldr	r3, [r0, #24]
 8000a5c:	9301      	str	r3, [sp, #4]

  if ((uint32_t)(GPIOx->LCKR & GPIO_LCKR_LCKK))
 8000a5e:	6983      	ldr	r3, [r0, #24]
 8000a60:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000a64:	d102      	bne.n	8000a6c <HAL_GPIO_LockPin+0x2a>
  {
    return HAL_OK;
  }
  else
  {
    return HAL_ERROR;
 8000a66:	2001      	movs	r0, #1
  }
}
 8000a68:	b002      	add	sp, #8
 8000a6a:	4770      	bx	lr
    return HAL_OK;
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	e7fb      	b.n	8000a68 <HAL_GPIO_LockPin+0x26>

08000a70 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a70:	4770      	bx	lr

08000a72 <HAL_GPIO_EXTI_IRQHandler>:
{
 8000a72:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000a74:	4b04      	ldr	r3, [pc, #16]	; (8000a88 <HAL_GPIO_EXTI_IRQHandler+0x16>)
 8000a76:	695b      	ldr	r3, [r3, #20]
 8000a78:	4203      	tst	r3, r0
 8000a7a:	d100      	bne.n	8000a7e <HAL_GPIO_EXTI_IRQHandler+0xc>
 8000a7c:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000a7e:	4b02      	ldr	r3, [pc, #8]	; (8000a88 <HAL_GPIO_EXTI_IRQHandler+0x16>)
 8000a80:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000a82:	f7ff fff5 	bl	8000a70 <HAL_GPIO_EXTI_Callback>
}
 8000a86:	e7f9      	b.n	8000a7c <HAL_GPIO_EXTI_IRQHandler+0xa>
 8000a88:	40010400 	.word	0x40010400

08000a8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000a8c:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000a8e:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <RCC_Delay+0x24>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a08      	ldr	r2, [pc, #32]	; (8000ab4 <RCC_Delay+0x28>)
 8000a94:	fba2 2303 	umull	r2, r3, r2, r3
 8000a98:	0a5b      	lsrs	r3, r3, #9
 8000a9a:	fb00 f003 	mul.w	r0, r0, r3
 8000a9e:	9001      	str	r0, [sp, #4]
 8000aa0:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000aa2:	9b01      	ldr	r3, [sp, #4]
 8000aa4:	1e5a      	subs	r2, r3, #1
 8000aa6:	9201      	str	r2, [sp, #4]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d1f9      	bne.n	8000aa0 <RCC_Delay+0x14>
}
 8000aac:	b002      	add	sp, #8
 8000aae:	4770      	bx	lr
 8000ab0:	20000000 	.word	0x20000000
 8000ab4:	10624dd3 	.word	0x10624dd3

08000ab8 <HAL_RCC_DeInit>:
{
 8000ab8:	b570      	push	{r4, r5, r6, lr}
  tickstart = HAL_GetTick();
 8000aba:	f7ff fca1 	bl	8000400 <HAL_GetTick>
 8000abe:	4604      	mov	r4, r0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000ac0:	4a35      	ldr	r2, [pc, #212]	; (8000b98 <HAL_RCC_DeInit+0xe0>)
 8000ac2:	6813      	ldr	r3, [r2, #0]
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6013      	str	r3, [r2, #0]
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000aca:	4b33      	ldr	r3, [pc, #204]	; (8000b98 <HAL_RCC_DeInit+0xe0>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f013 0f02 	tst.w	r3, #2
 8000ad2:	d107      	bne.n	8000ae4 <HAL_RCC_DeInit+0x2c>
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ad4:	f7ff fc94 	bl	8000400 <HAL_GetTick>
 8000ad8:	1b00      	subs	r0, r0, r4
 8000ada:	2802      	cmp	r0, #2
 8000adc:	d9f5      	bls.n	8000aca <HAL_RCC_DeInit+0x12>
      return HAL_TIMEOUT;
 8000ade:	2403      	movs	r4, #3
}
 8000ae0:	4620      	mov	r0, r4
 8000ae2:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 8000ae4:	4d2c      	ldr	r5, [pc, #176]	; (8000b98 <HAL_RCC_DeInit+0xe0>)
 8000ae6:	682b      	ldr	r3, [r5, #0]
 8000ae8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af0:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8000af2:	f7ff fc85 	bl	8000400 <HAL_GetTick>
 8000af6:	4604      	mov	r4, r0
  CLEAR_REG(RCC->CFGR);
 8000af8:	2300      	movs	r3, #0
 8000afa:	606b      	str	r3, [r5, #4]
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8000afc:	4b26      	ldr	r3, [pc, #152]	; (8000b98 <HAL_RCC_DeInit+0xe0>)
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	f013 0f0c 	tst.w	r3, #12
 8000b04:	d008      	beq.n	8000b18 <HAL_RCC_DeInit+0x60>
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b06:	f7ff fc7b 	bl	8000400 <HAL_GetTick>
 8000b0a:	1b00      	subs	r0, r0, r4
 8000b0c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000b10:	4298      	cmp	r0, r3
 8000b12:	d9f3      	bls.n	8000afc <HAL_RCC_DeInit+0x44>
      return HAL_TIMEOUT;
 8000b14:	2403      	movs	r4, #3
 8000b16:	e7e3      	b.n	8000ae0 <HAL_RCC_DeInit+0x28>
  SystemCoreClock = HSI_VALUE;
 8000b18:	4a20      	ldr	r2, [pc, #128]	; (8000b9c <HAL_RCC_DeInit+0xe4>)
 8000b1a:	4b21      	ldr	r3, [pc, #132]	; (8000ba0 <HAL_RCC_DeInit+0xe8>)
 8000b1c:	601a      	str	r2, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b1e:	200f      	movs	r0, #15
 8000b20:	f7ff fc2c 	bl	800037c <HAL_InitTick>
 8000b24:	4604      	mov	r4, r0
 8000b26:	b108      	cbz	r0, 8000b2c <HAL_RCC_DeInit+0x74>
    return HAL_ERROR;
 8000b28:	2401      	movs	r4, #1
 8000b2a:	e7d9      	b.n	8000ae0 <HAL_RCC_DeInit+0x28>
  tickstart = HAL_GetTick();
 8000b2c:	f7ff fc68 	bl	8000400 <HAL_GetTick>
 8000b30:	4605      	mov	r5, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8000b32:	4a19      	ldr	r2, [pc, #100]	; (8000b98 <HAL_RCC_DeInit+0xe0>)
 8000b34:	6813      	ldr	r3, [r2, #0]
 8000b36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000b3a:	6013      	str	r3, [r2, #0]
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8000b3c:	4b16      	ldr	r3, [pc, #88]	; (8000b98 <HAL_RCC_DeInit+0xe0>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000b44:	d006      	beq.n	8000b54 <HAL_RCC_DeInit+0x9c>
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b46:	f7ff fc5b 	bl	8000400 <HAL_GetTick>
 8000b4a:	1b40      	subs	r0, r0, r5
 8000b4c:	2802      	cmp	r0, #2
 8000b4e:	d9f5      	bls.n	8000b3c <HAL_RCC_DeInit+0x84>
      return HAL_TIMEOUT;
 8000b50:	2403      	movs	r4, #3
 8000b52:	e7c5      	b.n	8000ae0 <HAL_RCC_DeInit+0x28>
  CLEAR_REG(RCC->CFGR);
 8000b54:	4e10      	ldr	r6, [pc, #64]	; (8000b98 <HAL_RCC_DeInit+0xe0>)
 8000b56:	2300      	movs	r3, #0
 8000b58:	6073      	str	r3, [r6, #4]
  tickstart = HAL_GetTick();
 8000b5a:	f7ff fc51 	bl	8000400 <HAL_GetTick>
 8000b5e:	4605      	mov	r5, r0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 8000b60:	6833      	ldr	r3, [r6, #0]
 8000b62:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000b66:	6033      	str	r3, [r6, #0]
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8000b68:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <HAL_RCC_DeInit+0xe0>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000b70:	d006      	beq.n	8000b80 <HAL_RCC_DeInit+0xc8>
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b72:	f7ff fc45 	bl	8000400 <HAL_GetTick>
 8000b76:	1b40      	subs	r0, r0, r5
 8000b78:	2864      	cmp	r0, #100	; 0x64
 8000b7a:	d9f5      	bls.n	8000b68 <HAL_RCC_DeInit+0xb0>
      return HAL_TIMEOUT;
 8000b7c:	2403      	movs	r4, #3
 8000b7e:	e7af      	b.n	8000ae0 <HAL_RCC_DeInit+0x28>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8000b80:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <HAL_RCC_DeInit+0xe0>)
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000b88:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8000b8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b8c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000b90:	625a      	str	r2, [r3, #36]	; 0x24
  CLEAR_REG(RCC->CIR);
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8000b96:	e7a3      	b.n	8000ae0 <HAL_RCC_DeInit+0x28>
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	007a1200 	.word	0x007a1200
 8000ba0:	20000000 	.word	0x20000000

08000ba4 <HAL_RCC_OscConfig>:
{
 8000ba4:	b570      	push	{r4, r5, r6, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000baa:	6803      	ldr	r3, [r0, #0]
 8000bac:	f013 0f01 	tst.w	r3, #1
 8000bb0:	d03d      	beq.n	8000c2e <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000bb2:	4bac      	ldr	r3, [pc, #688]	; (8000e64 <HAL_RCC_OscConfig+0x2c0>)
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	f003 030c 	and.w	r3, r3, #12
 8000bba:	2b04      	cmp	r3, #4
 8000bbc:	d02e      	beq.n	8000c1c <HAL_RCC_OscConfig+0x78>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bbe:	4ba9      	ldr	r3, [pc, #676]	; (8000e64 <HAL_RCC_OscConfig+0x2c0>)
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	f003 030c 	and.w	r3, r3, #12
 8000bc6:	2b08      	cmp	r3, #8
 8000bc8:	d023      	beq.n	8000c12 <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bca:	6863      	ldr	r3, [r4, #4]
 8000bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bd0:	d051      	beq.n	8000c76 <HAL_RCC_OscConfig+0xd2>
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d155      	bne.n	8000c82 <HAL_RCC_OscConfig+0xde>
 8000bd6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000bda:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000bec:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bee:	6863      	ldr	r3, [r4, #4]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d060      	beq.n	8000cb6 <HAL_RCC_OscConfig+0x112>
        tickstart = HAL_GetTick();
 8000bf4:	f7ff fc04 	bl	8000400 <HAL_GetTick>
 8000bf8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bfa:	4b9a      	ldr	r3, [pc, #616]	; (8000e64 <HAL_RCC_OscConfig+0x2c0>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000c02:	d114      	bne.n	8000c2e <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c04:	f7ff fbfc 	bl	8000400 <HAL_GetTick>
 8000c08:	1b40      	subs	r0, r0, r5
 8000c0a:	2864      	cmp	r0, #100	; 0x64
 8000c0c:	d9f5      	bls.n	8000bfa <HAL_RCC_OscConfig+0x56>
            return HAL_TIMEOUT;
 8000c0e:	2003      	movs	r0, #3
 8000c10:	e1af      	b.n	8000f72 <HAL_RCC_OscConfig+0x3ce>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c12:	4b94      	ldr	r3, [pc, #592]	; (8000e64 <HAL_RCC_OscConfig+0x2c0>)
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000c1a:	d0d6      	beq.n	8000bca <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c1c:	4b91      	ldr	r3, [pc, #580]	; (8000e64 <HAL_RCC_OscConfig+0x2c0>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000c24:	d003      	beq.n	8000c2e <HAL_RCC_OscConfig+0x8a>
 8000c26:	6863      	ldr	r3, [r4, #4]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	f000 819f 	beq.w	8000f6c <HAL_RCC_OscConfig+0x3c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c2e:	6823      	ldr	r3, [r4, #0]
 8000c30:	f013 0f02 	tst.w	r3, #2
 8000c34:	d065      	beq.n	8000d02 <HAL_RCC_OscConfig+0x15e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000c36:	4b8b      	ldr	r3, [pc, #556]	; (8000e64 <HAL_RCC_OscConfig+0x2c0>)
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	f013 0f0c 	tst.w	r3, #12
 8000c3e:	d04e      	beq.n	8000cde <HAL_RCC_OscConfig+0x13a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c40:	4b88      	ldr	r3, [pc, #544]	; (8000e64 <HAL_RCC_OscConfig+0x2c0>)
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f003 030c 	and.w	r3, r3, #12
 8000c48:	2b08      	cmp	r3, #8
 8000c4a:	d043      	beq.n	8000cd4 <HAL_RCC_OscConfig+0x130>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c4c:	6923      	ldr	r3, [r4, #16]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d079      	beq.n	8000d46 <HAL_RCC_OscConfig+0x1a2>
        __HAL_RCC_HSI_ENABLE();
 8000c52:	2201      	movs	r2, #1
 8000c54:	4b84      	ldr	r3, [pc, #528]	; (8000e68 <HAL_RCC_OscConfig+0x2c4>)
 8000c56:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000c58:	f7ff fbd2 	bl	8000400 <HAL_GetTick>
 8000c5c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c5e:	4b81      	ldr	r3, [pc, #516]	; (8000e64 <HAL_RCC_OscConfig+0x2c0>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f013 0f02 	tst.w	r3, #2
 8000c66:	d165      	bne.n	8000d34 <HAL_RCC_OscConfig+0x190>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c68:	f7ff fbca 	bl	8000400 <HAL_GetTick>
 8000c6c:	1b40      	subs	r0, r0, r5
 8000c6e:	2802      	cmp	r0, #2
 8000c70:	d9f5      	bls.n	8000c5e <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
 8000c72:	2003      	movs	r0, #3
 8000c74:	e17d      	b.n	8000f72 <HAL_RCC_OscConfig+0x3ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c76:	4a7b      	ldr	r2, [pc, #492]	; (8000e64 <HAL_RCC_OscConfig+0x2c0>)
 8000c78:	6813      	ldr	r3, [r2, #0]
 8000c7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c7e:	6013      	str	r3, [r2, #0]
 8000c80:	e7b5      	b.n	8000bee <HAL_RCC_OscConfig+0x4a>
 8000c82:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c86:	d009      	beq.n	8000c9c <HAL_RCC_OscConfig+0xf8>
 8000c88:	4b76      	ldr	r3, [pc, #472]	; (8000e64 <HAL_RCC_OscConfig+0x2c0>)
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	e7a8      	b.n	8000bee <HAL_RCC_OscConfig+0x4a>
 8000c9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000ca0:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	e79b      	b.n	8000bee <HAL_RCC_OscConfig+0x4a>
        tickstart = HAL_GetTick();
 8000cb6:	f7ff fba3 	bl	8000400 <HAL_GetTick>
 8000cba:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cbc:	4b69      	ldr	r3, [pc, #420]	; (8000e64 <HAL_RCC_OscConfig+0x2c0>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000cc4:	d0b3      	beq.n	8000c2e <HAL_RCC_OscConfig+0x8a>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cc6:	f7ff fb9b 	bl	8000400 <HAL_GetTick>
 8000cca:	1b40      	subs	r0, r0, r5
 8000ccc:	2864      	cmp	r0, #100	; 0x64
 8000cce:	d9f5      	bls.n	8000cbc <HAL_RCC_OscConfig+0x118>
            return HAL_TIMEOUT;
 8000cd0:	2003      	movs	r0, #3
 8000cd2:	e14e      	b.n	8000f72 <HAL_RCC_OscConfig+0x3ce>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000cd4:	4b63      	ldr	r3, [pc, #396]	; (8000e64 <HAL_RCC_OscConfig+0x2c0>)
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000cdc:	d1b6      	bne.n	8000c4c <HAL_RCC_OscConfig+0xa8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cde:	4b61      	ldr	r3, [pc, #388]	; (8000e64 <HAL_RCC_OscConfig+0x2c0>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f013 0f02 	tst.w	r3, #2
 8000ce6:	d004      	beq.n	8000cf2 <HAL_RCC_OscConfig+0x14e>
 8000ce8:	6923      	ldr	r3, [r4, #16]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d001      	beq.n	8000cf2 <HAL_RCC_OscConfig+0x14e>
        return HAL_ERROR;
 8000cee:	2001      	movs	r0, #1
 8000cf0:	e13f      	b.n	8000f72 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cf2:	4a5c      	ldr	r2, [pc, #368]	; (8000e64 <HAL_RCC_OscConfig+0x2c0>)
 8000cf4:	6813      	ldr	r3, [r2, #0]
 8000cf6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000cfa:	6961      	ldr	r1, [r4, #20]
 8000cfc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000d00:	6013      	str	r3, [r2, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d02:	6823      	ldr	r3, [r4, #0]
 8000d04:	f013 0f08 	tst.w	r3, #8
 8000d08:	d032      	beq.n	8000d70 <HAL_RCC_OscConfig+0x1cc>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d0a:	69a3      	ldr	r3, [r4, #24]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d06e      	beq.n	8000dee <HAL_RCC_OscConfig+0x24a>
      __HAL_RCC_LSI_ENABLE();
 8000d10:	2201      	movs	r2, #1
 8000d12:	4b56      	ldr	r3, [pc, #344]	; (8000e6c <HAL_RCC_OscConfig+0x2c8>)
 8000d14:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000d16:	f7ff fb73 	bl	8000400 <HAL_GetTick>
 8000d1a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d1c:	4b51      	ldr	r3, [pc, #324]	; (8000e64 <HAL_RCC_OscConfig+0x2c0>)
 8000d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d20:	f013 0f02 	tst.w	r3, #2
 8000d24:	d121      	bne.n	8000d6a <HAL_RCC_OscConfig+0x1c6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d26:	f7ff fb6b 	bl	8000400 <HAL_GetTick>
 8000d2a:	1b40      	subs	r0, r0, r5
 8000d2c:	2802      	cmp	r0, #2
 8000d2e:	d9f5      	bls.n	8000d1c <HAL_RCC_OscConfig+0x178>
          return HAL_TIMEOUT;
 8000d30:	2003      	movs	r0, #3
 8000d32:	e11e      	b.n	8000f72 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d34:	4a4b      	ldr	r2, [pc, #300]	; (8000e64 <HAL_RCC_OscConfig+0x2c0>)
 8000d36:	6813      	ldr	r3, [r2, #0]
 8000d38:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000d3c:	6961      	ldr	r1, [r4, #20]
 8000d3e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000d42:	6013      	str	r3, [r2, #0]
 8000d44:	e7dd      	b.n	8000d02 <HAL_RCC_OscConfig+0x15e>
        __HAL_RCC_HSI_DISABLE();
 8000d46:	2200      	movs	r2, #0
 8000d48:	4b47      	ldr	r3, [pc, #284]	; (8000e68 <HAL_RCC_OscConfig+0x2c4>)
 8000d4a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d4c:	f7ff fb58 	bl	8000400 <HAL_GetTick>
 8000d50:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d52:	4b44      	ldr	r3, [pc, #272]	; (8000e64 <HAL_RCC_OscConfig+0x2c0>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f013 0f02 	tst.w	r3, #2
 8000d5a:	d0d2      	beq.n	8000d02 <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d5c:	f7ff fb50 	bl	8000400 <HAL_GetTick>
 8000d60:	1b40      	subs	r0, r0, r5
 8000d62:	2802      	cmp	r0, #2
 8000d64:	d9f5      	bls.n	8000d52 <HAL_RCC_OscConfig+0x1ae>
            return HAL_TIMEOUT;
 8000d66:	2003      	movs	r0, #3
 8000d68:	e103      	b.n	8000f72 <HAL_RCC_OscConfig+0x3ce>
      RCC_Delay(1);
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	f7ff fe8e 	bl	8000a8c <RCC_Delay>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d70:	6823      	ldr	r3, [r4, #0]
 8000d72:	f013 0f04 	tst.w	r3, #4
 8000d76:	f000 8099 	beq.w	8000eac <HAL_RCC_OscConfig+0x308>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d7a:	4b3a      	ldr	r3, [pc, #232]	; (8000e64 <HAL_RCC_OscConfig+0x2c0>)
 8000d7c:	69db      	ldr	r3, [r3, #28]
 8000d7e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000d82:	d146      	bne.n	8000e12 <HAL_RCC_OscConfig+0x26e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d84:	4b37      	ldr	r3, [pc, #220]	; (8000e64 <HAL_RCC_OscConfig+0x2c0>)
 8000d86:	69da      	ldr	r2, [r3, #28]
 8000d88:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d8c:	61da      	str	r2, [r3, #28]
 8000d8e:	69db      	ldr	r3, [r3, #28]
 8000d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d94:	9301      	str	r3, [sp, #4]
 8000d96:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000d98:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d9a:	4b35      	ldr	r3, [pc, #212]	; (8000e70 <HAL_RCC_OscConfig+0x2cc>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000da2:	d038      	beq.n	8000e16 <HAL_RCC_OscConfig+0x272>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000da4:	68e3      	ldr	r3, [r4, #12]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d049      	beq.n	8000e3e <HAL_RCC_OscConfig+0x29a>
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d14d      	bne.n	8000e4a <HAL_RCC_OscConfig+0x2a6>
 8000dae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000db2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000db6:	6a1a      	ldr	r2, [r3, #32]
 8000db8:	f022 0201 	bic.w	r2, r2, #1
 8000dbc:	621a      	str	r2, [r3, #32]
 8000dbe:	6a1a      	ldr	r2, [r3, #32]
 8000dc0:	f022 0204 	bic.w	r2, r2, #4
 8000dc4:	621a      	str	r2, [r3, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000dc6:	68e3      	ldr	r3, [r4, #12]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d05d      	beq.n	8000e88 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8000dcc:	f7ff fb18 	bl	8000400 <HAL_GetTick>
 8000dd0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dd2:	4b24      	ldr	r3, [pc, #144]	; (8000e64 <HAL_RCC_OscConfig+0x2c0>)
 8000dd4:	6a1b      	ldr	r3, [r3, #32]
 8000dd6:	f013 0f02 	tst.w	r3, #2
 8000dda:	d166      	bne.n	8000eaa <HAL_RCC_OscConfig+0x306>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ddc:	f7ff fb10 	bl	8000400 <HAL_GetTick>
 8000de0:	1b80      	subs	r0, r0, r6
 8000de2:	f241 3388 	movw	r3, #5000	; 0x1388
 8000de6:	4298      	cmp	r0, r3
 8000de8:	d9f3      	bls.n	8000dd2 <HAL_RCC_OscConfig+0x22e>
          return HAL_TIMEOUT;
 8000dea:	2003      	movs	r0, #3
 8000dec:	e0c1      	b.n	8000f72 <HAL_RCC_OscConfig+0x3ce>
      __HAL_RCC_LSI_DISABLE();
 8000dee:	2200      	movs	r2, #0
 8000df0:	4b1e      	ldr	r3, [pc, #120]	; (8000e6c <HAL_RCC_OscConfig+0x2c8>)
 8000df2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000df4:	f7ff fb04 	bl	8000400 <HAL_GetTick>
 8000df8:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dfa:	4b1a      	ldr	r3, [pc, #104]	; (8000e64 <HAL_RCC_OscConfig+0x2c0>)
 8000dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dfe:	f013 0f02 	tst.w	r3, #2
 8000e02:	d0b5      	beq.n	8000d70 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e04:	f7ff fafc 	bl	8000400 <HAL_GetTick>
 8000e08:	1b40      	subs	r0, r0, r5
 8000e0a:	2802      	cmp	r0, #2
 8000e0c:	d9f5      	bls.n	8000dfa <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 8000e0e:	2003      	movs	r0, #3
 8000e10:	e0af      	b.n	8000f72 <HAL_RCC_OscConfig+0x3ce>
    FlagStatus       pwrclkchanged = RESET;
 8000e12:	2500      	movs	r5, #0
 8000e14:	e7c1      	b.n	8000d9a <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e16:	4a16      	ldr	r2, [pc, #88]	; (8000e70 <HAL_RCC_OscConfig+0x2cc>)
 8000e18:	6813      	ldr	r3, [r2, #0]
 8000e1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e1e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000e20:	f7ff faee 	bl	8000400 <HAL_GetTick>
 8000e24:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e26:	4b12      	ldr	r3, [pc, #72]	; (8000e70 <HAL_RCC_OscConfig+0x2cc>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000e2e:	d1b9      	bne.n	8000da4 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e30:	f7ff fae6 	bl	8000400 <HAL_GetTick>
 8000e34:	1b80      	subs	r0, r0, r6
 8000e36:	2864      	cmp	r0, #100	; 0x64
 8000e38:	d9f5      	bls.n	8000e26 <HAL_RCC_OscConfig+0x282>
          return HAL_TIMEOUT;
 8000e3a:	2003      	movs	r0, #3
 8000e3c:	e099      	b.n	8000f72 <HAL_RCC_OscConfig+0x3ce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e3e:	4a09      	ldr	r2, [pc, #36]	; (8000e64 <HAL_RCC_OscConfig+0x2c0>)
 8000e40:	6a13      	ldr	r3, [r2, #32]
 8000e42:	f043 0301 	orr.w	r3, r3, #1
 8000e46:	6213      	str	r3, [r2, #32]
 8000e48:	e7bd      	b.n	8000dc6 <HAL_RCC_OscConfig+0x222>
 8000e4a:	2b05      	cmp	r3, #5
 8000e4c:	d012      	beq.n	8000e74 <HAL_RCC_OscConfig+0x2d0>
 8000e4e:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <HAL_RCC_OscConfig+0x2c0>)
 8000e50:	6a1a      	ldr	r2, [r3, #32]
 8000e52:	f022 0201 	bic.w	r2, r2, #1
 8000e56:	621a      	str	r2, [r3, #32]
 8000e58:	6a1a      	ldr	r2, [r3, #32]
 8000e5a:	f022 0204 	bic.w	r2, r2, #4
 8000e5e:	621a      	str	r2, [r3, #32]
 8000e60:	e7b1      	b.n	8000dc6 <HAL_RCC_OscConfig+0x222>
 8000e62:	bf00      	nop
 8000e64:	40021000 	.word	0x40021000
 8000e68:	42420000 	.word	0x42420000
 8000e6c:	42420480 	.word	0x42420480
 8000e70:	40007000 	.word	0x40007000
 8000e74:	4b41      	ldr	r3, [pc, #260]	; (8000f7c <HAL_RCC_OscConfig+0x3d8>)
 8000e76:	6a1a      	ldr	r2, [r3, #32]
 8000e78:	f042 0204 	orr.w	r2, r2, #4
 8000e7c:	621a      	str	r2, [r3, #32]
 8000e7e:	6a1a      	ldr	r2, [r3, #32]
 8000e80:	f042 0201 	orr.w	r2, r2, #1
 8000e84:	621a      	str	r2, [r3, #32]
 8000e86:	e79e      	b.n	8000dc6 <HAL_RCC_OscConfig+0x222>
      tickstart = HAL_GetTick();
 8000e88:	f7ff faba 	bl	8000400 <HAL_GetTick>
 8000e8c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e8e:	4b3b      	ldr	r3, [pc, #236]	; (8000f7c <HAL_RCC_OscConfig+0x3d8>)
 8000e90:	6a1b      	ldr	r3, [r3, #32]
 8000e92:	f013 0f02 	tst.w	r3, #2
 8000e96:	d008      	beq.n	8000eaa <HAL_RCC_OscConfig+0x306>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e98:	f7ff fab2 	bl	8000400 <HAL_GetTick>
 8000e9c:	1b80      	subs	r0, r0, r6
 8000e9e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ea2:	4298      	cmp	r0, r3
 8000ea4:	d9f3      	bls.n	8000e8e <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 8000ea6:	2003      	movs	r0, #3
 8000ea8:	e063      	b.n	8000f72 <HAL_RCC_OscConfig+0x3ce>
    if(pwrclkchanged == SET)
 8000eaa:	b9e5      	cbnz	r5, 8000ee6 <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000eac:	69e3      	ldr	r3, [r4, #28]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d05e      	beq.n	8000f70 <HAL_RCC_OscConfig+0x3cc>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000eb2:	4a32      	ldr	r2, [pc, #200]	; (8000f7c <HAL_RCC_OscConfig+0x3d8>)
 8000eb4:	6852      	ldr	r2, [r2, #4]
 8000eb6:	f002 020c 	and.w	r2, r2, #12
 8000eba:	2a08      	cmp	r2, #8
 8000ebc:	d05b      	beq.n	8000f76 <HAL_RCC_OscConfig+0x3d2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d017      	beq.n	8000ef2 <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	4b2e      	ldr	r3, [pc, #184]	; (8000f80 <HAL_RCC_OscConfig+0x3dc>)
 8000ec6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ec8:	f7ff fa9a 	bl	8000400 <HAL_GetTick>
 8000ecc:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ece:	4b2b      	ldr	r3, [pc, #172]	; (8000f7c <HAL_RCC_OscConfig+0x3d8>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000ed6:	d047      	beq.n	8000f68 <HAL_RCC_OscConfig+0x3c4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ed8:	f7ff fa92 	bl	8000400 <HAL_GetTick>
 8000edc:	1b00      	subs	r0, r0, r4
 8000ede:	2802      	cmp	r0, #2
 8000ee0:	d9f5      	bls.n	8000ece <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8000ee2:	2003      	movs	r0, #3
 8000ee4:	e045      	b.n	8000f72 <HAL_RCC_OscConfig+0x3ce>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ee6:	4a25      	ldr	r2, [pc, #148]	; (8000f7c <HAL_RCC_OscConfig+0x3d8>)
 8000ee8:	69d3      	ldr	r3, [r2, #28]
 8000eea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000eee:	61d3      	str	r3, [r2, #28]
 8000ef0:	e7dc      	b.n	8000eac <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	4b22      	ldr	r3, [pc, #136]	; (8000f80 <HAL_RCC_OscConfig+0x3dc>)
 8000ef6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ef8:	f7ff fa82 	bl	8000400 <HAL_GetTick>
 8000efc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000efe:	4b1f      	ldr	r3, [pc, #124]	; (8000f7c <HAL_RCC_OscConfig+0x3d8>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000f06:	d006      	beq.n	8000f16 <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f08:	f7ff fa7a 	bl	8000400 <HAL_GetTick>
 8000f0c:	1b40      	subs	r0, r0, r5
 8000f0e:	2802      	cmp	r0, #2
 8000f10:	d9f5      	bls.n	8000efe <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8000f12:	2003      	movs	r0, #3
 8000f14:	e02d      	b.n	8000f72 <HAL_RCC_OscConfig+0x3ce>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f16:	6a23      	ldr	r3, [r4, #32]
 8000f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f1c:	d01a      	beq.n	8000f54 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f1e:	4917      	ldr	r1, [pc, #92]	; (8000f7c <HAL_RCC_OscConfig+0x3d8>)
 8000f20:	684b      	ldr	r3, [r1, #4]
 8000f22:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8000f26:	6a22      	ldr	r2, [r4, #32]
 8000f28:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000f2a:	4302      	orrs	r2, r0
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8000f30:	2201      	movs	r2, #1
 8000f32:	4b13      	ldr	r3, [pc, #76]	; (8000f80 <HAL_RCC_OscConfig+0x3dc>)
 8000f34:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f36:	f7ff fa63 	bl	8000400 <HAL_GetTick>
 8000f3a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f3c:	4b0f      	ldr	r3, [pc, #60]	; (8000f7c <HAL_RCC_OscConfig+0x3d8>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000f44:	d10e      	bne.n	8000f64 <HAL_RCC_OscConfig+0x3c0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f46:	f7ff fa5b 	bl	8000400 <HAL_GetTick>
 8000f4a:	1b00      	subs	r0, r0, r4
 8000f4c:	2802      	cmp	r0, #2
 8000f4e:	d9f5      	bls.n	8000f3c <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8000f50:	2003      	movs	r0, #3
 8000f52:	e00e      	b.n	8000f72 <HAL_RCC_OscConfig+0x3ce>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f54:	4a09      	ldr	r2, [pc, #36]	; (8000f7c <HAL_RCC_OscConfig+0x3d8>)
 8000f56:	6853      	ldr	r3, [r2, #4]
 8000f58:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000f5c:	68a1      	ldr	r1, [r4, #8]
 8000f5e:	430b      	orrs	r3, r1
 8000f60:	6053      	str	r3, [r2, #4]
 8000f62:	e7dc      	b.n	8000f1e <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8000f64:	2000      	movs	r0, #0
 8000f66:	e004      	b.n	8000f72 <HAL_RCC_OscConfig+0x3ce>
 8000f68:	2000      	movs	r0, #0
 8000f6a:	e002      	b.n	8000f72 <HAL_RCC_OscConfig+0x3ce>
        return HAL_ERROR;
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	e000      	b.n	8000f72 <HAL_RCC_OscConfig+0x3ce>
  return HAL_OK;
 8000f70:	2000      	movs	r0, #0
}
 8000f72:	b002      	add	sp, #8
 8000f74:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8000f76:	2001      	movs	r0, #1
 8000f78:	e7fb      	b.n	8000f72 <HAL_RCC_OscConfig+0x3ce>
 8000f7a:	bf00      	nop
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	42420060 	.word	0x42420060

08000f84 <HAL_RCC_MCOConfig>:
{
 8000f84:	b530      	push	{r4, r5, lr}
 8000f86:	b087      	sub	sp, #28
 8000f88:	460d      	mov	r5, r1
  GPIO_InitTypeDef gpio = {0U};
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	9304      	str	r3, [sp, #16]
  gpio.Mode      = GPIO_MODE_AF_PP;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	9303      	str	r3, [sp, #12]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000f92:	2303      	movs	r3, #3
 8000f94:	9305      	str	r3, [sp, #20]
  gpio.Pin       = MCO1_PIN;
 8000f96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f9a:	9302      	str	r3, [sp, #8]
  MCO1_CLK_ENABLE();
 8000f9c:	4c0a      	ldr	r4, [pc, #40]	; (8000fc8 <HAL_RCC_MCOConfig+0x44>)
 8000f9e:	69a3      	ldr	r3, [r4, #24]
 8000fa0:	f043 0304 	orr.w	r3, r3, #4
 8000fa4:	61a3      	str	r3, [r4, #24]
 8000fa6:	69a3      	ldr	r3, [r4, #24]
 8000fa8:	f003 0304 	and.w	r3, r3, #4
 8000fac:	9301      	str	r3, [sp, #4]
 8000fae:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8000fb0:	a902      	add	r1, sp, #8
 8000fb2:	4806      	ldr	r0, [pc, #24]	; (8000fcc <HAL_RCC_MCOConfig+0x48>)
 8000fb4:	f7ff fbc6 	bl	8000744 <HAL_GPIO_Init>
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8000fb8:	6861      	ldr	r1, [r4, #4]
 8000fba:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 8000fbe:	4329      	orrs	r1, r5
 8000fc0:	6061      	str	r1, [r4, #4]
}
 8000fc2:	b007      	add	sp, #28
 8000fc4:	bd30      	pop	{r4, r5, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	40010800 	.word	0x40010800

08000fd0 <HAL_RCC_EnableCSS>:
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	4b01      	ldr	r3, [pc, #4]	; (8000fd8 <HAL_RCC_EnableCSS+0x8>)
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	4770      	bx	lr
 8000fd8:	4242004c 	.word	0x4242004c

08000fdc <HAL_RCC_DisableCSS>:
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
 8000fdc:	2200      	movs	r2, #0
 8000fde:	4b01      	ldr	r3, [pc, #4]	; (8000fe4 <HAL_RCC_DisableCSS+0x8>)
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	4770      	bx	lr
 8000fe4:	4242004c 	.word	0x4242004c

08000fe8 <HAL_RCC_GetSysClockFreq>:
{
 8000fe8:	b510      	push	{r4, lr}
 8000fea:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000fec:	4c15      	ldr	r4, [pc, #84]	; (8001044 <HAL_RCC_GetSysClockFreq+0x5c>)
 8000fee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000ff2:	f10d 0e18 	add.w	lr, sp, #24
 8000ff6:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000ffa:	8a23      	ldrh	r3, [r4, #16]
 8000ffc:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8001000:	4b11      	ldr	r3, [pc, #68]	; (8001048 <HAL_RCC_GetSysClockFreq+0x60>)
 8001002:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001004:	f003 020c 	and.w	r2, r3, #12
 8001008:	2a08      	cmp	r2, #8
 800100a:	d118      	bne.n	800103e <HAL_RCC_GetSysClockFreq+0x56>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800100c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001010:	4472      	add	r2, lr
 8001012:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001016:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800101a:	d103      	bne.n	8001024 <HAL_RCC_GetSysClockFreq+0x3c>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800101c:	480b      	ldr	r0, [pc, #44]	; (800104c <HAL_RCC_GetSysClockFreq+0x64>)
 800101e:	fb00 f002 	mul.w	r0, r0, r2
 8001022:	e00d      	b.n	8001040 <HAL_RCC_GetSysClockFreq+0x58>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001024:	4b08      	ldr	r3, [pc, #32]	; (8001048 <HAL_RCC_GetSysClockFreq+0x60>)
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f3c3 4340 	ubfx	r3, r3, #17, #1
 800102c:	4473      	add	r3, lr
 800102e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001032:	4807      	ldr	r0, [pc, #28]	; (8001050 <HAL_RCC_GetSysClockFreq+0x68>)
 8001034:	fb00 f002 	mul.w	r0, r0, r2
 8001038:	fbb0 f0f3 	udiv	r0, r0, r3
 800103c:	e000      	b.n	8001040 <HAL_RCC_GetSysClockFreq+0x58>
      sysclockfreq = HSE_VALUE;
 800103e:	4804      	ldr	r0, [pc, #16]	; (8001050 <HAL_RCC_GetSysClockFreq+0x68>)
}
 8001040:	b006      	add	sp, #24
 8001042:	bd10      	pop	{r4, pc}
 8001044:	08001438 	.word	0x08001438
 8001048:	40021000 	.word	0x40021000
 800104c:	003d0900 	.word	0x003d0900
 8001050:	007a1200 	.word	0x007a1200

08001054 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001054:	4b62      	ldr	r3, [pc, #392]	; (80011e0 <HAL_RCC_ClockConfig+0x18c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 0307 	and.w	r3, r3, #7
 800105c:	428b      	cmp	r3, r1
 800105e:	d20c      	bcs.n	800107a <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001060:	4a5f      	ldr	r2, [pc, #380]	; (80011e0 <HAL_RCC_ClockConfig+0x18c>)
 8001062:	6813      	ldr	r3, [r2, #0]
 8001064:	f023 0307 	bic.w	r3, r3, #7
 8001068:	430b      	orrs	r3, r1
 800106a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800106c:	6813      	ldr	r3, [r2, #0]
 800106e:	f003 0307 	and.w	r3, r3, #7
 8001072:	4299      	cmp	r1, r3
 8001074:	d001      	beq.n	800107a <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
 8001076:	2001      	movs	r0, #1
 8001078:	4770      	bx	lr
{
 800107a:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800107c:	6803      	ldr	r3, [r0, #0]
 800107e:	f013 0f02 	tst.w	r3, #2
 8001082:	d017      	beq.n	80010b4 <HAL_RCC_ClockConfig+0x60>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001084:	f013 0f04 	tst.w	r3, #4
 8001088:	d004      	beq.n	8001094 <HAL_RCC_ClockConfig+0x40>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800108a:	4a56      	ldr	r2, [pc, #344]	; (80011e4 <HAL_RCC_ClockConfig+0x190>)
 800108c:	6853      	ldr	r3, [r2, #4]
 800108e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001092:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001094:	6803      	ldr	r3, [r0, #0]
 8001096:	f013 0f08 	tst.w	r3, #8
 800109a:	d004      	beq.n	80010a6 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800109c:	4a51      	ldr	r2, [pc, #324]	; (80011e4 <HAL_RCC_ClockConfig+0x190>)
 800109e:	6853      	ldr	r3, [r2, #4]
 80010a0:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80010a4:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010a6:	4a4f      	ldr	r2, [pc, #316]	; (80011e4 <HAL_RCC_ClockConfig+0x190>)
 80010a8:	6853      	ldr	r3, [r2, #4]
 80010aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80010ae:	6884      	ldr	r4, [r0, #8]
 80010b0:	4323      	orrs	r3, r4
 80010b2:	6053      	str	r3, [r2, #4]
 80010b4:	460d      	mov	r5, r1
 80010b6:	4604      	mov	r4, r0
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010b8:	6803      	ldr	r3, [r0, #0]
 80010ba:	f013 0f01 	tst.w	r3, #1
 80010be:	d052      	beq.n	8001166 <HAL_RCC_ClockConfig+0x112>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010c0:	6843      	ldr	r3, [r0, #4]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d023      	beq.n	800110e <HAL_RCC_ClockConfig+0xba>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d028      	beq.n	800111c <HAL_RCC_ClockConfig+0xc8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ca:	4a46      	ldr	r2, [pc, #280]	; (80011e4 <HAL_RCC_ClockConfig+0x190>)
 80010cc:	6812      	ldr	r2, [r2, #0]
 80010ce:	f012 0f02 	tst.w	r2, #2
 80010d2:	f000 8082 	beq.w	80011da <HAL_RCC_ClockConfig+0x186>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010d6:	4943      	ldr	r1, [pc, #268]	; (80011e4 <HAL_RCC_ClockConfig+0x190>)
 80010d8:	684a      	ldr	r2, [r1, #4]
 80010da:	f022 0203 	bic.w	r2, r2, #3
 80010de:	4313      	orrs	r3, r2
 80010e0:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80010e2:	f7ff f98d 	bl	8000400 <HAL_GetTick>
 80010e6:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010e8:	6863      	ldr	r3, [r4, #4]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d01d      	beq.n	800112a <HAL_RCC_ClockConfig+0xd6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d02a      	beq.n	8001148 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80010f2:	4b3c      	ldr	r3, [pc, #240]	; (80011e4 <HAL_RCC_ClockConfig+0x190>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f013 0f0c 	tst.w	r3, #12
 80010fa:	d034      	beq.n	8001166 <HAL_RCC_ClockConfig+0x112>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010fc:	f7ff f980 	bl	8000400 <HAL_GetTick>
 8001100:	1b80      	subs	r0, r0, r6
 8001102:	f241 3388 	movw	r3, #5000	; 0x1388
 8001106:	4298      	cmp	r0, r3
 8001108:	d9f3      	bls.n	80010f2 <HAL_RCC_ClockConfig+0x9e>
          return HAL_TIMEOUT;
 800110a:	2003      	movs	r0, #3
 800110c:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800110e:	4a35      	ldr	r2, [pc, #212]	; (80011e4 <HAL_RCC_ClockConfig+0x190>)
 8001110:	6812      	ldr	r2, [r2, #0]
 8001112:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001116:	d1de      	bne.n	80010d6 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8001118:	2001      	movs	r0, #1
 800111a:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800111c:	4a31      	ldr	r2, [pc, #196]	; (80011e4 <HAL_RCC_ClockConfig+0x190>)
 800111e:	6812      	ldr	r2, [r2, #0]
 8001120:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001124:	d1d7      	bne.n	80010d6 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8001126:	2001      	movs	r0, #1
 8001128:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800112a:	4b2e      	ldr	r3, [pc, #184]	; (80011e4 <HAL_RCC_ClockConfig+0x190>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f003 030c 	and.w	r3, r3, #12
 8001132:	2b04      	cmp	r3, #4
 8001134:	d017      	beq.n	8001166 <HAL_RCC_ClockConfig+0x112>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001136:	f7ff f963 	bl	8000400 <HAL_GetTick>
 800113a:	1b80      	subs	r0, r0, r6
 800113c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001140:	4298      	cmp	r0, r3
 8001142:	d9f2      	bls.n	800112a <HAL_RCC_ClockConfig+0xd6>
          return HAL_TIMEOUT;
 8001144:	2003      	movs	r0, #3
 8001146:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001148:	4b26      	ldr	r3, [pc, #152]	; (80011e4 <HAL_RCC_ClockConfig+0x190>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 030c 	and.w	r3, r3, #12
 8001150:	2b08      	cmp	r3, #8
 8001152:	d008      	beq.n	8001166 <HAL_RCC_ClockConfig+0x112>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001154:	f7ff f954 	bl	8000400 <HAL_GetTick>
 8001158:	1b80      	subs	r0, r0, r6
 800115a:	f241 3388 	movw	r3, #5000	; 0x1388
 800115e:	4298      	cmp	r0, r3
 8001160:	d9f2      	bls.n	8001148 <HAL_RCC_ClockConfig+0xf4>
          return HAL_TIMEOUT;
 8001162:	2003      	movs	r0, #3
 8001164:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001166:	4b1e      	ldr	r3, [pc, #120]	; (80011e0 <HAL_RCC_ClockConfig+0x18c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	429d      	cmp	r5, r3
 8001170:	d20c      	bcs.n	800118c <HAL_RCC_ClockConfig+0x138>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001172:	4a1b      	ldr	r2, [pc, #108]	; (80011e0 <HAL_RCC_ClockConfig+0x18c>)
 8001174:	6813      	ldr	r3, [r2, #0]
 8001176:	f023 0307 	bic.w	r3, r3, #7
 800117a:	432b      	orrs	r3, r5
 800117c:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800117e:	6813      	ldr	r3, [r2, #0]
 8001180:	f003 0307 	and.w	r3, r3, #7
 8001184:	429d      	cmp	r5, r3
 8001186:	d001      	beq.n	800118c <HAL_RCC_ClockConfig+0x138>
      return HAL_ERROR;
 8001188:	2001      	movs	r0, #1
}
 800118a:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800118c:	6823      	ldr	r3, [r4, #0]
 800118e:	f013 0f04 	tst.w	r3, #4
 8001192:	d006      	beq.n	80011a2 <HAL_RCC_ClockConfig+0x14e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001194:	4a13      	ldr	r2, [pc, #76]	; (80011e4 <HAL_RCC_ClockConfig+0x190>)
 8001196:	6853      	ldr	r3, [r2, #4]
 8001198:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800119c:	68e1      	ldr	r1, [r4, #12]
 800119e:	430b      	orrs	r3, r1
 80011a0:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011a2:	6823      	ldr	r3, [r4, #0]
 80011a4:	f013 0f08 	tst.w	r3, #8
 80011a8:	d007      	beq.n	80011ba <HAL_RCC_ClockConfig+0x166>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80011aa:	4a0e      	ldr	r2, [pc, #56]	; (80011e4 <HAL_RCC_ClockConfig+0x190>)
 80011ac:	6853      	ldr	r3, [r2, #4]
 80011ae:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80011b2:	6921      	ldr	r1, [r4, #16]
 80011b4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80011b8:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011ba:	f7ff ff15 	bl	8000fe8 <HAL_RCC_GetSysClockFreq>
 80011be:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <HAL_RCC_ClockConfig+0x190>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80011c6:	4a08      	ldr	r2, [pc, #32]	; (80011e8 <HAL_RCC_ClockConfig+0x194>)
 80011c8:	5cd3      	ldrb	r3, [r2, r3]
 80011ca:	40d8      	lsrs	r0, r3
 80011cc:	4b07      	ldr	r3, [pc, #28]	; (80011ec <HAL_RCC_ClockConfig+0x198>)
 80011ce:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80011d0:	200f      	movs	r0, #15
 80011d2:	f7ff f8d3 	bl	800037c <HAL_InitTick>
  return HAL_OK;
 80011d6:	2000      	movs	r0, #0
 80011d8:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80011da:	2001      	movs	r0, #1
 80011dc:	bd70      	pop	{r4, r5, r6, pc}
 80011de:	bf00      	nop
 80011e0:	40022000 	.word	0x40022000
 80011e4:	40021000 	.word	0x40021000
 80011e8:	08001420 	.word	0x08001420
 80011ec:	20000000 	.word	0x20000000

080011f0 <HAL_RCC_GetHCLKFreq>:
}
 80011f0:	4b01      	ldr	r3, [pc, #4]	; (80011f8 <HAL_RCC_GetHCLKFreq+0x8>)
 80011f2:	6818      	ldr	r0, [r3, #0]
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	20000000 	.word	0x20000000

080011fc <HAL_RCC_GetPCLK1Freq>:
{
 80011fc:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80011fe:	f7ff fff7 	bl	80011f0 <HAL_RCC_GetHCLKFreq>
 8001202:	4b04      	ldr	r3, [pc, #16]	; (8001214 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800120a:	4a03      	ldr	r2, [pc, #12]	; (8001218 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800120c:	5cd3      	ldrb	r3, [r2, r3]
}    
 800120e:	40d8      	lsrs	r0, r3
 8001210:	bd08      	pop	{r3, pc}
 8001212:	bf00      	nop
 8001214:	40021000 	.word	0x40021000
 8001218:	08001430 	.word	0x08001430

0800121c <HAL_RCC_GetPCLK2Freq>:
{
 800121c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800121e:	f7ff ffe7 	bl	80011f0 <HAL_RCC_GetHCLKFreq>
 8001222:	4b04      	ldr	r3, [pc, #16]	; (8001234 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800122a:	4a03      	ldr	r2, [pc, #12]	; (8001238 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800122c:	5cd3      	ldrb	r3, [r2, r3]
} 
 800122e:	40d8      	lsrs	r0, r3
 8001230:	bd08      	pop	{r3, pc}
 8001232:	bf00      	nop
 8001234:	40021000 	.word	0x40021000
 8001238:	08001430 	.word	0x08001430

0800123c <HAL_RCC_GetOscConfig>:
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI  \
 800123c:	230f      	movs	r3, #15
 800123e:	6003      	str	r3, [r0, #0]
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 8001240:	4b2a      	ldr	r3, [pc, #168]	; (80012ec <HAL_RCC_GetOscConfig+0xb0>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001248:	d030      	beq.n	80012ac <HAL_RCC_GetOscConfig+0x70>
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 800124a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800124e:	6043      	str	r3, [r0, #4]
  RCC_OscInitStruct->HSEPredivValue = __HAL_RCC_HSE_GET_PREDIV();
 8001250:	4a26      	ldr	r2, [pc, #152]	; (80012ec <HAL_RCC_GetOscConfig+0xb0>)
 8001252:	6853      	ldr	r3, [r2, #4]
 8001254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001258:	6083      	str	r3, [r0, #8]
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 800125a:	6813      	ldr	r3, [r2, #0]
 800125c:	f013 0f01 	tst.w	r3, #1
 8001260:	d030      	beq.n	80012c4 <HAL_RCC_GetOscConfig+0x88>
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 8001262:	2301      	movs	r3, #1
 8001264:	6103      	str	r3, [r0, #16]
  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR & RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_Pos);
 8001266:	4a21      	ldr	r2, [pc, #132]	; (80012ec <HAL_RCC_GetOscConfig+0xb0>)
 8001268:	6813      	ldr	r3, [r2, #0]
 800126a:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 800126e:	6143      	str	r3, [r0, #20]
  if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 8001270:	6a13      	ldr	r3, [r2, #32]
 8001272:	f013 0f04 	tst.w	r3, #4
 8001276:	d028      	beq.n	80012ca <HAL_RCC_GetOscConfig+0x8e>
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 8001278:	2305      	movs	r3, #5
 800127a:	60c3      	str	r3, [r0, #12]
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 800127c:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <HAL_RCC_GetOscConfig+0xb0>)
 800127e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001280:	f013 0f01 	tst.w	r3, #1
 8001284:	d02c      	beq.n	80012e0 <HAL_RCC_GetOscConfig+0xa4>
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 8001286:	2301      	movs	r3, #1
 8001288:	6183      	str	r3, [r0, #24]
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 800128a:	4b18      	ldr	r3, [pc, #96]	; (80012ec <HAL_RCC_GetOscConfig+0xb0>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001292:	d128      	bne.n	80012e6 <HAL_RCC_GetOscConfig+0xaa>
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 8001294:	2301      	movs	r3, #1
 8001296:	61c3      	str	r3, [r0, #28]
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLSRC);
 8001298:	4a14      	ldr	r2, [pc, #80]	; (80012ec <HAL_RCC_GetOscConfig+0xb0>)
 800129a:	6853      	ldr	r3, [r2, #4]
 800129c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a0:	6203      	str	r3, [r0, #32]
  RCC_OscInitStruct->PLL.PLLMUL = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLMULL);
 80012a2:	6853      	ldr	r3, [r2, #4]
 80012a4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80012a8:	6243      	str	r3, [r0, #36]	; 0x24
 80012aa:	4770      	bx	lr
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 80012ac:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <HAL_RCC_GetOscConfig+0xb0>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80012b4:	d003      	beq.n	80012be <HAL_RCC_GetOscConfig+0x82>
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 80012b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012ba:	6043      	str	r3, [r0, #4]
 80012bc:	e7c8      	b.n	8001250 <HAL_RCC_GetOscConfig+0x14>
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 80012be:	2300      	movs	r3, #0
 80012c0:	6043      	str	r3, [r0, #4]
 80012c2:	e7c5      	b.n	8001250 <HAL_RCC_GetOscConfig+0x14>
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 80012c4:	2300      	movs	r3, #0
 80012c6:	6103      	str	r3, [r0, #16]
 80012c8:	e7cd      	b.n	8001266 <HAL_RCC_GetOscConfig+0x2a>
  else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 80012ca:	4b08      	ldr	r3, [pc, #32]	; (80012ec <HAL_RCC_GetOscConfig+0xb0>)
 80012cc:	6a1b      	ldr	r3, [r3, #32]
 80012ce:	f013 0f01 	tst.w	r3, #1
 80012d2:	d002      	beq.n	80012da <HAL_RCC_GetOscConfig+0x9e>
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 80012d4:	2301      	movs	r3, #1
 80012d6:	60c3      	str	r3, [r0, #12]
 80012d8:	e7d0      	b.n	800127c <HAL_RCC_GetOscConfig+0x40>
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 80012da:	2300      	movs	r3, #0
 80012dc:	60c3      	str	r3, [r0, #12]
 80012de:	e7cd      	b.n	800127c <HAL_RCC_GetOscConfig+0x40>
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 80012e0:	2300      	movs	r3, #0
 80012e2:	6183      	str	r3, [r0, #24]
 80012e4:	e7d1      	b.n	800128a <HAL_RCC_GetOscConfig+0x4e>
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 80012e6:	2302      	movs	r3, #2
 80012e8:	61c3      	str	r3, [r0, #28]
 80012ea:	e7d5      	b.n	8001298 <HAL_RCC_GetOscConfig+0x5c>
 80012ec:	40021000 	.word	0x40021000

080012f0 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80012f0:	230f      	movs	r3, #15
 80012f2:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80012f4:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <HAL_RCC_GetClockConfig+0x34>)
 80012f6:	685a      	ldr	r2, [r3, #4]
 80012f8:	f002 0203 	and.w	r2, r2, #3
 80012fc:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80012fe:	685a      	ldr	r2, [r3, #4]
 8001300:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001304:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8001306:	685a      	ldr	r2, [r3, #4]
 8001308:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800130c:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	08db      	lsrs	r3, r3, #3
 8001312:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001316:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8001318:	4b03      	ldr	r3, [pc, #12]	; (8001328 <HAL_RCC_GetClockConfig+0x38>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0307 	and.w	r3, r3, #7
 8001320:	600b      	str	r3, [r1, #0]
 8001322:	4770      	bx	lr
 8001324:	40021000 	.word	0x40021000
 8001328:	40022000 	.word	0x40022000

0800132c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800132c:	4770      	bx	lr

0800132e <HAL_RCC_NMI_IRQHandler>:
{
 800132e:	b508      	push	{r3, lr}
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8001330:	4b05      	ldr	r3, [pc, #20]	; (8001348 <HAL_RCC_NMI_IRQHandler+0x1a>)
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001338:	d100      	bne.n	800133c <HAL_RCC_NMI_IRQHandler+0xe>
 800133a:	bd08      	pop	{r3, pc}
    HAL_RCC_CSSCallback();
 800133c:	f7ff fff6 	bl	800132c <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8001340:	2280      	movs	r2, #128	; 0x80
 8001342:	4b02      	ldr	r3, [pc, #8]	; (800134c <HAL_RCC_NMI_IRQHandler+0x1e>)
 8001344:	701a      	strb	r2, [r3, #0]
}
 8001346:	e7f8      	b.n	800133a <HAL_RCC_NMI_IRQHandler+0xc>
 8001348:	40021000 	.word	0x40021000
 800134c:	4002100a 	.word	0x4002100a

08001350 <main>:

//#include "main.h"
#include "ap.h"

int main(void)
{
 8001350:	b508      	push	{r3, lr}

  hwInit();
 8001352:	f7fe fff3 	bl	800033c <hwInit>
  apInit();
 8001356:	f7fe fef9 	bl	800014c <apInit>

  apMain();
 800135a:	f7fe fef8 	bl	800014e <apMain>

}
 800135e:	2000      	movs	r0, #0
 8001360:	bd08      	pop	{r3, pc}
	...

08001364 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001364:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001366:	e003      	b.n	8001370 <LoopCopyDataInit>

08001368 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001368:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800136a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800136c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800136e:	3104      	adds	r1, #4

08001370 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001370:	480a      	ldr	r0, [pc, #40]	; (800139c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001372:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001374:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001376:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001378:	d3f6      	bcc.n	8001368 <CopyDataInit>
  ldr r2, =_sbss
 800137a:	4a0a      	ldr	r2, [pc, #40]	; (80013a4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800137c:	e002      	b.n	8001384 <LoopFillZerobss>

0800137e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800137e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001380:	f842 3b04 	str.w	r3, [r2], #4

08001384 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001384:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001386:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001388:	d3f9      	bcc.n	800137e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800138a:	f7fe ff2b 	bl	80001e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800138e:	f000 f80f 	bl	80013b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001392:	f7ff ffdd 	bl	8001350 <main>
  bx lr
 8001396:	4770      	bx	lr
  ldr r3, =_sidata
 8001398:	08001454 	.word	0x08001454
  ldr r0, =_sdata
 800139c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80013a0:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80013a4:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80013a8:	2000002c 	.word	0x2000002c

080013ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013ac:	e7fe      	b.n	80013ac <ADC1_2_IRQHandler>
	...

080013b0 <__libc_init_array>:
 80013b0:	b570      	push	{r4, r5, r6, lr}
 80013b2:	2500      	movs	r5, #0
 80013b4:	4e0c      	ldr	r6, [pc, #48]	; (80013e8 <__libc_init_array+0x38>)
 80013b6:	4c0d      	ldr	r4, [pc, #52]	; (80013ec <__libc_init_array+0x3c>)
 80013b8:	1ba4      	subs	r4, r4, r6
 80013ba:	10a4      	asrs	r4, r4, #2
 80013bc:	42a5      	cmp	r5, r4
 80013be:	d109      	bne.n	80013d4 <__libc_init_array+0x24>
 80013c0:	f000 f822 	bl	8001408 <_init>
 80013c4:	2500      	movs	r5, #0
 80013c6:	4e0a      	ldr	r6, [pc, #40]	; (80013f0 <__libc_init_array+0x40>)
 80013c8:	4c0a      	ldr	r4, [pc, #40]	; (80013f4 <__libc_init_array+0x44>)
 80013ca:	1ba4      	subs	r4, r4, r6
 80013cc:	10a4      	asrs	r4, r4, #2
 80013ce:	42a5      	cmp	r5, r4
 80013d0:	d105      	bne.n	80013de <__libc_init_array+0x2e>
 80013d2:	bd70      	pop	{r4, r5, r6, pc}
 80013d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80013d8:	4798      	blx	r3
 80013da:	3501      	adds	r5, #1
 80013dc:	e7ee      	b.n	80013bc <__libc_init_array+0xc>
 80013de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80013e2:	4798      	blx	r3
 80013e4:	3501      	adds	r5, #1
 80013e6:	e7f2      	b.n	80013ce <__libc_init_array+0x1e>
 80013e8:	0800144c 	.word	0x0800144c
 80013ec:	0800144c 	.word	0x0800144c
 80013f0:	0800144c 	.word	0x0800144c
 80013f4:	08001450 	.word	0x08001450

080013f8 <memset>:
 80013f8:	4603      	mov	r3, r0
 80013fa:	4402      	add	r2, r0
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d100      	bne.n	8001402 <memset+0xa>
 8001400:	4770      	bx	lr
 8001402:	f803 1b01 	strb.w	r1, [r3], #1
 8001406:	e7f9      	b.n	80013fc <memset+0x4>

08001408 <_init>:
 8001408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800140a:	bf00      	nop
 800140c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800140e:	bc08      	pop	{r3}
 8001410:	469e      	mov	lr, r3
 8001412:	4770      	bx	lr

08001414 <_fini>:
 8001414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001416:	bf00      	nop
 8001418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800141a:	bc08      	pop	{r3}
 800141c:	469e      	mov	lr, r3
 800141e:	4770      	bx	lr
