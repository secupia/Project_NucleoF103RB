
03_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000379c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080038a8  080038a8  000138a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003914  08003914  00013914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003918  08003918  00013918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  0800391c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000ac  20000070  0800398c  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000011c  0800398c  0002011c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000df59  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000023a7  00000000  00000000  0002dff2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000228  00000000  00000000  000303a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00003d01  00000000  00000000  000305c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000225d  00000000  00000000  000342c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      0000007c  00000000  00000000  00036526  2**0
                  CONTENTS, READONLY
 15 .debug_frame  00001444  00000000  00000000  000365a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0000358c  00000000  00000000  000379e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000000a0  00000000  00000000  0003af78  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003890 	.word	0x08003890

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003890 	.word	0x08003890

0800014c <apInit>:
 */

#include "ap.h"

void apInit(void)
{
 800014c:	b508      	push	{r3, lr}
  uartOpen(_DEF_UART1, 115200);
 800014e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000152:	2000      	movs	r0, #0
 8000154:	f000 f9d8 	bl	8000508 <uartOpen>
 8000158:	bd08      	pop	{r3, pc}

0800015a <apMain>:
}

void apMain(void)
{
 800015a:	b508      	push	{r3, lr}
    else
    {
      ledOff(0);
    }
#endif
    if( uartAvailable(_DEF_UART1)>0 )
 800015c:	2000      	movs	r0, #0
 800015e:	f000 fa2b 	bl	80005b8 <uartAvailable>
 8000162:	2800      	cmp	r0, #0
 8000164:	d0fa      	beq.n	800015c <apMain+0x2>
    {
      uartPrintf(_DEF_UART1, "rx : 0x%X \n", uartRead(_DEF_UART1));
 8000166:	2000      	movs	r0, #0
 8000168:	f000 fa76 	bl	8000658 <uartRead>
 800016c:	4602      	mov	r2, r0
 800016e:	4902      	ldr	r1, [pc, #8]	; (8000178 <apMain+0x1e>)
 8000170:	2000      	movs	r0, #0
 8000172:	f000 fa9c 	bl	80006ae <uartPrintf>
 8000176:	e7f1      	b.n	800015c <apMain+0x2>
 8000178:	080038d4 	.word	0x080038d4

0800017c <SystemClock_Config>:
  *            Flash Latency(WS)              = 2
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 800017c:	b500      	push	{lr}
 800017e:	b091      	sub	sp, #68	; 0x44
  RCC_ClkInitTypeDef clkinitstruct = {0};
 8000180:	2100      	movs	r1, #0
 8000182:	910b      	str	r1, [sp, #44]	; 0x2c
 8000184:	910c      	str	r1, [sp, #48]	; 0x30
 8000186:	910d      	str	r1, [sp, #52]	; 0x34
 8000188:	910e      	str	r1, [sp, #56]	; 0x38
 800018a:	910f      	str	r1, [sp, #60]	; 0x3c
  RCC_OscInitTypeDef oscinitstruct = {0};
 800018c:	2228      	movs	r2, #40	; 0x28
 800018e:	a801      	add	r0, sp, #4
 8000190:	f002 ff26 	bl	8002fe0 <memset>

  /* Configure PLL ------------------------------------------------------*/
  /* PLL configuration: PLLCLK = (HSI / 2) * PLLMUL = (8 / 2) * 16 = 64 MHz */
  /* PREDIV1 configuration: PREDIV1CLK = PLLCLK / HSEPredivValue = 64 / 1 = 64 MHz */
  /* Enable HSI and activate PLL with HSi_DIV2 as source */
  oscinitstruct.OscillatorType  = RCC_OSCILLATORTYPE_HSI;
 8000194:	2302      	movs	r3, #2
 8000196:	9301      	str	r3, [sp, #4]
  oscinitstruct.HSEState        = RCC_HSE_OFF;
  oscinitstruct.LSEState        = RCC_LSE_OFF;
  oscinitstruct.HSIState        = RCC_HSI_ON;
 8000198:	2201      	movs	r2, #1
 800019a:	9205      	str	r2, [sp, #20]
  oscinitstruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800019c:	2210      	movs	r2, #16
 800019e:	9206      	str	r2, [sp, #24]
  oscinitstruct.HSEPredivValue    = RCC_HSE_PREDIV_DIV1;
  oscinitstruct.PLL.PLLState    = RCC_PLL_ON;
 80001a0:	9308      	str	r3, [sp, #32]
  oscinitstruct.PLL.PLLSource   = RCC_PLLSOURCE_HSI_DIV2;
  oscinitstruct.PLL.PLLMUL      = RCC_PLL_MUL16;
 80001a2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80001a6:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&oscinitstruct)!= HAL_OK)
 80001a8:	a801      	add	r0, sp, #4
 80001aa:	f001 fabb 	bl	8001724 <HAL_RCC_OscConfig>
 80001ae:	b100      	cbz	r0, 80001b2 <SystemClock_Config+0x36>
 80001b0:	e7fe      	b.n	80001b0 <SystemClock_Config+0x34>
    while(1);
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  clkinitstruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80001b2:	230f      	movs	r3, #15
 80001b4:	930b      	str	r3, [sp, #44]	; 0x2c
  clkinitstruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001b6:	2102      	movs	r1, #2
 80001b8:	910c      	str	r1, [sp, #48]	; 0x30
  clkinitstruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001ba:	2300      	movs	r3, #0
 80001bc:	930d      	str	r3, [sp, #52]	; 0x34
  clkinitstruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001be:	930f      	str	r3, [sp, #60]	; 0x3c
  clkinitstruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001c4:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_RCC_ClockConfig(&clkinitstruct, FLASH_LATENCY_2)!= HAL_OK)
 80001c6:	a80b      	add	r0, sp, #44	; 0x2c
 80001c8:	f001 fd04 	bl	8001bd4 <HAL_RCC_ClockConfig>
 80001cc:	b100      	cbz	r0, 80001d0 <SystemClock_Config+0x54>
 80001ce:	e7fe      	b.n	80001ce <SystemClock_Config+0x52>
  {
    /* Initialization Error */
    while(1);
  }
}
 80001d0:	b011      	add	sp, #68	; 0x44
 80001d2:	f85d fb04 	ldr.w	pc, [sp], #4

080001d6 <bspInit>:
{
 80001d6:	b500      	push	{lr}
 80001d8:	b083      	sub	sp, #12
  HAL_Init();
 80001da:	f000 fb5b 	bl	8000894 <HAL_Init>
  SystemClock_Config();
 80001de:	f7ff ffcd 	bl	800017c <SystemClock_Config>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001e2:	4b0b      	ldr	r3, [pc, #44]	; (8000210 <bspInit+0x3a>)
 80001e4:	699a      	ldr	r2, [r3, #24]
 80001e6:	f042 0204 	orr.w	r2, r2, #4
 80001ea:	619a      	str	r2, [r3, #24]
 80001ec:	699a      	ldr	r2, [r3, #24]
 80001ee:	f002 0204 	and.w	r2, r2, #4
 80001f2:	9200      	str	r2, [sp, #0]
 80001f4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001f6:	699a      	ldr	r2, [r3, #24]
 80001f8:	f042 0210 	orr.w	r2, r2, #16
 80001fc:	619a      	str	r2, [r3, #24]
 80001fe:	699b      	ldr	r3, [r3, #24]
 8000200:	f003 0310 	and.w	r3, r3, #16
 8000204:	9301      	str	r3, [sp, #4]
 8000206:	9b01      	ldr	r3, [sp, #4]
}
 8000208:	b003      	add	sp, #12
 800020a:	f85d fb04 	ldr.w	pc, [sp], #4
 800020e:	bf00      	nop
 8000210:	40021000 	.word	0x40021000

08000214 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000214:	4b0f      	ldr	r3, [pc, #60]	; (8000254 <SystemInit+0x40>)
 8000216:	681a      	ldr	r2, [r3, #0]
 8000218:	f042 0201 	orr.w	r2, r2, #1
 800021c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800021e:	6859      	ldr	r1, [r3, #4]
 8000220:	4a0d      	ldr	r2, [pc, #52]	; (8000258 <SystemInit+0x44>)
 8000222:	400a      	ands	r2, r1
 8000224:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800022c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000230:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000232:	681a      	ldr	r2, [r3, #0]
 8000234:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000238:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800023a:	685a      	ldr	r2, [r3, #4]
 800023c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000240:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000242:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000246:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000248:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800024c:	4b03      	ldr	r3, [pc, #12]	; (800025c <SystemInit+0x48>)
 800024e:	609a      	str	r2, [r3, #8]
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	40021000 	.word	0x40021000
 8000258:	f8ff0000 	.word	0xf8ff0000
 800025c:	e000ed00 	.word	0xe000ed00

08000260 <SystemCoreClockUpdate>:
#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000260:	4b1f      	ldr	r3, [pc, #124]	; (80002e0 <SystemCoreClockUpdate+0x80>)
 8000262:	685b      	ldr	r3, [r3, #4]
 8000264:	f003 030c 	and.w	r3, r3, #12
  
  switch (tmp)
 8000268:	2b04      	cmp	r3, #4
 800026a:	d014      	beq.n	8000296 <SystemCoreClockUpdate+0x36>
 800026c:	2b08      	cmp	r3, #8
 800026e:	d016      	beq.n	800029e <SystemCoreClockUpdate+0x3e>
 8000270:	b11b      	cbz	r3, 800027a <SystemCoreClockUpdate+0x1a>
      }
#endif /* STM32F105xC */ 
      break;

    default:
      SystemCoreClock = HSI_VALUE;
 8000272:	4a1c      	ldr	r2, [pc, #112]	; (80002e4 <SystemCoreClockUpdate+0x84>)
 8000274:	4b1c      	ldr	r3, [pc, #112]	; (80002e8 <SystemCoreClockUpdate+0x88>)
 8000276:	601a      	str	r2, [r3, #0]
      break;
 8000278:	e002      	b.n	8000280 <SystemCoreClockUpdate+0x20>
      SystemCoreClock = HSI_VALUE;
 800027a:	4a1a      	ldr	r2, [pc, #104]	; (80002e4 <SystemCoreClockUpdate+0x84>)
 800027c:	4b1a      	ldr	r3, [pc, #104]	; (80002e8 <SystemCoreClockUpdate+0x88>)
 800027e:	601a      	str	r2, [r3, #0]
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000280:	4b17      	ldr	r3, [pc, #92]	; (80002e0 <SystemCoreClockUpdate+0x80>)
 8000282:	685b      	ldr	r3, [r3, #4]
 8000284:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000288:	4a18      	ldr	r2, [pc, #96]	; (80002ec <SystemCoreClockUpdate+0x8c>)
 800028a:	5cd1      	ldrb	r1, [r2, r3]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 800028c:	4a16      	ldr	r2, [pc, #88]	; (80002e8 <SystemCoreClockUpdate+0x88>)
 800028e:	6813      	ldr	r3, [r2, #0]
 8000290:	40cb      	lsrs	r3, r1
 8000292:	6013      	str	r3, [r2, #0]
 8000294:	4770      	bx	lr
      SystemCoreClock = HSE_VALUE;
 8000296:	4a13      	ldr	r2, [pc, #76]	; (80002e4 <SystemCoreClockUpdate+0x84>)
 8000298:	4b13      	ldr	r3, [pc, #76]	; (80002e8 <SystemCoreClockUpdate+0x88>)
 800029a:	601a      	str	r2, [r3, #0]
      break;
 800029c:	e7f0      	b.n	8000280 <SystemCoreClockUpdate+0x20>
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 800029e:	4a10      	ldr	r2, [pc, #64]	; (80002e0 <SystemCoreClockUpdate+0x80>)
 80002a0:	6853      	ldr	r3, [r2, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80002a2:	6852      	ldr	r2, [r2, #4]
      pllmull = ( pllmull >> 18U) + 2U;
 80002a4:	f3c3 4383 	ubfx	r3, r3, #18, #4
 80002a8:	3302      	adds	r3, #2
      if (pllsource == 0x00U)
 80002aa:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80002ae:	d00a      	beq.n	80002c6 <SystemCoreClockUpdate+0x66>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 80002b0:	4a0b      	ldr	r2, [pc, #44]	; (80002e0 <SystemCoreClockUpdate+0x80>)
 80002b2:	6852      	ldr	r2, [r2, #4]
 80002b4:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80002b8:	d00b      	beq.n	80002d2 <SystemCoreClockUpdate+0x72>
          SystemCoreClock = (HSE_VALUE >> 1U) * pllmull;
 80002ba:	4a0d      	ldr	r2, [pc, #52]	; (80002f0 <SystemCoreClockUpdate+0x90>)
 80002bc:	fb02 f303 	mul.w	r3, r2, r3
 80002c0:	4a09      	ldr	r2, [pc, #36]	; (80002e8 <SystemCoreClockUpdate+0x88>)
 80002c2:	6013      	str	r3, [r2, #0]
 80002c4:	e7dc      	b.n	8000280 <SystemCoreClockUpdate+0x20>
        SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 80002c6:	4a0a      	ldr	r2, [pc, #40]	; (80002f0 <SystemCoreClockUpdate+0x90>)
 80002c8:	fb02 f303 	mul.w	r3, r2, r3
 80002cc:	4a06      	ldr	r2, [pc, #24]	; (80002e8 <SystemCoreClockUpdate+0x88>)
 80002ce:	6013      	str	r3, [r2, #0]
 80002d0:	e7d6      	b.n	8000280 <SystemCoreClockUpdate+0x20>
          SystemCoreClock = HSE_VALUE * pllmull;
 80002d2:	4a04      	ldr	r2, [pc, #16]	; (80002e4 <SystemCoreClockUpdate+0x84>)
 80002d4:	fb02 f303 	mul.w	r3, r2, r3
 80002d8:	4a03      	ldr	r2, [pc, #12]	; (80002e8 <SystemCoreClockUpdate+0x88>)
 80002da:	6013      	str	r3, [r2, #0]
 80002dc:	e7d0      	b.n	8000280 <SystemCoreClockUpdate+0x20>
 80002de:	bf00      	nop
 80002e0:	40021000 	.word	0x40021000
 80002e4:	007a1200 	.word	0x007a1200
 80002e8:	20000000 	.word	0x20000000
 80002ec:	080038a8 	.word	0x080038a8
 80002f0:	003d0900 	.word	0x003d0900

080002f4 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80002f4:	4770      	bx	lr

080002f6 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80002f6:	e7fe      	b.n	80002f6 <HardFault_Handler>

080002f8 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80002f8:	e7fe      	b.n	80002f8 <MemManage_Handler>

080002fa <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80002fa:	e7fe      	b.n	80002fa <BusFault_Handler>

080002fc <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80002fc:	e7fe      	b.n	80002fc <UsageFault_Handler>

080002fe <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80002fe:	4770      	bx	lr

08000300 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000300:	4770      	bx	lr

08000302 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000302:	4770      	bx	lr

08000304 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000304:	b508      	push	{r3, lr}
  HAL_IncTick();
 8000306:	f000 fad7 	bl	80008b8 <HAL_IncTick>
 800030a:	bd08      	pop	{r3, pc}

0800030c <qbufferInit>:

#include "qbuffer.h"


void qbufferInit(void)
{
 800030c:	4770      	bx	lr

0800030e <qbufferCreate>:
bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{

  bool ret = true;

  p_node->ptr_in = 0;
 800030e:	2300      	movs	r3, #0
 8000310:	6003      	str	r3, [r0, #0]
  p_node->ptr_out = 0;
 8000312:	6043      	str	r3, [r0, #4]
  p_node->length = length;
 8000314:	6082      	str	r2, [r0, #8]
  p_node->p_buf = p_buf;
 8000316:	60c1      	str	r1, [r0, #12]

  if( p_node->p_buf == NULL )
 8000318:	b109      	cbz	r1, 800031e <qbufferCreate+0x10>
  bool ret = true;
 800031a:	2001      	movs	r0, #1
  {
    p_node->length = 0;
    ret = false;
  }
  return ret;
}
 800031c:	4770      	bx	lr
    p_node->length = 0;
 800031e:	6083      	str	r3, [r0, #8]
    ret = false;
 8000320:	4618      	mov	r0, r3
 8000322:	4770      	bx	lr

08000324 <qbufferWrite>:
  bool ret = true;
  uint32_t index;
  uint32_t next_index;
  uint32_t i;

  if( p_node->p_buf == NULL ) return false;
 8000324:	68c3      	ldr	r3, [r0, #12]
 8000326:	b1b3      	cbz	r3, 8000356 <qbufferWrite+0x32>
{
 8000328:	b4f0      	push	{r4, r5, r6, r7}
 800032a:	2400      	movs	r4, #0
 800032c:	e007      	b.n	800033e <qbufferWrite+0x1a>
    if( next_index == p_node->length )
    {
      next_index = 0;
    }

    if( next_index != p_node->ptr_out )
 800032e:	6846      	ldr	r6, [r0, #4]
 8000330:	42b3      	cmp	r3, r6
 8000332:	d012      	beq.n	800035a <qbufferWrite+0x36>
    {
      p_node->p_buf[index] = p_data[i];
 8000334:	68c6      	ldr	r6, [r0, #12]
 8000336:	5d0f      	ldrb	r7, [r1, r4]
 8000338:	5577      	strb	r7, [r6, r5]
      p_node->ptr_in = next_index;
 800033a:	6003      	str	r3, [r0, #0]
  for( i=0; i<length; i++ )
 800033c:	3401      	adds	r4, #1
 800033e:	4294      	cmp	r4, r2
 8000340:	d206      	bcs.n	8000350 <qbufferWrite+0x2c>
    index = p_node->ptr_in;
 8000342:	6805      	ldr	r5, [r0, #0]
    next_index = p_node->ptr_in + 1;
 8000344:	1c6b      	adds	r3, r5, #1
    if( next_index == p_node->length )
 8000346:	6886      	ldr	r6, [r0, #8]
 8000348:	42b3      	cmp	r3, r6
 800034a:	d1f0      	bne.n	800032e <qbufferWrite+0xa>
      next_index = 0;
 800034c:	2300      	movs	r3, #0
 800034e:	e7ee      	b.n	800032e <qbufferWrite+0xa>
  bool ret = true;
 8000350:	2001      	movs	r0, #1
      break;
    }
  }
  return ret;

}
 8000352:	bcf0      	pop	{r4, r5, r6, r7}
 8000354:	4770      	bx	lr
  if( p_node->p_buf == NULL ) return false;
 8000356:	2000      	movs	r0, #0
 8000358:	4770      	bx	lr
      ret = false;  // Full Error
 800035a:	2000      	movs	r0, #0
 800035c:	e7f9      	b.n	8000352 <qbufferWrite+0x2e>

0800035e <qbufferRead>:
  bool ret = true;
  uint32_t index;
  uint32_t next_index;
  uint32_t i;

  if( p_node->p_buf == NULL ) return false;
 800035e:	68c3      	ldr	r3, [r0, #12]
 8000360:	b1c3      	cbz	r3, 8000394 <qbufferRead+0x36>
 8000362:	2300      	movs	r3, #0

  for(i=0; i<length; i++)
 8000364:	4293      	cmp	r3, r2
 8000366:	d219      	bcs.n	800039c <qbufferRead+0x3e>
{
 8000368:	b470      	push	{r4, r5, r6}
 800036a:	e009      	b.n	8000380 <qbufferRead+0x22>
    if( next_index == p_node->length )
    {
      next_index = 0;
    }

    if( index != p_node->ptr_in)
 800036c:	6806      	ldr	r6, [r0, #0]
 800036e:	42b4      	cmp	r4, r6
 8000370:	d012      	beq.n	8000398 <qbufferRead+0x3a>
    {
      p_data[i] = p_node->p_buf[index];
 8000372:	68c6      	ldr	r6, [r0, #12]
 8000374:	5d34      	ldrb	r4, [r6, r4]
 8000376:	54cc      	strb	r4, [r1, r3]
      p_node->ptr_out = next_index;
 8000378:	6045      	str	r5, [r0, #4]
  for(i=0; i<length; i++)
 800037a:	3301      	adds	r3, #1
 800037c:	4293      	cmp	r3, r2
 800037e:	d206      	bcs.n	800038e <qbufferRead+0x30>
    index = p_node->ptr_out;
 8000380:	6844      	ldr	r4, [r0, #4]
    next_index = p_node->ptr_out + 1;
 8000382:	1c65      	adds	r5, r4, #1
    if( next_index == p_node->length )
 8000384:	6886      	ldr	r6, [r0, #8]
 8000386:	42b5      	cmp	r5, r6
 8000388:	d1f0      	bne.n	800036c <qbufferRead+0xe>
      next_index = 0;
 800038a:	2500      	movs	r5, #0
 800038c:	e7ee      	b.n	800036c <qbufferRead+0xe>
  bool ret = true;
 800038e:	2001      	movs	r0, #1
      ret = false;  // EMPTY Error
      break;
    }
  }
  return ret;
}
 8000390:	bc70      	pop	{r4, r5, r6}
 8000392:	4770      	bx	lr
  if( p_node->p_buf == NULL ) return false;
 8000394:	2000      	movs	r0, #0
 8000396:	4770      	bx	lr
      ret = false;  // EMPTY Error
 8000398:	2000      	movs	r0, #0
 800039a:	e7f9      	b.n	8000390 <qbufferRead+0x32>
  bool ret = true;
 800039c:	2001      	movs	r0, #1
}
 800039e:	4770      	bx	lr

080003a0 <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node)
{
  uint32_t length;

  length = (p_node->length + p_node->ptr_in-p_node->ptr_out) % p_node->length;
 80003a0:	6882      	ldr	r2, [r0, #8]
 80003a2:	6803      	ldr	r3, [r0, #0]
 80003a4:	4413      	add	r3, r2
 80003a6:	6840      	ldr	r0, [r0, #4]
 80003a8:	1a1b      	subs	r3, r3, r0
 80003aa:	fbb3 f0f2 	udiv	r0, r3, r2

  return length;
}
 80003ae:	fb02 3010 	mls	r0, r2, r0, r3
 80003b2:	4770      	bx	lr

080003b4 <qbufferFlush>:

void qbufferFlush(qbuffer_t *p_node)
{
  p_node->ptr_in = 0;
 80003b4:	2300      	movs	r3, #0
 80003b6:	6003      	str	r3, [r0, #0]
  p_node->ptr_out = 0;
 80003b8:	6043      	str	r3, [r0, #4]
 80003ba:	4770      	bx	lr

080003bc <buttonInit>:

#include "button.h"


void buttonInit(void)
{
 80003bc:	b500      	push	{lr}
 80003be:	b085      	sub	sp, #20
  GPIO_InitTypeDef GPIO_InitStruct;

  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003c0:	2300      	movs	r3, #0
 80003c2:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c4:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c6:	2302      	movs	r3, #2
 80003c8:	9303      	str	r3, [sp, #12]

  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003ca:	a904      	add	r1, sp, #16
 80003cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003d0:	f841 3d10 	str.w	r3, [r1, #-16]!
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003d4:	4802      	ldr	r0, [pc, #8]	; (80003e0 <buttonInit+0x24>)
 80003d6:	f000 ff75 	bl	80012c4 <HAL_GPIO_Init>
}
 80003da:	b005      	add	sp, #20
 80003dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80003e0:	40011000 	.word	0x40011000

080003e4 <buttonGetPressed>:

bool buttonGetPressed(uint8_t ch)
{
 80003e4:	b508      	push	{r3, lr}
  if( HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET )
 80003e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003ea:	4804      	ldr	r0, [pc, #16]	; (80003fc <buttonGetPressed+0x18>)
 80003ec:	f001 f8d8 	bl	80015a0 <HAL_GPIO_ReadPin>
 80003f0:	b108      	cbz	r0, 80003f6 <buttonGetPressed+0x12>
  {
    return true;
  }
  else
  {
    return false;
 80003f2:	2000      	movs	r0, #0
  }
}
 80003f4:	bd08      	pop	{r3, pc}
    return true;
 80003f6:	2001      	movs	r0, #1
 80003f8:	bd08      	pop	{r3, pc}
 80003fa:	bf00      	nop
 80003fc:	40011000 	.word	0x40011000

08000400 <ledInit>:


#include "led.h"

void ledInit(void)
{
 8000400:	b500      	push	{lr}
 8000402:	b085      	sub	sp, #20

  GPIO_InitTypeDef  GPIO_InitStruct;

  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8000404:	2301      	movs	r3, #1
 8000406:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8000408:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800040a:	2303      	movs	r3, #3
 800040c:	9303      	str	r3, [sp, #12]

  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800040e:	a904      	add	r1, sp, #16
 8000410:	2320      	movs	r3, #32
 8000412:	f841 3d10 	str.w	r3, [r1, #-16]!
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000416:	4803      	ldr	r0, [pc, #12]	; (8000424 <ledInit+0x24>)
 8000418:	f000 ff54 	bl	80012c4 <HAL_GPIO_Init>

}
 800041c:	b005      	add	sp, #20
 800041e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000422:	bf00      	nop
 8000424:	40010800 	.word	0x40010800

08000428 <ledOn>:

void ledOn(uint8_t ch)
{
 8000428:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800042a:	2201      	movs	r2, #1
 800042c:	2120      	movs	r1, #32
 800042e:	4802      	ldr	r0, [pc, #8]	; (8000438 <ledOn+0x10>)
 8000430:	f001 f8bd 	bl	80015ae <HAL_GPIO_WritePin>
 8000434:	bd08      	pop	{r3, pc}
 8000436:	bf00      	nop
 8000438:	40010800 	.word	0x40010800

0800043c <ledOff>:
}

void ledOff(uint8_t ch)
{
 800043c:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800043e:	2200      	movs	r2, #0
 8000440:	2120      	movs	r1, #32
 8000442:	4802      	ldr	r0, [pc, #8]	; (800044c <ledOff+0x10>)
 8000444:	f001 f8b3 	bl	80015ae <HAL_GPIO_WritePin>
 8000448:	bd08      	pop	{r3, pc}
 800044a:	bf00      	nop
 800044c:	40010800 	.word	0x40010800

08000450 <ledToggle>:
}

void ledToggle(uint8_t ch)
{
 8000450:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000452:	2120      	movs	r1, #32
 8000454:	4801      	ldr	r0, [pc, #4]	; (800045c <ledToggle+0xc>)
 8000456:	f001 f8b0 	bl	80015ba <HAL_GPIO_TogglePin>
 800045a:	bd08      	pop	{r3, pc}
 800045c:	40010800 	.word	0x40010800

08000460 <uartStartRx>:

  return ret;
}

void uartStartRx(uint8_t channel)
{
 8000460:	b508      	push	{r3, lr}
  uart_t *p_uart = &uart_tbl[channel];

  if(p_uart->rx_mode == UART_MODE_INTERRUPT)
 8000462:	236c      	movs	r3, #108	; 0x6c
 8000464:	4a0a      	ldr	r2, [pc, #40]	; (8000490 <uartStartRx+0x30>)
 8000466:	fb03 2300 	mla	r3, r3, r0, r2
 800046a:	7a5b      	ldrb	r3, [r3, #9]
 800046c:	2b01      	cmp	r3, #1
 800046e:	d000      	beq.n	8000472 <uartStartRx+0x12>
 8000470:	bd08      	pop	{r3, pc}
  {
    HAL_UART_Receive_IT(&p_uart->handle, p_uart->rx_buf, 1);
 8000472:	236c      	movs	r3, #108	; 0x6c
 8000474:	fb03 f000 	mul.w	r0, r3, r0
 8000478:	f100 0108 	add.w	r1, r0, #8
 800047c:	4411      	add	r1, r2
 800047e:	3028      	adds	r0, #40	; 0x28
 8000480:	4410      	add	r0, r2
 8000482:	2201      	movs	r2, #1
 8000484:	3102      	adds	r1, #2
 8000486:	3004      	adds	r0, #4
 8000488:	f002 f875 	bl	8002576 <HAL_UART_Receive_IT>
  }
}
 800048c:	e7f0      	b.n	8000470 <uartStartRx+0x10>
 800048e:	bf00      	nop
 8000490:	20000098 	.word	0x20000098

08000494 <uartRxHandler>:

void uartRxHandler(uint8_t channel)
{
  uart_t *p_uart = &uart_tbl[channel];

  if(p_uart->rx_mode == UART_MODE_INTERRUPT)
 8000494:	236c      	movs	r3, #108	; 0x6c
 8000496:	4a10      	ldr	r2, [pc, #64]	; (80004d8 <uartRxHandler+0x44>)
 8000498:	fb03 2300 	mla	r3, r3, r0, r2
 800049c:	7a5b      	ldrb	r3, [r3, #9]
 800049e:	2b01      	cmp	r3, #1
 80004a0:	d000      	beq.n	80004a4 <uartRxHandler+0x10>
 80004a2:	4770      	bx	lr
{
 80004a4:	b570      	push	{r4, r5, r6, lr}
 80004a6:	4604      	mov	r4, r0
  {
    qbufferWrite(&p_uart->qbuffer_rx, &p_uart->rx_buf[0], 1);
 80004a8:	256c      	movs	r5, #108	; 0x6c
 80004aa:	fb05 f600 	mul.w	r6, r5, r0
 80004ae:	f106 0108 	add.w	r1, r6, #8
 80004b2:	4615      	mov	r5, r2
 80004b4:	4411      	add	r1, r2
 80004b6:	f106 0018 	add.w	r0, r6, #24
 80004ba:	4410      	add	r0, r2
 80004bc:	2201      	movs	r2, #1
 80004be:	3102      	adds	r1, #2
 80004c0:	3004      	adds	r0, #4
 80004c2:	f7ff ff2f 	bl	8000324 <qbufferWrite>

    __HAL_UNLOCK(&p_uart->handle);
 80004c6:	4435      	add	r5, r6
 80004c8:	2300      	movs	r3, #0
 80004ca:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
    uartStartRx(channel);
 80004ce:	4620      	mov	r0, r4
 80004d0:	f7ff ffc6 	bl	8000460 <uartStartRx>
 80004d4:	bd70      	pop	{r4, r5, r6, pc}
 80004d6:	bf00      	nop
 80004d8:	20000098 	.word	0x20000098

080004dc <uartInit>:
  for(i=0; i<UART_MAX_CH; i++)
 80004dc:	2300      	movs	r3, #0
 80004de:	b103      	cbz	r3, 80004e2 <uartInit+0x6>
 80004e0:	4770      	bx	lr
{
 80004e2:	b410      	push	{r4}
    uart_tbl[i].is_open = false;
 80004e4:	4c07      	ldr	r4, [pc, #28]	; (8000504 <uartInit+0x28>)
 80004e6:	226c      	movs	r2, #108	; 0x6c
 80004e8:	fb02 f203 	mul.w	r2, r2, r3
 80004ec:	18a0      	adds	r0, r4, r2
 80004ee:	2100      	movs	r1, #0
 80004f0:	54a1      	strb	r1, [r4, r2]
    uart_tbl[i].rx_mode = UART_MODE_POLLING;
 80004f2:	7241      	strb	r1, [r0, #9]
    uart_tbl[i].tx_mode = UART_MODE_POLLING;
 80004f4:	7201      	strb	r1, [r0, #8]
  for(i=0; i<UART_MAX_CH; i++)
 80004f6:	3301      	adds	r3, #1
 80004f8:	b2db      	uxtb	r3, r3
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d0f2      	beq.n	80004e4 <uartInit+0x8>
}
 80004fe:	bc10      	pop	{r4}
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	20000098 	.word	0x20000098

08000508 <uartOpen>:
  switch(channel)
 8000508:	b108      	cbz	r0, 800050e <uartOpen+0x6>
}
 800050a:	2000      	movs	r0, #0
 800050c:	4770      	bx	lr
{
 800050e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000510:	4605      	mov	r5, r0
 8000512:	460e      	mov	r6, r1
      p_uart->handle.Instance = USART2;
 8000514:	481a      	ldr	r0, [pc, #104]	; (8000580 <uartOpen+0x78>)
 8000516:	236c      	movs	r3, #108	; 0x6c
 8000518:	fb03 f305 	mul.w	r3, r3, r5
 800051c:	18c2      	adds	r2, r0, r3
 800051e:	4919      	ldr	r1, [pc, #100]	; (8000584 <uartOpen+0x7c>)
 8000520:	62d1      	str	r1, [r2, #44]	; 0x2c
      p_uart->handle.Init.BaudRate = baud;
 8000522:	6316      	str	r6, [r2, #48]	; 0x30
      p_uart->handle.Init.WordLength = UART_WORDLENGTH_8B;
 8000524:	2100      	movs	r1, #0
 8000526:	6351      	str	r1, [r2, #52]	; 0x34
      p_uart->handle.Init.StopBits = UART_STOPBITS_1;
 8000528:	6391      	str	r1, [r2, #56]	; 0x38
      p_uart->handle.Init.Parity = UART_PARITY_NONE;
 800052a:	63d1      	str	r1, [r2, #60]	; 0x3c
      p_uart->handle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800052c:	6451      	str	r1, [r2, #68]	; 0x44
      p_uart->handle.Init.Mode = UART_MODE_TX_RX;
 800052e:	210c      	movs	r1, #12
 8000530:	6411      	str	r1, [r2, #64]	; 0x40
      if(HAL_UART_DeInit(&p_uart->handle) != HAL_OK)
 8000532:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8000536:	4404      	add	r4, r0
 8000538:	3404      	adds	r4, #4
 800053a:	4620      	mov	r0, r4
 800053c:	f001 ff00 	bl	8002340 <HAL_UART_DeInit>
 8000540:	b108      	cbz	r0, 8000546 <uartOpen+0x3e>
}
 8000542:	2000      	movs	r0, #0
 8000544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_UART_Init(&p_uart->handle) != HAL_OK)
 8000546:	4620      	mov	r0, r4
 8000548:	f001 fe19 	bl	800217e <HAL_UART_Init>
 800054c:	2800      	cmp	r0, #0
 800054e:	d1f8      	bne.n	8000542 <uartOpen+0x3a>
      qbufferCreate(&p_uart->qbuffer_rx, uart_rx_qbuf[channel], UART_RX_BUF_LENGTH);
 8000550:	246c      	movs	r4, #108	; 0x6c
 8000552:	fb04 f405 	mul.w	r4, r4, r5
 8000556:	f104 0018 	add.w	r0, r4, #24
 800055a:	4f09      	ldr	r7, [pc, #36]	; (8000580 <uartOpen+0x78>)
 800055c:	4438      	add	r0, r7
 800055e:	2210      	movs	r2, #16
 8000560:	4909      	ldr	r1, [pc, #36]	; (8000588 <uartOpen+0x80>)
 8000562:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8000566:	3004      	adds	r0, #4
 8000568:	f7ff fed1 	bl	800030e <qbufferCreate>
      p_uart->rx_mode = UART_MODE_INTERRUPT;
 800056c:	193a      	adds	r2, r7, r4
 800056e:	2301      	movs	r3, #1
 8000570:	7253      	strb	r3, [r2, #9]
      p_uart->baud = baud;
 8000572:	6056      	str	r6, [r2, #4]
      p_uart->is_open = true;
 8000574:	553b      	strb	r3, [r7, r4]
      uartStartRx(channel);
 8000576:	4628      	mov	r0, r5
 8000578:	f7ff ff72 	bl	8000460 <uartStartRx>
      break;
 800057c:	e7e1      	b.n	8000542 <uartOpen+0x3a>
 800057e:	bf00      	nop
 8000580:	20000098 	.word	0x20000098
 8000584:	40004400 	.word	0x40004400
 8000588:	20000104 	.word	0x20000104

0800058c <uartClose>:
{
 800058c:	b510      	push	{r4, lr}
 if(channel >= UART_MAX_CH )
 800058e:	b970      	cbnz	r0, 80005ae <uartClose+0x22>
 if(uart_tbl[channel].is_open == true)
 8000590:	236c      	movs	r3, #108	; 0x6c
 8000592:	fb03 f300 	mul.w	r3, r3, r0
 8000596:	4907      	ldr	r1, [pc, #28]	; (80005b4 <uartClose+0x28>)
 8000598:	5ccc      	ldrb	r4, [r1, r3]
 800059a:	b14c      	cbz	r4, 80005b0 <uartClose+0x24>
   if(HAL_UART_DeInit(&uart_tbl[channel].handle) == HAL_OK)
 800059c:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80005a0:	4408      	add	r0, r1
 80005a2:	3004      	adds	r0, #4
 80005a4:	f001 fecc 	bl	8002340 <HAL_UART_DeInit>
 80005a8:	b110      	cbz	r0, 80005b0 <uartClose+0x24>
 bool ret = false;
 80005aa:	2400      	movs	r4, #0
 80005ac:	e000      	b.n	80005b0 <uartClose+0x24>
   return false;
 80005ae:	2400      	movs	r4, #0
}
 80005b0:	4620      	mov	r0, r4
 80005b2:	bd10      	pop	{r4, pc}
 80005b4:	20000098 	.word	0x20000098

080005b8 <uartAvailable>:
  if (channel >= UART_MAX_CH)
 80005b8:	b108      	cbz	r0, 80005be <uartAvailable+0x6>
    return 0;
 80005ba:	2000      	movs	r0, #0
 80005bc:	4770      	bx	lr
{
 80005be:	b508      	push	{r3, lr}
 80005c0:	4603      	mov	r3, r0
  return qbufferAvailable(&uart_tbl[channel].qbuffer_rx);
 80005c2:	206c      	movs	r0, #108	; 0x6c
 80005c4:	fb00 f003 	mul.w	r0, r0, r3
 80005c8:	3018      	adds	r0, #24
 80005ca:	4b03      	ldr	r3, [pc, #12]	; (80005d8 <uartAvailable+0x20>)
 80005cc:	4418      	add	r0, r3
 80005ce:	3004      	adds	r0, #4
 80005d0:	f7ff fee6 	bl	80003a0 <qbufferAvailable>
 80005d4:	bd08      	pop	{r3, pc}
 80005d6:	bf00      	nop
 80005d8:	20000098 	.word	0x20000098

080005dc <uartFlush>:
{
 80005dc:	b508      	push	{r3, lr}
  if(uart_tbl[channel].rx_mode == UART_MODE_INTERRUPT)
 80005de:	236c      	movs	r3, #108	; 0x6c
 80005e0:	4a07      	ldr	r2, [pc, #28]	; (8000600 <uartFlush+0x24>)
 80005e2:	fb03 2300 	mla	r3, r3, r0, r2
 80005e6:	7a5b      	ldrb	r3, [r3, #9]
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d000      	beq.n	80005ee <uartFlush+0x12>
 80005ec:	bd08      	pop	{r3, pc}
    qbufferFlush(&uart_tbl[channel].qbuffer_rx);
 80005ee:	236c      	movs	r3, #108	; 0x6c
 80005f0:	fb03 f000 	mul.w	r0, r3, r0
 80005f4:	3018      	adds	r0, #24
 80005f6:	4410      	add	r0, r2
 80005f8:	3004      	adds	r0, #4
 80005fa:	f7ff fedb 	bl	80003b4 <qbufferFlush>
}
 80005fe:	e7f5      	b.n	80005ec <uartFlush+0x10>
 8000600:	20000098 	.word	0x20000098

08000604 <uartWrite>:
{
 8000604:	b538      	push	{r3, r4, r5, lr}
  if(p_uart->rx_mode == UART_MODE_INTERRUPT)
 8000606:	236c      	movs	r3, #108	; 0x6c
 8000608:	4d0c      	ldr	r5, [pc, #48]	; (800063c <uartWrite+0x38>)
 800060a:	fb03 5300 	mla	r3, r3, r0, r5
 800060e:	7a5b      	ldrb	r3, [r3, #9]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d001      	beq.n	8000618 <uartWrite+0x14>
  int32_t ret = 0;
 8000614:	2000      	movs	r0, #0
 8000616:	bd38      	pop	{r3, r4, r5, pc}
 8000618:	4614      	mov	r4, r2
    if(HAL_UART_Transmit(&p_uart->handle, (uint8_t*)p_data, length, 1000) == HAL_OK)
 800061a:	236c      	movs	r3, #108	; 0x6c
 800061c:	fb03 f000 	mul.w	r0, r3, r0
 8000620:	3028      	adds	r0, #40	; 0x28
 8000622:	4428      	add	r0, r5
 8000624:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000628:	b292      	uxth	r2, r2
 800062a:	3004      	adds	r0, #4
 800062c:	f001 fe9b 	bl	8002366 <HAL_UART_Transmit>
 8000630:	b908      	cbnz	r0, 8000636 <uartWrite+0x32>
      ret = length;
 8000632:	4620      	mov	r0, r4
 8000634:	bd38      	pop	{r3, r4, r5, pc}
  int32_t ret = 0;
 8000636:	2000      	movs	r0, #0
}
 8000638:	bd38      	pop	{r3, r4, r5, pc}
 800063a:	bf00      	nop
 800063c:	20000098 	.word	0x20000098

08000640 <uartPutch>:
{
 8000640:	b500      	push	{lr}
 8000642:	b083      	sub	sp, #12
 8000644:	ab02      	add	r3, sp, #8
 8000646:	f803 1d01 	strb.w	r1, [r3, #-1]!
  uartWrite(channel, &ch, 1);
 800064a:	2201      	movs	r2, #1
 800064c:	4619      	mov	r1, r3
 800064e:	f7ff ffd9 	bl	8000604 <uartWrite>
}
 8000652:	b003      	add	sp, #12
 8000654:	f85d fb04 	ldr.w	pc, [sp], #4

08000658 <uartRead>:
{
 8000658:	b500      	push	{lr}
 800065a:	b083      	sub	sp, #12
  uint8_t ret = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	f88d 3007 	strb.w	r3, [sp, #7]
  if(p_uart->rx_mode == UART_MODE_INTERRUPT)
 8000662:	236c      	movs	r3, #108	; 0x6c
 8000664:	4a0b      	ldr	r2, [pc, #44]	; (8000694 <uartRead+0x3c>)
 8000666:	fb03 2300 	mla	r3, r3, r0, r2
 800066a:	7a5b      	ldrb	r3, [r3, #9]
 800066c:	2b01      	cmp	r3, #1
 800066e:	d004      	beq.n	800067a <uartRead+0x22>
}
 8000670:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000674:	b003      	add	sp, #12
 8000676:	f85d fb04 	ldr.w	pc, [sp], #4
    qbufferRead(&p_uart->qbuffer_rx, &ret, 1);
 800067a:	236c      	movs	r3, #108	; 0x6c
 800067c:	fb03 f000 	mul.w	r0, r3, r0
 8000680:	3018      	adds	r0, #24
 8000682:	4410      	add	r0, r2
 8000684:	2201      	movs	r2, #1
 8000686:	f10d 0107 	add.w	r1, sp, #7
 800068a:	3004      	adds	r0, #4
 800068c:	f7ff fe67 	bl	800035e <qbufferRead>
 8000690:	e7ee      	b.n	8000670 <uartRead+0x18>
 8000692:	bf00      	nop
 8000694:	20000098 	.word	0x20000098

08000698 <uartGetch>:
{
 8000698:	b510      	push	{r4, lr}
 800069a:	4604      	mov	r4, r0
    if(uartAvailable(channel) > 0)
 800069c:	4620      	mov	r0, r4
 800069e:	f7ff ff8b 	bl	80005b8 <uartAvailable>
 80006a2:	2800      	cmp	r0, #0
 80006a4:	d0fa      	beq.n	800069c <uartGetch+0x4>
      ret = uartRead(channel);
 80006a6:	4620      	mov	r0, r4
 80006a8:	f7ff ffd6 	bl	8000658 <uartRead>
}
 80006ac:	bd10      	pop	{r4, pc}

080006ae <uartPrintf>:
{
 80006ae:	b40e      	push	{r1, r2, r3}
 80006b0:	b510      	push	{r4, lr}
 80006b2:	b0c3      	sub	sp, #268	; 0x10c
 80006b4:	4604      	mov	r4, r0
 80006b6:	ab45      	add	r3, sp, #276	; 0x114
 80006b8:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(arg, fmt);
 80006bc:	9341      	str	r3, [sp, #260]	; 0x104
  len = vsnprintf(printf_buffer, 255, fmt, arg);
 80006be:	21ff      	movs	r1, #255	; 0xff
 80006c0:	a801      	add	r0, sp, #4
 80006c2:	f002 fcc1 	bl	8003048 <vsniprintf>
  ret = uartWrite(channel, (uint8_t*)printf_buffer, len);
 80006c6:	4602      	mov	r2, r0
 80006c8:	a901      	add	r1, sp, #4
 80006ca:	4620      	mov	r0, r4
 80006cc:	f7ff ff9a 	bl	8000604 <uartWrite>
}
 80006d0:	b043      	add	sp, #268	; 0x10c
 80006d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006d6:	b003      	add	sp, #12
 80006d8:	4770      	bx	lr

080006da <uartErrHandler>:
  }
}

void uartErrHandler(uint8_t channel)
{
 80006da:	b510      	push	{r4, lr}
 80006dc:	4604      	mov	r4, r0

  uartFlush(channel);
 80006de:	f7ff ff7d 	bl	80005dc <uartFlush>
  uartStartRx(channel);
 80006e2:	4620      	mov	r0, r4
 80006e4:	f7ff febc 	bl	8000460 <uartStartRx>
 80006e8:	bd10      	pop	{r4, pc}

080006ea <HAL_UART_RxCpltCallback>:

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80006ea:	b510      	push	{r4, lr}
 80006ec:	4604      	mov	r4, r0
  ledToggle(0);  // for debugging
 80006ee:	2000      	movs	r0, #0
 80006f0:	f7ff feae 	bl	8000450 <ledToggle>

  if(UartHandle->Instance == USART2)
 80006f4:	6822      	ldr	r2, [r4, #0]
 80006f6:	4b04      	ldr	r3, [pc, #16]	; (8000708 <HAL_UART_RxCpltCallback+0x1e>)
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d000      	beq.n	80006fe <HAL_UART_RxCpltCallback+0x14>
 80006fc:	bd10      	pop	{r4, pc}
  {
    uartRxHandler(_DEF_UART1);
 80006fe:	2000      	movs	r0, #0
 8000700:	f7ff fec8 	bl	8000494 <uartRxHandler>
  }
}
 8000704:	e7fa      	b.n	80006fc <HAL_UART_RxCpltCallback+0x12>
 8000706:	bf00      	nop
 8000708:	40004400 	.word	0x40004400

0800070c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 800070c:	b510      	push	{r4, lr}
 800070e:	4604      	mov	r4, r0
  HAL_UART_DeInit(UartHandle);
 8000710:	f001 fe16 	bl	8002340 <HAL_UART_DeInit>
  HAL_UART_Init(UartHandle);
 8000714:	4620      	mov	r0, r4
 8000716:	f001 fd32 	bl	800217e <HAL_UART_Init>

  if (UartHandle->Instance == USART2)
 800071a:	6822      	ldr	r2, [r4, #0]
 800071c:	4b03      	ldr	r3, [pc, #12]	; (800072c <HAL_UART_ErrorCallback+0x20>)
 800071e:	429a      	cmp	r2, r3
 8000720:	d000      	beq.n	8000724 <HAL_UART_ErrorCallback+0x18>
 8000722:	bd10      	pop	{r4, pc}
  {
    uartErrHandler(_DEF_UART1);
 8000724:	2000      	movs	r0, #0
 8000726:	f7ff ffd8 	bl	80006da <uartErrHandler>
  }
}
 800072a:	e7fa      	b.n	8000722 <HAL_UART_ErrorCallback+0x16>
 800072c:	40004400 	.word	0x40004400

08000730 <USART2_IRQHandler>:

//-- _DEF_UART1 Interrupt
//
void USART2_IRQHandler(void)
{
 8000730:	b508      	push	{r3, lr}
  HAL_UART_IRQHandler(&uart_tbl[_DEF_UART1].handle);
 8000732:	4802      	ldr	r0, [pc, #8]	; (800073c <USART2_IRQHandler+0xc>)
 8000734:	f002 f9d0 	bl	8002ad8 <HAL_UART_IRQHandler>
 8000738:	bd08      	pop	{r3, pc}
 800073a:	bf00      	nop
 800073c:	200000c4 	.word	0x200000c4

08000740 <HAL_UART_MspInit>:
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
  GPIO_InitTypeDef  GPIO_InitStruct;


  if (huart->Instance == USART2)
 8000740:	6802      	ldr	r2, [r0, #0]
 8000742:	4b1d      	ldr	r3, [pc, #116]	; (80007b8 <HAL_UART_MspInit+0x78>)
 8000744:	429a      	cmp	r2, r3
 8000746:	d000      	beq.n	800074a <HAL_UART_MspInit+0xa>
 8000748:	4770      	bx	lr
{
 800074a:	b570      	push	{r4, r5, r6, lr}
 800074c:	b086      	sub	sp, #24
  {
    /*##-1- Enable peripherals and GPIO Clocks #################################*/
    /* Enable GPIO TX/RX clock */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8000752:	699a      	ldr	r2, [r3, #24]
 8000754:	f042 0204 	orr.w	r2, r2, #4
 8000758:	619a      	str	r2, [r3, #24]
 800075a:	699a      	ldr	r2, [r3, #24]
 800075c:	f002 0204 	and.w	r2, r2, #4
 8000760:	9200      	str	r2, [sp, #0]
 8000762:	9a00      	ldr	r2, [sp, #0]


    /* Enable USARTx clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000764:	69da      	ldr	r2, [r3, #28]
 8000766:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800076a:	61da      	str	r2, [r3, #28]
 800076c:	69db      	ldr	r3, [r3, #28]
 800076e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000772:	9301      	str	r3, [sp, #4]
 8000774:	9b01      	ldr	r3, [sp, #4]

    /*##-2- Configure peripheral GPIO ##########################################*/
    /* UART TX GPIO pin configuration  */
    GPIO_InitStruct.Pin       = GPIO_PIN_2;
 8000776:	2304      	movs	r3, #4
 8000778:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800077a:	2302      	movs	r3, #2
 800077c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800077e:	2501      	movs	r5, #1
 8000780:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000782:	2303      	movs	r3, #3
 8000784:	9305      	str	r3, [sp, #20]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000786:	4e0d      	ldr	r6, [pc, #52]	; (80007bc <HAL_UART_MspInit+0x7c>)
 8000788:	a902      	add	r1, sp, #8
 800078a:	4630      	mov	r0, r6
 800078c:	f000 fd9a 	bl	80012c4 <HAL_GPIO_Init>

    /* UART RX GPIO pin configuration  */
    GPIO_InitStruct.Pin       = GPIO_PIN_3;
 8000790:	2308      	movs	r3, #8
 8000792:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode      = GPIO_MODE_INPUT;
 8000794:	2400      	movs	r4, #0
 8000796:	9403      	str	r4, [sp, #12]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000798:	eb0d 0103 	add.w	r1, sp, r3
 800079c:	4630      	mov	r0, r6
 800079e:	f000 fd91 	bl	80012c4 <HAL_GPIO_Init>

    /*##-3- Configure the NVIC for UART ########################################*/
    /* NVIC for USART */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 1);
 80007a2:	462a      	mov	r2, r5
 80007a4:	4621      	mov	r1, r4
 80007a6:	2026      	movs	r0, #38	; 0x26
 80007a8:	f000 f93c 	bl	8000a24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80007ac:	2026      	movs	r0, #38	; 0x26
 80007ae:	f000 f96b 	bl	8000a88 <HAL_NVIC_EnableIRQ>
  }
}
 80007b2:	b006      	add	sp, #24
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	bf00      	nop
 80007b8:	40004400 	.word	0x40004400
 80007bc:	40010800 	.word	0x40010800

080007c0 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
  if (huart->Instance == USART2)
 80007c0:	6802      	ldr	r2, [r0, #0]
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <HAL_UART_MspDeInit+0x3c>)
 80007c4:	429a      	cmp	r2, r3
 80007c6:	d000      	beq.n	80007ca <HAL_UART_MspDeInit+0xa>
 80007c8:	4770      	bx	lr
{
 80007ca:	b510      	push	{r4, lr}
  {
    /*##-1- Reset peripherals ##################################################*/
    __HAL_RCC_USART2_FORCE_RESET();
 80007cc:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 80007d0:	691a      	ldr	r2, [r3, #16]
 80007d2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80007d6:	611a      	str	r2, [r3, #16]
    __HAL_RCC_USART2_RELEASE_RESET();
 80007d8:	691a      	ldr	r2, [r3, #16]
 80007da:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80007de:	611a      	str	r2, [r3, #16]

    /*##-2- Disable peripherals and GPIO Clocks #################################*/
    /* Configure UART Tx as alternate function  */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2);
 80007e0:	4c07      	ldr	r4, [pc, #28]	; (8000800 <HAL_UART_MspDeInit+0x40>)
 80007e2:	2104      	movs	r1, #4
 80007e4:	4620      	mov	r0, r4
 80007e6:	f000 fe63 	bl	80014b0 <HAL_GPIO_DeInit>
    /* Configure UART Rx as alternate function  */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3);
 80007ea:	2108      	movs	r1, #8
 80007ec:	4620      	mov	r0, r4
 80007ee:	f000 fe5f 	bl	80014b0 <HAL_GPIO_DeInit>

    /*##-3- Disable the NVIC for UART ##########################################*/
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80007f2:	2026      	movs	r0, #38	; 0x26
 80007f4:	f000 f954 	bl	8000aa0 <HAL_NVIC_DisableIRQ>
 80007f8:	bd10      	pop	{r4, pc}
 80007fa:	bf00      	nop
 80007fc:	40004400 	.word	0x40004400
 8000800:	40010800 	.word	0x40010800

08000804 <hwInit>:
 */

#include "hw.h"

void hwInit(void)
{
 8000804:	b508      	push	{r3, lr}
  bspInit();
 8000806:	f7ff fce6 	bl	80001d6 <bspInit>

  ledInit();
 800080a:	f7ff fdf9 	bl	8000400 <ledInit>
  buttonInit();
 800080e:	f7ff fdd5 	bl	80003bc <buttonInit>
  uartInit();
 8000812:	f7ff fe63 	bl	80004dc <uartInit>
 8000816:	bd08      	pop	{r3, pc}

08000818 <delay>:
}

void delay(uint32_t time_ms)
{
 8000818:	b508      	push	{r3, lr}
  HAL_Delay(time_ms);
 800081a:	f000 f87b 	bl	8000914 <HAL_Delay>
 800081e:	bd08      	pop	{r3, pc}

08000820 <millis>:
}

uint32_t millis(void)
{
 8000820:	b508      	push	{r3, lr}
  return HAL_GetTick();
 8000822:	f000 f855 	bl	80008d0 <HAL_GetTick>
}
 8000826:	bd08      	pop	{r3, pc}

08000828 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000828:	4770      	bx	lr

0800082a <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 800082a:	4770      	bx	lr

0800082c <HAL_DeInit>:
{
 800082c:	b510      	push	{r4, lr}
  __HAL_RCC_APB1_FORCE_RESET();
 800082e:	4b06      	ldr	r3, [pc, #24]	; (8000848 <HAL_DeInit+0x1c>)
 8000830:	f04f 32ff 	mov.w	r2, #4294967295
 8000834:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000836:	2400      	movs	r4, #0
 8000838:	611c      	str	r4, [r3, #16]
  __HAL_RCC_APB2_FORCE_RESET();
 800083a:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 800083c:	60dc      	str	r4, [r3, #12]
  HAL_MspDeInit();
 800083e:	f7ff fff4 	bl	800082a <HAL_MspDeInit>
}
 8000842:	4620      	mov	r0, r4
 8000844:	bd10      	pop	{r4, pc}
 8000846:	bf00      	nop
 8000848:	40021000 	.word	0x40021000

0800084c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800084c:	b510      	push	{r4, lr}
 800084e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000850:	4b0e      	ldr	r3, [pc, #56]	; (800088c <HAL_InitTick+0x40>)
 8000852:	7818      	ldrb	r0, [r3, #0]
 8000854:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000858:	fbb3 f3f0 	udiv	r3, r3, r0
 800085c:	4a0c      	ldr	r2, [pc, #48]	; (8000890 <HAL_InitTick+0x44>)
 800085e:	6810      	ldr	r0, [r2, #0]
 8000860:	fbb0 f0f3 	udiv	r0, r0, r3
 8000864:	f000 f93c 	bl	8000ae0 <HAL_SYSTICK_Config>
 8000868:	b968      	cbnz	r0, 8000886 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800086a:	2c0f      	cmp	r4, #15
 800086c:	d901      	bls.n	8000872 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800086e:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 8000870:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000872:	2200      	movs	r2, #0
 8000874:	4621      	mov	r1, r4
 8000876:	f04f 30ff 	mov.w	r0, #4294967295
 800087a:	f000 f8d3 	bl	8000a24 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800087e:	4b03      	ldr	r3, [pc, #12]	; (800088c <HAL_InitTick+0x40>)
 8000880:	605c      	str	r4, [r3, #4]
  return HAL_OK;
 8000882:	2000      	movs	r0, #0
 8000884:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000886:	2001      	movs	r0, #1
 8000888:	bd10      	pop	{r4, pc}
 800088a:	bf00      	nop
 800088c:	20000004 	.word	0x20000004
 8000890:	20000000 	.word	0x20000000

08000894 <HAL_Init>:
{
 8000894:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000896:	4a07      	ldr	r2, [pc, #28]	; (80008b4 <HAL_Init+0x20>)
 8000898:	6813      	ldr	r3, [r2, #0]
 800089a:	f043 0310 	orr.w	r3, r3, #16
 800089e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008a0:	2003      	movs	r0, #3
 80008a2:	f000 f8ad 	bl	8000a00 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80008a6:	200f      	movs	r0, #15
 80008a8:	f7ff ffd0 	bl	800084c <HAL_InitTick>
  HAL_MspInit();
 80008ac:	f7ff ffbc 	bl	8000828 <HAL_MspInit>
}
 80008b0:	2000      	movs	r0, #0
 80008b2:	bd08      	pop	{r3, pc}
 80008b4:	40022000 	.word	0x40022000

080008b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80008b8:	4a03      	ldr	r2, [pc, #12]	; (80008c8 <HAL_IncTick+0x10>)
 80008ba:	6811      	ldr	r1, [r2, #0]
 80008bc:	4b03      	ldr	r3, [pc, #12]	; (80008cc <HAL_IncTick+0x14>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	440b      	add	r3, r1
 80008c2:	6013      	str	r3, [r2, #0]
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	20000114 	.word	0x20000114
 80008cc:	20000004 	.word	0x20000004

080008d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80008d0:	4b01      	ldr	r3, [pc, #4]	; (80008d8 <HAL_GetTick+0x8>)
 80008d2:	6818      	ldr	r0, [r3, #0]
}
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	20000114 	.word	0x20000114

080008dc <HAL_GetTickPrio>:
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
  return uwTickPrio;
}
 80008dc:	4b01      	ldr	r3, [pc, #4]	; (80008e4 <HAL_GetTickPrio+0x8>)
 80008de:	6858      	ldr	r0, [r3, #4]
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	20000004 	.word	0x20000004

080008e8 <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval Status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
 80008e8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status  = HAL_OK;
  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 80008ea:	4b06      	ldr	r3, [pc, #24]	; (8000904 <HAL_SetTickFreq+0x1c>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	4283      	cmp	r3, r0
 80008f0:	d005      	beq.n	80008fe <HAL_SetTickFreq+0x16>
  {
    uwTickFreq = Freq;
 80008f2:	4b04      	ldr	r3, [pc, #16]	; (8000904 <HAL_SetTickFreq+0x1c>)
 80008f4:	7018      	strb	r0, [r3, #0]

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
 80008f6:	6858      	ldr	r0, [r3, #4]
 80008f8:	f7ff ffa8 	bl	800084c <HAL_InitTick>
 80008fc:	bd08      	pop	{r3, pc}
  HAL_StatusTypeDef status  = HAL_OK;
 80008fe:	2000      	movs	r0, #0
  }

  return status;
}
 8000900:	bd08      	pop	{r3, pc}
 8000902:	bf00      	nop
 8000904:	20000004 	.word	0x20000004

08000908 <HAL_GetTickFreq>:
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
  return uwTickFreq;
}
 8000908:	4b01      	ldr	r3, [pc, #4]	; (8000910 <HAL_GetTickFreq+0x8>)
 800090a:	7818      	ldrb	r0, [r3, #0]
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	20000004 	.word	0x20000004

08000914 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000914:	b538      	push	{r3, r4, r5, lr}
 8000916:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000918:	f7ff ffda 	bl	80008d0 <HAL_GetTick>
 800091c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800091e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000922:	d002      	beq.n	800092a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000924:	4b04      	ldr	r3, [pc, #16]	; (8000938 <HAL_Delay+0x24>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800092a:	f7ff ffd1 	bl	80008d0 <HAL_GetTick>
 800092e:	1b40      	subs	r0, r0, r5
 8000930:	4284      	cmp	r4, r0
 8000932:	d8fa      	bhi.n	800092a <HAL_Delay+0x16>
  {
  }
}
 8000934:	bd38      	pop	{r3, r4, r5, pc}
 8000936:	bf00      	nop
 8000938:	20000004 	.word	0x20000004

0800093c <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800093c:	4a02      	ldr	r2, [pc, #8]	; (8000948 <HAL_SuspendTick+0xc>)
 800093e:	6813      	ldr	r3, [r2, #0]
 8000940:	f023 0302 	bic.w	r3, r3, #2
 8000944:	6013      	str	r3, [r2, #0]
 8000946:	4770      	bx	lr
 8000948:	e000e010 	.word	0xe000e010

0800094c <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800094c:	4a02      	ldr	r2, [pc, #8]	; (8000958 <HAL_ResumeTick+0xc>)
 800094e:	6813      	ldr	r3, [r2, #0]
 8000950:	f043 0302 	orr.w	r3, r3, #2
 8000954:	6013      	str	r3, [r2, #0]
 8000956:	4770      	bx	lr
 8000958:	e000e010 	.word	0xe000e010

0800095c <HAL_GetHalVersion>:
  * @retval version 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
  return __STM32F1xx_HAL_VERSION;
}
 800095c:	4800      	ldr	r0, [pc, #0]	; (8000960 <HAL_GetHalVersion+0x4>)
 800095e:	4770      	bx	lr
 8000960:	01010300 	.word	0x01010300

08000964 <HAL_GetREVID>:
  *       Refer to errata sheet of these devices for more details.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
  return ((DBGMCU->IDCODE) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000964:	4b01      	ldr	r3, [pc, #4]	; (800096c <HAL_GetREVID+0x8>)
 8000966:	6818      	ldr	r0, [r3, #0]
}
 8000968:	0c00      	lsrs	r0, r0, #16
 800096a:	4770      	bx	lr
 800096c:	e0042000 	.word	0xe0042000

08000970 <HAL_GetDEVID>:
  *       Refer to errata sheet of these devices for more details.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
  return ((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8000970:	4b02      	ldr	r3, [pc, #8]	; (800097c <HAL_GetDEVID+0xc>)
 8000972:	6818      	ldr	r0, [r3, #0]
}
 8000974:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	e0042000 	.word	0xe0042000

08000980 <HAL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8000980:	4a02      	ldr	r2, [pc, #8]	; (800098c <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 8000982:	6853      	ldr	r3, [r2, #4]
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	6053      	str	r3, [r2, #4]
 800098a:	4770      	bx	lr
 800098c:	e0042000 	.word	0xe0042000

08000990 <HAL_DBGMCU_DisableDBGSleepMode>:
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8000990:	4a02      	ldr	r2, [pc, #8]	; (800099c <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 8000992:	6853      	ldr	r3, [r2, #4]
 8000994:	f023 0301 	bic.w	r3, r3, #1
 8000998:	6053      	str	r3, [r2, #4]
 800099a:	4770      	bx	lr
 800099c:	e0042000 	.word	0xe0042000

080009a0 <HAL_DBGMCU_EnableDBGStopMode>:
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80009a0:	4a02      	ldr	r2, [pc, #8]	; (80009ac <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 80009a2:	6853      	ldr	r3, [r2, #4]
 80009a4:	f043 0302 	orr.w	r3, r3, #2
 80009a8:	6053      	str	r3, [r2, #4]
 80009aa:	4770      	bx	lr
 80009ac:	e0042000 	.word	0xe0042000

080009b0 <HAL_DBGMCU_DisableDBGStopMode>:
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80009b0:	4a02      	ldr	r2, [pc, #8]	; (80009bc <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 80009b2:	6853      	ldr	r3, [r2, #4]
 80009b4:	f023 0302 	bic.w	r3, r3, #2
 80009b8:	6053      	str	r3, [r2, #4]
 80009ba:	4770      	bx	lr
 80009bc:	e0042000 	.word	0xe0042000

080009c0 <HAL_DBGMCU_EnableDBGStandbyMode>:
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80009c0:	4a02      	ldr	r2, [pc, #8]	; (80009cc <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 80009c2:	6853      	ldr	r3, [r2, #4]
 80009c4:	f043 0304 	orr.w	r3, r3, #4
 80009c8:	6053      	str	r3, [r2, #4]
 80009ca:	4770      	bx	lr
 80009cc:	e0042000 	.word	0xe0042000

080009d0 <HAL_DBGMCU_DisableDBGStandbyMode>:
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80009d0:	4a02      	ldr	r2, [pc, #8]	; (80009dc <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 80009d2:	6853      	ldr	r3, [r2, #4]
 80009d4:	f023 0304 	bic.w	r3, r3, #4
 80009d8:	6053      	str	r3, [r2, #4]
 80009da:	4770      	bx	lr
 80009dc:	e0042000 	.word	0xe0042000

080009e0 <HAL_GetUID>:
  * @param UID pointer to 3 words array.
  * @retval Device identifier
  */
void HAL_GetUID(uint32_t *UID)
{
  UID[0] = (uint32_t)(READ_REG(*((uint32_t *)UID_BASE)));
 80009e0:	4b04      	ldr	r3, [pc, #16]	; (80009f4 <HAL_GetUID+0x14>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	6003      	str	r3, [r0, #0]
  UID[1] = (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80009e6:	4b04      	ldr	r3, [pc, #16]	; (80009f8 <HAL_GetUID+0x18>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	6043      	str	r3, [r0, #4]
  UID[2] = (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80009ec:	4b03      	ldr	r3, [pc, #12]	; (80009fc <HAL_GetUID+0x1c>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	6083      	str	r3, [r0, #8]
 80009f2:	4770      	bx	lr
 80009f4:	1ffff7e8 	.word	0x1ffff7e8
 80009f8:	1ffff7ec 	.word	0x1ffff7ec
 80009fc:	1ffff7f0 	.word	0x1ffff7f0

08000a00 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a00:	4a07      	ldr	r2, [pc, #28]	; (8000a20 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000a02:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a04:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a08:	041b      	lsls	r3, r3, #16
 8000a0a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000a0c:	0200      	lsls	r0, r0, #8
 8000a0e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a12:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8000a14:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000a18:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000a1c:	60d0      	str	r0, [r2, #12]
 8000a1e:	4770      	bx	lr
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a24:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a26:	4b16      	ldr	r3, [pc, #88]	; (8000a80 <HAL_NVIC_SetPriority+0x5c>)
 8000a28:	68db      	ldr	r3, [r3, #12]
 8000a2a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a2e:	f1c3 0407 	rsb	r4, r3, #7
 8000a32:	2c04      	cmp	r4, #4
 8000a34:	bf28      	it	cs
 8000a36:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a38:	1d1d      	adds	r5, r3, #4
 8000a3a:	2d06      	cmp	r5, #6
 8000a3c:	d917      	bls.n	8000a6e <HAL_NVIC_SetPriority+0x4a>
 8000a3e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a40:	2501      	movs	r5, #1
 8000a42:	fa05 f404 	lsl.w	r4, r5, r4
 8000a46:	3c01      	subs	r4, #1
 8000a48:	4021      	ands	r1, r4
 8000a4a:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a4c:	fa05 f303 	lsl.w	r3, r5, r3
 8000a50:	3b01      	subs	r3, #1
 8000a52:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a54:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8000a56:	2800      	cmp	r0, #0
 8000a58:	db0b      	blt.n	8000a72 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a5a:	0109      	lsls	r1, r1, #4
 8000a5c:	b2c9      	uxtb	r1, r1
 8000a5e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000a62:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000a66:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000a6a:	bc30      	pop	{r4, r5}
 8000a6c:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a6e:	2300      	movs	r3, #0
 8000a70:	e7e6      	b.n	8000a40 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a72:	f000 000f 	and.w	r0, r0, #15
 8000a76:	0109      	lsls	r1, r1, #4
 8000a78:	b2c9      	uxtb	r1, r1
 8000a7a:	4b02      	ldr	r3, [pc, #8]	; (8000a84 <HAL_NVIC_SetPriority+0x60>)
 8000a7c:	5419      	strb	r1, [r3, r0]
 8000a7e:	e7f4      	b.n	8000a6a <HAL_NVIC_SetPriority+0x46>
 8000a80:	e000ed00 	.word	0xe000ed00
 8000a84:	e000ed14 	.word	0xe000ed14

08000a88 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000a88:	0942      	lsrs	r2, r0, #5
 8000a8a:	f000 001f 	and.w	r0, r0, #31
 8000a8e:	2301      	movs	r3, #1
 8000a90:	fa03 f000 	lsl.w	r0, r3, r0
 8000a94:	4b01      	ldr	r3, [pc, #4]	; (8000a9c <HAL_NVIC_EnableIRQ+0x14>)
 8000a96:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000a9a:	4770      	bx	lr
 8000a9c:	e000e100 	.word	0xe000e100

08000aa0 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000aa0:	0943      	lsrs	r3, r0, #5
 8000aa2:	f000 001f 	and.w	r0, r0, #31
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	fa02 f000 	lsl.w	r0, r2, r0
 8000aac:	3320      	adds	r3, #32
 8000aae:	4a02      	ldr	r2, [pc, #8]	; (8000ab8 <HAL_NVIC_DisableIRQ+0x18>)
 8000ab0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	e000e100 	.word	0xe000e100

08000abc <HAL_NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000abc:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000ac0:	4905      	ldr	r1, [pc, #20]	; (8000ad8 <HAL_NVIC_SystemReset+0x1c>)
 8000ac2:	68ca      	ldr	r2, [r1, #12]
 8000ac4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000ac8:	4b04      	ldr	r3, [pc, #16]	; (8000adc <HAL_NVIC_SystemReset+0x20>)
 8000aca:	4313      	orrs	r3, r2
 8000acc:	60cb      	str	r3, [r1, #12]
 8000ace:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8000ad2:	bf00      	nop
 8000ad4:	e7fd      	b.n	8000ad2 <HAL_NVIC_SystemReset+0x16>
 8000ad6:	bf00      	nop
 8000ad8:	e000ed00 	.word	0xe000ed00
 8000adc:	05fa0004 	.word	0x05fa0004

08000ae0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ae0:	3801      	subs	r0, #1
 8000ae2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ae6:	d20a      	bcs.n	8000afe <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <HAL_SYSTICK_Config+0x24>)
 8000aea:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aec:	21f0      	movs	r1, #240	; 0xf0
 8000aee:	4a06      	ldr	r2, [pc, #24]	; (8000b08 <HAL_SYSTICK_Config+0x28>)
 8000af0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000af4:	2000      	movs	r0, #0
 8000af6:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000af8:	2207      	movs	r2, #7
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000afe:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	e000e010 	.word	0xe000e010
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <HAL_NVIC_GetPriorityGrouping>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b0c:	4b02      	ldr	r3, [pc, #8]	; (8000b18 <HAL_NVIC_GetPriorityGrouping+0xc>)
 8000b0e:	68d8      	ldr	r0, [r3, #12]
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
}
 8000b10:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority: Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority: Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
 8000b1c:	b470      	push	{r4, r5, r6}
  if ((int32_t)(IRQn) < 0)
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	db1f      	blt.n	8000b62 <HAL_NVIC_GetPriority+0x46>
    return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 8000b22:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000b26:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000b2a:	f890 0300 	ldrb.w	r0, [r0, #768]	; 0x300
 8000b2e:	0905      	lsrs	r5, r0, #4
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b30:	f001 0107 	and.w	r1, r1, #7
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b34:	f1c1 0407 	rsb	r4, r1, #7
 8000b38:	2c04      	cmp	r4, #4
 8000b3a:	bf28      	it	cs
 8000b3c:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b3e:	1d08      	adds	r0, r1, #4
 8000b40:	2806      	cmp	r0, #6
 8000b42:	d914      	bls.n	8000b6e <HAL_NVIC_GetPriority+0x52>
 8000b44:	3903      	subs	r1, #3
  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
 8000b46:	fa25 f601 	lsr.w	r6, r5, r1
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	fa00 f404 	lsl.w	r4, r0, r4
 8000b50:	3c01      	subs	r4, #1
 8000b52:	4034      	ands	r4, r6
 8000b54:	6014      	str	r4, [r2, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
 8000b56:	4088      	lsls	r0, r1
 8000b58:	3801      	subs	r0, #1
 8000b5a:	4028      	ands	r0, r5
 8000b5c:	6018      	str	r0, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
}
 8000b5e:	bc70      	pop	{r4, r5, r6}
 8000b60:	4770      	bx	lr
    return(((uint32_t)SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 8000b62:	f000 000f 	and.w	r0, r0, #15
 8000b66:	4c03      	ldr	r4, [pc, #12]	; (8000b74 <HAL_NVIC_GetPriority+0x58>)
 8000b68:	5c20      	ldrb	r0, [r4, r0]
 8000b6a:	0905      	lsrs	r5, r0, #4
 8000b6c:	e7e0      	b.n	8000b30 <HAL_NVIC_GetPriority+0x14>
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b6e:	2100      	movs	r1, #0
 8000b70:	e7e9      	b.n	8000b46 <HAL_NVIC_GetPriority+0x2a>
 8000b72:	bf00      	nop
 8000b74:	e000ed14 	.word	0xe000ed14

08000b78 <HAL_NVIC_SetPendingIRQ>:
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000b78:	0943      	lsrs	r3, r0, #5
 8000b7a:	f000 001f 	and.w	r0, r0, #31
 8000b7e:	2201      	movs	r2, #1
 8000b80:	fa02 f000 	lsl.w	r0, r2, r0
 8000b84:	3340      	adds	r3, #64	; 0x40
 8000b86:	4a02      	ldr	r2, [pc, #8]	; (8000b90 <HAL_NVIC_SetPendingIRQ+0x18>)
 8000b88:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	e000e100 	.word	0xe000e100

08000b94 <HAL_NVIC_GetPendingIRQ>:
  return((uint32_t)(((NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8000b94:	0943      	lsrs	r3, r0, #5
 8000b96:	3340      	adds	r3, #64	; 0x40
 8000b98:	4a04      	ldr	r2, [pc, #16]	; (8000bac <HAL_NVIC_GetPendingIRQ+0x18>)
 8000b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b9e:	f000 001f 	and.w	r0, r0, #31
 8000ba2:	fa23 f000 	lsr.w	r0, r3, r0
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
}
 8000ba6:	f000 0001 	and.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	e000e100 	.word	0xe000e100

08000bb0 <HAL_NVIC_ClearPendingIRQ>:
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000bb0:	0943      	lsrs	r3, r0, #5
 8000bb2:	f000 001f 	and.w	r0, r0, #31
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	fa02 f000 	lsl.w	r0, r2, r0
 8000bbc:	3360      	adds	r3, #96	; 0x60
 8000bbe:	4a02      	ldr	r2, [pc, #8]	; (8000bc8 <HAL_NVIC_ClearPendingIRQ+0x18>)
 8000bc0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	e000e100 	.word	0xe000e100

08000bcc <HAL_NVIC_GetActive>:
  return((uint32_t)(((NVIC->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8000bcc:	0943      	lsrs	r3, r0, #5
 8000bce:	3380      	adds	r3, #128	; 0x80
 8000bd0:	4a04      	ldr	r2, [pc, #16]	; (8000be4 <HAL_NVIC_GetActive+0x18>)
 8000bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd6:	f000 001f 	and.w	r0, r0, #31
 8000bda:	fa23 f000 	lsr.w	r0, r3, r0
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
}
 8000bde:	f000 0001 	and.w	r0, r0, #1
 8000be2:	4770      	bx	lr
 8000be4:	e000e100 	.word	0xe000e100

08000be8 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000be8:	2804      	cmp	r0, #4
 8000bea:	d005      	beq.n	8000bf8 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000bec:	4a05      	ldr	r2, [pc, #20]	; (8000c04 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8000bee:	6813      	ldr	r3, [r2, #0]
 8000bf0:	f023 0304 	bic.w	r3, r3, #4
 8000bf4:	6013      	str	r3, [r2, #0]
 8000bf6:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000bf8:	4a02      	ldr	r2, [pc, #8]	; (8000c04 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8000bfa:	6813      	ldr	r3, [r2, #0]
 8000bfc:	f043 0304 	orr.w	r3, r3, #4
 8000c00:	6013      	str	r3, [r2, #0]
 8000c02:	4770      	bx	lr
 8000c04:	e000e010 	.word	0xe000e010

08000c08 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000c08:	4770      	bx	lr

08000c0a <HAL_SYSTICK_IRQHandler>:
{
 8000c0a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000c0c:	f7ff fffc 	bl	8000c08 <HAL_SYSTICK_Callback>
 8000c10:	bd08      	pop	{r3, pc}
 8000c12:	bf00      	nop

08000c14 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000c14:	b470      	push	{r4, r5, r6}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000c16:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8000c18:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8000c1a:	2401      	movs	r4, #1
 8000c1c:	40b4      	lsls	r4, r6
 8000c1e:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000c20:	6804      	ldr	r4, [r0, #0]
 8000c22:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000c24:	6843      	ldr	r3, [r0, #4]
 8000c26:	2b10      	cmp	r3, #16
 8000c28:	d005      	beq.n	8000c36 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000c2a:	6803      	ldr	r3, [r0, #0]
 8000c2c:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000c2e:	6803      	ldr	r3, [r0, #0]
 8000c30:	60da      	str	r2, [r3, #12]
  }
}
 8000c32:	bc70      	pop	{r4, r5, r6}
 8000c34:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8000c36:	6803      	ldr	r3, [r0, #0]
 8000c38:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000c3a:	6803      	ldr	r3, [r0, #0]
 8000c3c:	60d9      	str	r1, [r3, #12]
 8000c3e:	e7f8      	b.n	8000c32 <DMA_SetConfig+0x1e>

08000c40 <HAL_DMA_Init>:
  if(hdma == NULL)
 8000c40:	b360      	cbz	r0, 8000c9c <HAL_DMA_Init+0x5c>
{
 8000c42:	b410      	push	{r4}
 8000c44:	4603      	mov	r3, r0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000c46:	6800      	ldr	r0, [r0, #0]
 8000c48:	4a15      	ldr	r2, [pc, #84]	; (8000ca0 <HAL_DMA_Init+0x60>)
 8000c4a:	4402      	add	r2, r0
 8000c4c:	4915      	ldr	r1, [pc, #84]	; (8000ca4 <HAL_DMA_Init+0x64>)
 8000c4e:	fba1 1202 	umull	r1, r2, r1, r2
 8000c52:	0912      	lsrs	r2, r2, #4
 8000c54:	0092      	lsls	r2, r2, #2
 8000c56:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000c58:	4a13      	ldr	r2, [pc, #76]	; (8000ca8 <HAL_DMA_Init+0x68>)
 8000c5a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c5c:	2202      	movs	r2, #2
 8000c5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 8000c62:	6801      	ldr	r1, [r0, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c64:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
 8000c68:	f021 0130 	bic.w	r1, r1, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8000c6c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c6e:	689c      	ldr	r4, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000c70:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c72:	68dc      	ldr	r4, [r3, #12]
 8000c74:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c76:	691c      	ldr	r4, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c78:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c7a:	695c      	ldr	r4, [r3, #20]
 8000c7c:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c7e:	699c      	ldr	r4, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c80:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c82:	69dc      	ldr	r4, [r3, #28]
 8000c84:	4322      	orrs	r2, r4
  tmp |=  hdma->Init.Direction        |
 8000c86:	430a      	orrs	r2, r1
  hdma->Instance->CCR = tmp;
 8000c88:	6002      	str	r2, [r0, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	6398      	str	r0, [r3, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8000c8e:	2201      	movs	r2, #1
 8000c90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 8000c94:	f883 0020 	strb.w	r0, [r3, #32]
}
 8000c98:	bc10      	pop	{r4}
 8000c9a:	4770      	bx	lr
    return HAL_ERROR;
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	4770      	bx	lr
 8000ca0:	bffdfff8 	.word	0xbffdfff8
 8000ca4:	cccccccd 	.word	0xcccccccd
 8000ca8:	40020000 	.word	0x40020000

08000cac <HAL_DMA_DeInit>:
  if(hdma == NULL)
 8000cac:	2800      	cmp	r0, #0
 8000cae:	d029      	beq.n	8000d04 <HAL_DMA_DeInit+0x58>
{
 8000cb0:	b410      	push	{r4}
 8000cb2:	4603      	mov	r3, r0
  __HAL_DMA_DISABLE(hdma);
 8000cb4:	6801      	ldr	r1, [r0, #0]
 8000cb6:	680a      	ldr	r2, [r1, #0]
 8000cb8:	f022 0201 	bic.w	r2, r2, #1
 8000cbc:	600a      	str	r2, [r1, #0]
  hdma->Instance->CCR  = 0U;
 8000cbe:	6802      	ldr	r2, [r0, #0]
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	6010      	str	r0, [r2, #0]
  hdma->Instance->CNDTR = 0U;
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	6050      	str	r0, [r2, #4]
  hdma->Instance->CPAR  = 0U;
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	6090      	str	r0, [r2, #8]
  hdma->Instance->CMAR = 0U;
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	60d0      	str	r0, [r2, #12]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000cd0:	6819      	ldr	r1, [r3, #0]
 8000cd2:	4a0d      	ldr	r2, [pc, #52]	; (8000d08 <HAL_DMA_DeInit+0x5c>)
 8000cd4:	440a      	add	r2, r1
 8000cd6:	490d      	ldr	r1, [pc, #52]	; (8000d0c <HAL_DMA_DeInit+0x60>)
 8000cd8:	fba1 1202 	umull	r1, r2, r1, r2
 8000cdc:	0912      	lsrs	r2, r2, #4
 8000cde:	0092      	lsls	r2, r2, #2
 8000ce0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000ce2:	4c0b      	ldr	r4, [pc, #44]	; (8000d10 <HAL_DMA_DeInit+0x64>)
 8000ce4:	63dc      	str	r4, [r3, #60]	; 0x3c
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cec:	6062      	str	r2, [r4, #4]
  hdma->XferCpltCallback = NULL;
 8000cee:	6298      	str	r0, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8000cf0:	62d8      	str	r0, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8000cf2:	6318      	str	r0, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8000cf4:	6358      	str	r0, [r3, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cf6:	6398      	str	r0, [r3, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_RESET;
 8000cf8:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21
  __HAL_UNLOCK(hdma);
 8000cfc:	f883 0020 	strb.w	r0, [r3, #32]
}
 8000d00:	bc10      	pop	{r4}
 8000d02:	4770      	bx	lr
    return HAL_ERROR;
 8000d04:	2001      	movs	r0, #1
 8000d06:	4770      	bx	lr
 8000d08:	bffdfff8 	.word	0xbffdfff8
 8000d0c:	cccccccd 	.word	0xcccccccd
 8000d10:	40020000 	.word	0x40020000

08000d14 <HAL_DMA_Start>:
{
 8000d14:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8000d16:	f890 4020 	ldrb.w	r4, [r0, #32]
 8000d1a:	2c01      	cmp	r4, #1
 8000d1c:	d020      	beq.n	8000d60 <HAL_DMA_Start+0x4c>
 8000d1e:	2401      	movs	r4, #1
 8000d20:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000d24:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
 8000d28:	2c01      	cmp	r4, #1
 8000d2a:	d004      	beq.n	8000d36 <HAL_DMA_Start+0x22>
   __HAL_UNLOCK(hdma);  
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	f880 3020 	strb.w	r3, [r0, #32]
   status = HAL_BUSY;
 8000d32:	2002      	movs	r0, #2
 8000d34:	bd70      	pop	{r4, r5, r6, pc}
 8000d36:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d38:	2002      	movs	r0, #2
 8000d3a:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d3e:	2500      	movs	r5, #0
 8000d40:	63a5      	str	r5, [r4, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8000d42:	6826      	ldr	r6, [r4, #0]
 8000d44:	6830      	ldr	r0, [r6, #0]
 8000d46:	f020 0001 	bic.w	r0, r0, #1
 8000d4a:	6030      	str	r0, [r6, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000d4c:	4620      	mov	r0, r4
 8000d4e:	f7ff ff61 	bl	8000c14 <DMA_SetConfig>
    __HAL_DMA_ENABLE(hdma);
 8000d52:	6822      	ldr	r2, [r4, #0]
 8000d54:	6813      	ldr	r3, [r2, #0]
 8000d56:	f043 0301 	orr.w	r3, r3, #1
 8000d5a:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000d5c:	4628      	mov	r0, r5
 8000d5e:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma);
 8000d60:	2002      	movs	r0, #2
}
 8000d62:	bd70      	pop	{r4, r5, r6, pc}

08000d64 <HAL_DMA_Start_IT>:
{
 8000d64:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hdma);
 8000d66:	f890 4020 	ldrb.w	r4, [r0, #32]
 8000d6a:	2c01      	cmp	r4, #1
 8000d6c:	d032      	beq.n	8000dd4 <HAL_DMA_Start_IT+0x70>
 8000d6e:	2401      	movs	r4, #1
 8000d70:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000d74:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
 8000d78:	2c01      	cmp	r4, #1
 8000d7a:	d004      	beq.n	8000d86 <HAL_DMA_Start_IT+0x22>
    __HAL_UNLOCK(hdma); 
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	f880 3020 	strb.w	r3, [r0, #32]
    status = HAL_BUSY;
 8000d82:	2002      	movs	r0, #2
 8000d84:	bd38      	pop	{r3, r4, r5, pc}
 8000d86:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d88:	2002      	movs	r0, #2
 8000d8a:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d8e:	2000      	movs	r0, #0
 8000d90:	63a0      	str	r0, [r4, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8000d92:	6825      	ldr	r5, [r4, #0]
 8000d94:	6828      	ldr	r0, [r5, #0]
 8000d96:	f020 0001 	bic.w	r0, r0, #1
 8000d9a:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000d9c:	4620      	mov	r0, r4
 8000d9e:	f7ff ff39 	bl	8000c14 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback)
 8000da2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000da4:	b15b      	cbz	r3, 8000dbe <HAL_DMA_Start_IT+0x5a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000da6:	6822      	ldr	r2, [r4, #0]
 8000da8:	6813      	ldr	r3, [r2, #0]
 8000daa:	f043 030e 	orr.w	r3, r3, #14
 8000dae:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8000db0:	6822      	ldr	r2, [r4, #0]
 8000db2:	6813      	ldr	r3, [r2, #0]
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000dba:	2000      	movs	r0, #0
 8000dbc:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000dbe:	6822      	ldr	r2, [r4, #0]
 8000dc0:	6813      	ldr	r3, [r2, #0]
 8000dc2:	f023 0304 	bic.w	r3, r3, #4
 8000dc6:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000dc8:	6822      	ldr	r2, [r4, #0]
 8000dca:	6813      	ldr	r3, [r2, #0]
 8000dcc:	f043 030a 	orr.w	r3, r3, #10
 8000dd0:	6013      	str	r3, [r2, #0]
 8000dd2:	e7ed      	b.n	8000db0 <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 8000dd4:	2002      	movs	r0, #2
}
 8000dd6:	bd38      	pop	{r3, r4, r5, pc}

08000dd8 <HAL_DMA_Abort>:
{
 8000dd8:	4603      	mov	r3, r0
  __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dda:	6801      	ldr	r1, [r0, #0]
 8000ddc:	680a      	ldr	r2, [r1, #0]
 8000dde:	f022 020e 	bic.w	r2, r2, #14
 8000de2:	600a      	str	r2, [r1, #0]
  __HAL_DMA_DISABLE(hdma);
 8000de4:	6801      	ldr	r1, [r0, #0]
 8000de6:	680a      	ldr	r2, [r1, #0]
 8000de8:	f022 0201 	bic.w	r2, r2, #1
 8000dec:	600a      	str	r2, [r1, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000dee:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8000df0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000df2:	2101      	movs	r1, #1
 8000df4:	fa01 f202 	lsl.w	r2, r1, r2
 8000df8:	6042      	str	r2, [r0, #4]
  hdma->State = HAL_DMA_STATE_READY;
 8000dfa:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
  __HAL_UNLOCK(hdma);      
 8000dfe:	2000      	movs	r0, #0
 8000e00:	f883 0020 	strb.w	r0, [r3, #32]
}
 8000e04:	4770      	bx	lr

08000e06 <HAL_DMA_Abort_IT>:
{  
 8000e06:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e08:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d003      	beq.n	8000e18 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e10:	2304      	movs	r3, #4
 8000e12:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8000e14:	2001      	movs	r0, #1
 8000e16:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e18:	6802      	ldr	r2, [r0, #0]
 8000e1a:	6813      	ldr	r3, [r2, #0]
 8000e1c:	f023 030e 	bic.w	r3, r3, #14
 8000e20:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8000e22:	6802      	ldr	r2, [r0, #0]
 8000e24:	6813      	ldr	r3, [r2, #0]
 8000e26:	f023 0301 	bic.w	r3, r3, #1
 8000e2a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000e2c:	6803      	ldr	r3, [r0, #0]
 8000e2e:	4a19      	ldr	r2, [pc, #100]	; (8000e94 <HAL_DMA_Abort_IT+0x8e>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d014      	beq.n	8000e5e <HAL_DMA_Abort_IT+0x58>
 8000e34:	3214      	adds	r2, #20
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d01f      	beq.n	8000e7a <HAL_DMA_Abort_IT+0x74>
 8000e3a:	3214      	adds	r2, #20
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d01e      	beq.n	8000e7e <HAL_DMA_Abort_IT+0x78>
 8000e40:	3214      	adds	r2, #20
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d01e      	beq.n	8000e84 <HAL_DMA_Abort_IT+0x7e>
 8000e46:	3214      	adds	r2, #20
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d01e      	beq.n	8000e8a <HAL_DMA_Abort_IT+0x84>
 8000e4c:	3214      	adds	r2, #20
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d002      	beq.n	8000e58 <HAL_DMA_Abort_IT+0x52>
 8000e52:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000e56:	e003      	b.n	8000e60 <HAL_DMA_Abort_IT+0x5a>
 8000e58:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000e5c:	e000      	b.n	8000e60 <HAL_DMA_Abort_IT+0x5a>
 8000e5e:	2201      	movs	r2, #1
 8000e60:	4b0d      	ldr	r3, [pc, #52]	; (8000e98 <HAL_DMA_Abort_IT+0x92>)
 8000e62:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000e64:	2301      	movs	r3, #1
 8000e66:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000e70:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000e72:	b16b      	cbz	r3, 8000e90 <HAL_DMA_Abort_IT+0x8a>
      hdma->XferAbortCallback(hdma);
 8000e74:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000e76:	2000      	movs	r0, #0
 8000e78:	bd08      	pop	{r3, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000e7a:	2210      	movs	r2, #16
 8000e7c:	e7f0      	b.n	8000e60 <HAL_DMA_Abort_IT+0x5a>
 8000e7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e82:	e7ed      	b.n	8000e60 <HAL_DMA_Abort_IT+0x5a>
 8000e84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e88:	e7ea      	b.n	8000e60 <HAL_DMA_Abort_IT+0x5a>
 8000e8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e8e:	e7e7      	b.n	8000e60 <HAL_DMA_Abort_IT+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 8000e90:	2000      	movs	r0, #0
}
 8000e92:	bd08      	pop	{r3, pc}
 8000e94:	40020008 	.word	0x40020008
 8000e98:	40020000 	.word	0x40020000

08000e9c <HAL_DMA_PollForTransfer>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e9c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d006      	beq.n	8000eb2 <HAL_DMA_PollForTransfer+0x16>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ea4:	2304      	movs	r3, #4
 8000ea6:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 8000eae:	2001      	movs	r0, #1
 8000eb0:	4770      	bx	lr
{
 8000eb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (RESET != (hdma->Instance->CCR & DMA_CCR_CIRC))
 8000eb6:	6803      	ldr	r3, [r0, #0]
 8000eb8:	681c      	ldr	r4, [r3, #0]
 8000eba:	f014 0f20 	tst.w	r4, #32
 8000ebe:	d115      	bne.n	8000eec <HAL_DMA_PollForTransfer+0x50>
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8000ec0:	b9e9      	cbnz	r1, 8000efe <HAL_DMA_PollForTransfer+0x62>
    temp = __HAL_DMA_GET_TC_FLAG_INDEX(hdma);
 8000ec2:	4c80      	ldr	r4, [pc, #512]	; (80010c4 <HAL_DMA_PollForTransfer+0x228>)
 8000ec4:	42a3      	cmp	r3, r4
 8000ec6:	d032      	beq.n	8000f2e <HAL_DMA_PollForTransfer+0x92>
 8000ec8:	3414      	adds	r4, #20
 8000eca:	42a3      	cmp	r3, r4
 8000ecc:	d037      	beq.n	8000f3e <HAL_DMA_PollForTransfer+0xa2>
 8000ece:	3414      	adds	r4, #20
 8000ed0:	42a3      	cmp	r3, r4
 8000ed2:	d036      	beq.n	8000f42 <HAL_DMA_PollForTransfer+0xa6>
 8000ed4:	3414      	adds	r4, #20
 8000ed6:	42a3      	cmp	r3, r4
 8000ed8:	d036      	beq.n	8000f48 <HAL_DMA_PollForTransfer+0xac>
 8000eda:	3414      	adds	r4, #20
 8000edc:	42a3      	cmp	r3, r4
 8000ede:	d036      	beq.n	8000f4e <HAL_DMA_PollForTransfer+0xb2>
 8000ee0:	3414      	adds	r4, #20
 8000ee2:	42a3      	cmp	r3, r4
 8000ee4:	d008      	beq.n	8000ef8 <HAL_DMA_PollForTransfer+0x5c>
 8000ee6:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8000eea:	e021      	b.n	8000f30 <HAL_DMA_PollForTransfer+0x94>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8000eec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ef0:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp = __HAL_DMA_GET_TC_FLAG_INDEX(hdma);
 8000ef8:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8000efc:	e018      	b.n	8000f30 <HAL_DMA_PollForTransfer+0x94>
    temp = __HAL_DMA_GET_HT_FLAG_INDEX(hdma);
 8000efe:	4c71      	ldr	r4, [pc, #452]	; (80010c4 <HAL_DMA_PollForTransfer+0x228>)
 8000f00:	42a3      	cmp	r3, r4
 8000f02:	d027      	beq.n	8000f54 <HAL_DMA_PollForTransfer+0xb8>
 8000f04:	3414      	adds	r4, #20
 8000f06:	42a3      	cmp	r3, r4
 8000f08:	d026      	beq.n	8000f58 <HAL_DMA_PollForTransfer+0xbc>
 8000f0a:	3414      	adds	r4, #20
 8000f0c:	42a3      	cmp	r3, r4
 8000f0e:	d025      	beq.n	8000f5c <HAL_DMA_PollForTransfer+0xc0>
 8000f10:	3414      	adds	r4, #20
 8000f12:	42a3      	cmp	r3, r4
 8000f14:	d025      	beq.n	8000f62 <HAL_DMA_PollForTransfer+0xc6>
 8000f16:	3414      	adds	r4, #20
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d025      	beq.n	8000f68 <HAL_DMA_PollForTransfer+0xcc>
 8000f1c:	3414      	adds	r4, #20
 8000f1e:	42a3      	cmp	r3, r4
 8000f20:	d002      	beq.n	8000f28 <HAL_DMA_PollForTransfer+0x8c>
 8000f22:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
 8000f26:	e003      	b.n	8000f30 <HAL_DMA_PollForTransfer+0x94>
 8000f28:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
 8000f2c:	e000      	b.n	8000f30 <HAL_DMA_PollForTransfer+0x94>
    temp = __HAL_DMA_GET_TC_FLAG_INDEX(hdma);
 8000f2e:	2602      	movs	r6, #2
 8000f30:	4615      	mov	r5, r2
 8000f32:	460f      	mov	r7, r1
 8000f34:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 8000f36:	f7ff fccb 	bl	80008d0 <HAL_GetTick>
 8000f3a:	4680      	mov	r8, r0
  while(__HAL_DMA_GET_FLAG(hdma, temp) == RESET)
 8000f3c:	e020      	b.n	8000f80 <HAL_DMA_PollForTransfer+0xe4>
    temp = __HAL_DMA_GET_TC_FLAG_INDEX(hdma);
 8000f3e:	2620      	movs	r6, #32
 8000f40:	e7f6      	b.n	8000f30 <HAL_DMA_PollForTransfer+0x94>
 8000f42:	f44f 7600 	mov.w	r6, #512	; 0x200
 8000f46:	e7f3      	b.n	8000f30 <HAL_DMA_PollForTransfer+0x94>
 8000f48:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 8000f4c:	e7f0      	b.n	8000f30 <HAL_DMA_PollForTransfer+0x94>
 8000f4e:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000f52:	e7ed      	b.n	8000f30 <HAL_DMA_PollForTransfer+0x94>
    temp = __HAL_DMA_GET_HT_FLAG_INDEX(hdma);
 8000f54:	2604      	movs	r6, #4
 8000f56:	e7eb      	b.n	8000f30 <HAL_DMA_PollForTransfer+0x94>
 8000f58:	2640      	movs	r6, #64	; 0x40
 8000f5a:	e7e9      	b.n	8000f30 <HAL_DMA_PollForTransfer+0x94>
 8000f5c:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8000f60:	e7e6      	b.n	8000f30 <HAL_DMA_PollForTransfer+0x94>
 8000f62:	f44f 4680 	mov.w	r6, #16384	; 0x4000
 8000f66:	e7e3      	b.n	8000f30 <HAL_DMA_PollForTransfer+0x94>
 8000f68:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 8000f6c:	e7e0      	b.n	8000f30 <HAL_DMA_PollForTransfer+0x94>
    if((__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET))
 8000f6e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000f72:	e000      	b.n	8000f76 <HAL_DMA_PollForTransfer+0xda>
 8000f74:	2308      	movs	r3, #8
 8000f76:	4213      	tst	r3, r2
 8000f78:	d129      	bne.n	8000fce <HAL_DMA_PollForTransfer+0x132>
    if(Timeout != HAL_MAX_DELAY)
 8000f7a:	f1b5 3fff 	cmp.w	r5, #4294967295
 8000f7e:	d136      	bne.n	8000fee <HAL_DMA_PollForTransfer+0x152>
  while(__HAL_DMA_GET_FLAG(hdma, temp) == RESET)
 8000f80:	4b51      	ldr	r3, [pc, #324]	; (80010c8 <HAL_DMA_PollForTransfer+0x22c>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	421e      	tst	r6, r3
 8000f86:	d145      	bne.n	8001014 <HAL_DMA_PollForTransfer+0x178>
    if((__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET))
 8000f88:	4b4f      	ldr	r3, [pc, #316]	; (80010c8 <HAL_DMA_PollForTransfer+0x22c>)
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	6823      	ldr	r3, [r4, #0]
 8000f8e:	494d      	ldr	r1, [pc, #308]	; (80010c4 <HAL_DMA_PollForTransfer+0x228>)
 8000f90:	428b      	cmp	r3, r1
 8000f92:	d0ef      	beq.n	8000f74 <HAL_DMA_PollForTransfer+0xd8>
 8000f94:	3114      	adds	r1, #20
 8000f96:	428b      	cmp	r3, r1
 8000f98:	d00e      	beq.n	8000fb8 <HAL_DMA_PollForTransfer+0x11c>
 8000f9a:	3114      	adds	r1, #20
 8000f9c:	428b      	cmp	r3, r1
 8000f9e:	d00d      	beq.n	8000fbc <HAL_DMA_PollForTransfer+0x120>
 8000fa0:	3114      	adds	r1, #20
 8000fa2:	428b      	cmp	r3, r1
 8000fa4:	d00d      	beq.n	8000fc2 <HAL_DMA_PollForTransfer+0x126>
 8000fa6:	3114      	adds	r1, #20
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d00d      	beq.n	8000fc8 <HAL_DMA_PollForTransfer+0x12c>
 8000fac:	3114      	adds	r1, #20
 8000fae:	428b      	cmp	r3, r1
 8000fb0:	d0dd      	beq.n	8000f6e <HAL_DMA_PollForTransfer+0xd2>
 8000fb2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000fb6:	e7de      	b.n	8000f76 <HAL_DMA_PollForTransfer+0xda>
 8000fb8:	2380      	movs	r3, #128	; 0x80
 8000fba:	e7dc      	b.n	8000f76 <HAL_DMA_PollForTransfer+0xda>
 8000fbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fc0:	e7d9      	b.n	8000f76 <HAL_DMA_PollForTransfer+0xda>
 8000fc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fc6:	e7d6      	b.n	8000f76 <HAL_DMA_PollForTransfer+0xda>
 8000fc8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000fcc:	e7d3      	b.n	8000f76 <HAL_DMA_PollForTransfer+0xda>
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000fce:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000fd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	fa00 f303 	lsl.w	r3, r0, r3
 8000fd8:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8000fda:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000fdc:	4303      	orrs	r3, r0
 8000fde:	63a3      	str	r3, [r4, #56]	; 0x38
      hdma->State= HAL_DMA_STATE_READY;
 8000fe0:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
      __HAL_UNLOCK(hdma);
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 8000fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000fee:	b12d      	cbz	r5, 8000ffc <HAL_DMA_PollForTransfer+0x160>
 8000ff0:	f7ff fc6e 	bl	80008d0 <HAL_GetTick>
 8000ff4:	eba0 0008 	sub.w	r0, r0, r8
 8000ff8:	4285      	cmp	r5, r0
 8000ffa:	d2c1      	bcs.n	8000f80 <HAL_DMA_PollForTransfer+0xe4>
        SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 8000ffc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000ffe:	f043 0320 	orr.w	r3, r3, #32
 8001002:	63a3      	str	r3, [r4, #56]	; 0x38
        hdma->State = HAL_DMA_STATE_READY;
 8001004:	2001      	movs	r0, #1
 8001006:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
        __HAL_UNLOCK(hdma);
 800100a:	2300      	movs	r3, #0
 800100c:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 8001010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8001014:	bb77      	cbnz	r7, 8001074 <HAL_DMA_PollForTransfer+0x1d8>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001016:	6823      	ldr	r3, [r4, #0]
 8001018:	4a2a      	ldr	r2, [pc, #168]	; (80010c4 <HAL_DMA_PollForTransfer+0x228>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d014      	beq.n	8001048 <HAL_DMA_PollForTransfer+0x1ac>
 800101e:	3214      	adds	r2, #20
 8001020:	4293      	cmp	r3, r2
 8001022:	d01c      	beq.n	800105e <HAL_DMA_PollForTransfer+0x1c2>
 8001024:	3214      	adds	r2, #20
 8001026:	4293      	cmp	r3, r2
 8001028:	d01b      	beq.n	8001062 <HAL_DMA_PollForTransfer+0x1c6>
 800102a:	3214      	adds	r2, #20
 800102c:	4293      	cmp	r3, r2
 800102e:	d01b      	beq.n	8001068 <HAL_DMA_PollForTransfer+0x1cc>
 8001030:	3214      	adds	r2, #20
 8001032:	4293      	cmp	r3, r2
 8001034:	d01b      	beq.n	800106e <HAL_DMA_PollForTransfer+0x1d2>
 8001036:	3214      	adds	r2, #20
 8001038:	4293      	cmp	r3, r2
 800103a:	d002      	beq.n	8001042 <HAL_DMA_PollForTransfer+0x1a6>
 800103c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001040:	e003      	b.n	800104a <HAL_DMA_PollForTransfer+0x1ae>
 8001042:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001046:	e000      	b.n	800104a <HAL_DMA_PollForTransfer+0x1ae>
 8001048:	2202      	movs	r2, #2
 800104a:	4b1f      	ldr	r3, [pc, #124]	; (80010c8 <HAL_DMA_PollForTransfer+0x22c>)
 800104c:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800104e:	2301      	movs	r3, #1
 8001050:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_UNLOCK(hdma);
 8001054:	2000      	movs	r0, #0
 8001056:	f884 0020 	strb.w	r0, [r4, #32]
}
 800105a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800105e:	2220      	movs	r2, #32
 8001060:	e7f3      	b.n	800104a <HAL_DMA_PollForTransfer+0x1ae>
 8001062:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001066:	e7f0      	b.n	800104a <HAL_DMA_PollForTransfer+0x1ae>
 8001068:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800106c:	e7ed      	b.n	800104a <HAL_DMA_PollForTransfer+0x1ae>
 800106e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001072:	e7ea      	b.n	800104a <HAL_DMA_PollForTransfer+0x1ae>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001074:	6823      	ldr	r3, [r4, #0]
 8001076:	4a13      	ldr	r2, [pc, #76]	; (80010c4 <HAL_DMA_PollForTransfer+0x228>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d014      	beq.n	80010a6 <HAL_DMA_PollForTransfer+0x20a>
 800107c:	3214      	adds	r2, #20
 800107e:	4293      	cmp	r3, r2
 8001080:	d015      	beq.n	80010ae <HAL_DMA_PollForTransfer+0x212>
 8001082:	3214      	adds	r2, #20
 8001084:	4293      	cmp	r3, r2
 8001086:	d014      	beq.n	80010b2 <HAL_DMA_PollForTransfer+0x216>
 8001088:	3214      	adds	r2, #20
 800108a:	4293      	cmp	r3, r2
 800108c:	d014      	beq.n	80010b8 <HAL_DMA_PollForTransfer+0x21c>
 800108e:	3214      	adds	r2, #20
 8001090:	4293      	cmp	r3, r2
 8001092:	d014      	beq.n	80010be <HAL_DMA_PollForTransfer+0x222>
 8001094:	3214      	adds	r2, #20
 8001096:	4293      	cmp	r3, r2
 8001098:	d002      	beq.n	80010a0 <HAL_DMA_PollForTransfer+0x204>
 800109a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800109e:	e003      	b.n	80010a8 <HAL_DMA_PollForTransfer+0x20c>
 80010a0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80010a4:	e000      	b.n	80010a8 <HAL_DMA_PollForTransfer+0x20c>
 80010a6:	2204      	movs	r2, #4
 80010a8:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <HAL_DMA_PollForTransfer+0x22c>)
 80010aa:	605a      	str	r2, [r3, #4]
 80010ac:	e7d2      	b.n	8001054 <HAL_DMA_PollForTransfer+0x1b8>
 80010ae:	2240      	movs	r2, #64	; 0x40
 80010b0:	e7fa      	b.n	80010a8 <HAL_DMA_PollForTransfer+0x20c>
 80010b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010b6:	e7f7      	b.n	80010a8 <HAL_DMA_PollForTransfer+0x20c>
 80010b8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010bc:	e7f4      	b.n	80010a8 <HAL_DMA_PollForTransfer+0x20c>
 80010be:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80010c2:	e7f1      	b.n	80010a8 <HAL_DMA_PollForTransfer+0x20c>
 80010c4:	40020008 	.word	0x40020008
 80010c8:	40020000 	.word	0x40020000

080010cc <HAL_DMA_IRQHandler>:
{
 80010cc:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80010ce:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80010d0:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80010d2:	6804      	ldr	r4, [r0, #0]
 80010d4:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80010d6:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80010d8:	2304      	movs	r3, #4
 80010da:	408b      	lsls	r3, r1
 80010dc:	421a      	tst	r2, r3
 80010de:	d036      	beq.n	800114e <HAL_DMA_IRQHandler+0x82>
 80010e0:	f015 0f04 	tst.w	r5, #4
 80010e4:	d033      	beq.n	800114e <HAL_DMA_IRQHandler+0x82>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010e6:	6823      	ldr	r3, [r4, #0]
 80010e8:	f013 0f20 	tst.w	r3, #32
 80010ec:	d103      	bne.n	80010f6 <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010ee:	6823      	ldr	r3, [r4, #0]
 80010f0:	f023 0304 	bic.w	r3, r3, #4
 80010f4:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80010f6:	6803      	ldr	r3, [r0, #0]
 80010f8:	4a43      	ldr	r2, [pc, #268]	; (8001208 <HAL_DMA_IRQHandler+0x13c>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d014      	beq.n	8001128 <HAL_DMA_IRQHandler+0x5c>
 80010fe:	3214      	adds	r2, #20
 8001100:	4293      	cmp	r3, r2
 8001102:	d019      	beq.n	8001138 <HAL_DMA_IRQHandler+0x6c>
 8001104:	3214      	adds	r2, #20
 8001106:	4293      	cmp	r3, r2
 8001108:	d018      	beq.n	800113c <HAL_DMA_IRQHandler+0x70>
 800110a:	3214      	adds	r2, #20
 800110c:	4293      	cmp	r3, r2
 800110e:	d018      	beq.n	8001142 <HAL_DMA_IRQHandler+0x76>
 8001110:	3214      	adds	r2, #20
 8001112:	4293      	cmp	r3, r2
 8001114:	d018      	beq.n	8001148 <HAL_DMA_IRQHandler+0x7c>
 8001116:	3214      	adds	r2, #20
 8001118:	4293      	cmp	r3, r2
 800111a:	d002      	beq.n	8001122 <HAL_DMA_IRQHandler+0x56>
 800111c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001120:	e003      	b.n	800112a <HAL_DMA_IRQHandler+0x5e>
 8001122:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001126:	e000      	b.n	800112a <HAL_DMA_IRQHandler+0x5e>
 8001128:	2204      	movs	r2, #4
 800112a:	4b38      	ldr	r3, [pc, #224]	; (800120c <HAL_DMA_IRQHandler+0x140>)
 800112c:	605a      	str	r2, [r3, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 800112e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001130:	2b00      	cmp	r3, #0
 8001132:	d067      	beq.n	8001204 <HAL_DMA_IRQHandler+0x138>
      hdma->XferHalfCpltCallback(hdma);
 8001134:	4798      	blx	r3
 8001136:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001138:	2240      	movs	r2, #64	; 0x40
 800113a:	e7f6      	b.n	800112a <HAL_DMA_IRQHandler+0x5e>
 800113c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001140:	e7f3      	b.n	800112a <HAL_DMA_IRQHandler+0x5e>
 8001142:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001146:	e7f0      	b.n	800112a <HAL_DMA_IRQHandler+0x5e>
 8001148:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800114c:	e7ed      	b.n	800112a <HAL_DMA_IRQHandler+0x5e>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800114e:	2302      	movs	r3, #2
 8001150:	408b      	lsls	r3, r1
 8001152:	421a      	tst	r2, r3
 8001154:	d03b      	beq.n	80011ce <HAL_DMA_IRQHandler+0x102>
 8001156:	f015 0f02 	tst.w	r5, #2
 800115a:	d038      	beq.n	80011ce <HAL_DMA_IRQHandler+0x102>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800115c:	6823      	ldr	r3, [r4, #0]
 800115e:	f013 0f20 	tst.w	r3, #32
 8001162:	d106      	bne.n	8001172 <HAL_DMA_IRQHandler+0xa6>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001164:	6823      	ldr	r3, [r4, #0]
 8001166:	f023 030a 	bic.w	r3, r3, #10
 800116a:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800116c:	2301      	movs	r3, #1
 800116e:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001172:	6803      	ldr	r3, [r0, #0]
 8001174:	4a24      	ldr	r2, [pc, #144]	; (8001208 <HAL_DMA_IRQHandler+0x13c>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d014      	beq.n	80011a4 <HAL_DMA_IRQHandler+0xd8>
 800117a:	3214      	adds	r2, #20
 800117c:	4293      	cmp	r3, r2
 800117e:	d01b      	beq.n	80011b8 <HAL_DMA_IRQHandler+0xec>
 8001180:	3214      	adds	r2, #20
 8001182:	4293      	cmp	r3, r2
 8001184:	d01a      	beq.n	80011bc <HAL_DMA_IRQHandler+0xf0>
 8001186:	3214      	adds	r2, #20
 8001188:	4293      	cmp	r3, r2
 800118a:	d01a      	beq.n	80011c2 <HAL_DMA_IRQHandler+0xf6>
 800118c:	3214      	adds	r2, #20
 800118e:	4293      	cmp	r3, r2
 8001190:	d01a      	beq.n	80011c8 <HAL_DMA_IRQHandler+0xfc>
 8001192:	3214      	adds	r2, #20
 8001194:	4293      	cmp	r3, r2
 8001196:	d002      	beq.n	800119e <HAL_DMA_IRQHandler+0xd2>
 8001198:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800119c:	e003      	b.n	80011a6 <HAL_DMA_IRQHandler+0xda>
 800119e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80011a2:	e000      	b.n	80011a6 <HAL_DMA_IRQHandler+0xda>
 80011a4:	2202      	movs	r2, #2
 80011a6:	4b19      	ldr	r3, [pc, #100]	; (800120c <HAL_DMA_IRQHandler+0x140>)
 80011a8:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 80011aa:	2300      	movs	r3, #0
 80011ac:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80011b0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80011b2:	b33b      	cbz	r3, 8001204 <HAL_DMA_IRQHandler+0x138>
      hdma->XferCpltCallback(hdma);
 80011b4:	4798      	blx	r3
 80011b6:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80011b8:	2220      	movs	r2, #32
 80011ba:	e7f4      	b.n	80011a6 <HAL_DMA_IRQHandler+0xda>
 80011bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011c0:	e7f1      	b.n	80011a6 <HAL_DMA_IRQHandler+0xda>
 80011c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011c6:	e7ee      	b.n	80011a6 <HAL_DMA_IRQHandler+0xda>
 80011c8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011cc:	e7eb      	b.n	80011a6 <HAL_DMA_IRQHandler+0xda>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80011ce:	2308      	movs	r3, #8
 80011d0:	fa03 f101 	lsl.w	r1, r3, r1
 80011d4:	420a      	tst	r2, r1
 80011d6:	d015      	beq.n	8001204 <HAL_DMA_IRQHandler+0x138>
 80011d8:	f015 0f08 	tst.w	r5, #8
 80011dc:	d012      	beq.n	8001204 <HAL_DMA_IRQHandler+0x138>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011de:	6823      	ldr	r3, [r4, #0]
 80011e0:	f023 030e 	bic.w	r3, r3, #14
 80011e4:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80011e6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80011e8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80011ea:	2301      	movs	r3, #1
 80011ec:	fa03 f202 	lsl.w	r2, r3, r2
 80011f0:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80011f2:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80011f4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80011f8:	2300      	movs	r3, #0
 80011fa:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80011fe:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001200:	b103      	cbz	r3, 8001204 <HAL_DMA_IRQHandler+0x138>
      hdma->XferErrorCallback(hdma);
 8001202:	4798      	blx	r3
 8001204:	bd38      	pop	{r3, r4, r5, pc}
 8001206:	bf00      	nop
 8001208:	40020008 	.word	0x40020008
 800120c:	40020000 	.word	0x40020000

08001210 <HAL_DMA_RegisterCallback>:
{
 8001210:	4603      	mov	r3, r0
  __HAL_LOCK(hdma);
 8001212:	f890 0020 	ldrb.w	r0, [r0, #32]
 8001216:	2801      	cmp	r0, #1
 8001218:	d01f      	beq.n	800125a <HAL_DMA_RegisterCallback+0x4a>
 800121a:	2001      	movs	r0, #1
 800121c:	f883 0020 	strb.w	r0, [r3, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001220:	f893 0021 	ldrb.w	r0, [r3, #33]	; 0x21
 8001224:	2801      	cmp	r0, #1
 8001226:	d004      	beq.n	8001232 <HAL_DMA_RegisterCallback+0x22>
    status = HAL_ERROR;
 8001228:	2001      	movs	r0, #1
  __HAL_UNLOCK(hdma);
 800122a:	2200      	movs	r2, #0
 800122c:	f883 2020 	strb.w	r2, [r3, #32]
  return status;
 8001230:	4770      	bx	lr
    switch (CallbackID)
 8001232:	2903      	cmp	r1, #3
 8001234:	d80f      	bhi.n	8001256 <HAL_DMA_RegisterCallback+0x46>
 8001236:	e8df f001 	tbb	[pc, r1]
 800123a:	0502      	.short	0x0502
 800123c:	0b08      	.short	0x0b08
      hdma->XferCpltCallback = pCallback;
 800123e:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_StatusTypeDef status = HAL_OK;
 8001240:	2000      	movs	r0, #0
      break;
 8001242:	e7f2      	b.n	800122a <HAL_DMA_RegisterCallback+0x1a>
      hdma->XferHalfCpltCallback = pCallback;
 8001244:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_StatusTypeDef status = HAL_OK;
 8001246:	2000      	movs	r0, #0
      break;         
 8001248:	e7ef      	b.n	800122a <HAL_DMA_RegisterCallback+0x1a>
      hdma->XferErrorCallback = pCallback;
 800124a:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_StatusTypeDef status = HAL_OK;
 800124c:	2000      	movs	r0, #0
      break;         
 800124e:	e7ec      	b.n	800122a <HAL_DMA_RegisterCallback+0x1a>
      hdma->XferAbortCallback = pCallback;
 8001250:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_StatusTypeDef status = HAL_OK;
 8001252:	2000      	movs	r0, #0
      break; 
 8001254:	e7e9      	b.n	800122a <HAL_DMA_RegisterCallback+0x1a>
      status = HAL_ERROR;
 8001256:	2001      	movs	r0, #1
 8001258:	e7e7      	b.n	800122a <HAL_DMA_RegisterCallback+0x1a>
  __HAL_LOCK(hdma);
 800125a:	2002      	movs	r0, #2
}
 800125c:	4770      	bx	lr

0800125e <HAL_DMA_UnRegisterCallback>:
{
 800125e:	4603      	mov	r3, r0
  __HAL_LOCK(hdma);
 8001260:	f890 2020 	ldrb.w	r2, [r0, #32]
 8001264:	2a01      	cmp	r2, #1
 8001266:	d026      	beq.n	80012b6 <HAL_DMA_UnRegisterCallback+0x58>
 8001268:	2201      	movs	r2, #1
 800126a:	f880 2020 	strb.w	r2, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 800126e:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8001272:	2a01      	cmp	r2, #1
 8001274:	d004      	beq.n	8001280 <HAL_DMA_UnRegisterCallback+0x22>
    status = HAL_ERROR;
 8001276:	2001      	movs	r0, #1
  __HAL_UNLOCK(hdma);
 8001278:	2200      	movs	r2, #0
 800127a:	f883 2020 	strb.w	r2, [r3, #32]
  return status;
 800127e:	4770      	bx	lr
    switch (CallbackID)
 8001280:	2904      	cmp	r1, #4
 8001282:	d816      	bhi.n	80012b2 <HAL_DMA_UnRegisterCallback+0x54>
 8001284:	e8df f001 	tbb	[pc, r1]
 8001288:	0c090603 	.word	0x0c090603
 800128c:	0f          	.byte	0x0f
 800128d:	00          	.byte	0x00
      hdma->XferCpltCallback = NULL;
 800128e:	2000      	movs	r0, #0
 8001290:	6298      	str	r0, [r3, #40]	; 0x28
      break;
 8001292:	e7f1      	b.n	8001278 <HAL_DMA_UnRegisterCallback+0x1a>
      hdma->XferHalfCpltCallback = NULL;
 8001294:	2000      	movs	r0, #0
 8001296:	62d8      	str	r0, [r3, #44]	; 0x2c
      break;         
 8001298:	e7ee      	b.n	8001278 <HAL_DMA_UnRegisterCallback+0x1a>
      hdma->XferErrorCallback = NULL;
 800129a:	2000      	movs	r0, #0
 800129c:	6318      	str	r0, [r3, #48]	; 0x30
      break;         
 800129e:	e7eb      	b.n	8001278 <HAL_DMA_UnRegisterCallback+0x1a>
      hdma->XferAbortCallback = NULL;
 80012a0:	2000      	movs	r0, #0
 80012a2:	6358      	str	r0, [r3, #52]	; 0x34
      break; 
 80012a4:	e7e8      	b.n	8001278 <HAL_DMA_UnRegisterCallback+0x1a>
      hdma->XferCpltCallback = NULL;
 80012a6:	2000      	movs	r0, #0
 80012a8:	6298      	str	r0, [r3, #40]	; 0x28
      hdma->XferHalfCpltCallback = NULL;
 80012aa:	62d8      	str	r0, [r3, #44]	; 0x2c
      hdma->XferErrorCallback = NULL;
 80012ac:	6318      	str	r0, [r3, #48]	; 0x30
      hdma->XferAbortCallback = NULL;
 80012ae:	6358      	str	r0, [r3, #52]	; 0x34
      break; 
 80012b0:	e7e2      	b.n	8001278 <HAL_DMA_UnRegisterCallback+0x1a>
      status = HAL_ERROR;
 80012b2:	2001      	movs	r0, #1
 80012b4:	e7e0      	b.n	8001278 <HAL_DMA_UnRegisterCallback+0x1a>
  __HAL_LOCK(hdma);
 80012b6:	2002      	movs	r0, #2
}
 80012b8:	4770      	bx	lr

080012ba <HAL_DMA_GetState>:
}
 80012ba:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
 80012be:	4770      	bx	lr

080012c0 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 80012c0:	6b80      	ldr	r0, [r0, #56]	; 0x38
}
 80012c2:	4770      	bx	lr

080012c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012c6:	b083      	sub	sp, #12
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80012c8:	2600      	movs	r6, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80012ca:	4634      	mov	r4, r6
 80012cc:	e071      	b.n	80013b2 <HAL_GPIO_Init+0xee>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012ce:	2d00      	cmp	r5, #0
 80012d0:	f000 80a1 	beq.w	8001416 <HAL_GPIO_Init+0x152>
 80012d4:	2d01      	cmp	r5, #1
 80012d6:	d100      	bne.n	80012da <HAL_GPIO_Init+0x16>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012d8:	68ce      	ldr	r6, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012da:	2bff      	cmp	r3, #255	; 0xff
 80012dc:	f200 80af 	bhi.w	800143e <HAL_GPIO_Init+0x17a>
 80012e0:	4686      	mov	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80012e2:	2bff      	cmp	r3, #255	; 0xff
 80012e4:	f200 80ae 	bhi.w	8001444 <HAL_GPIO_Init+0x180>
 80012e8:	00a5      	lsls	r5, r4, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012ea:	f8de 2000 	ldr.w	r2, [lr]
 80012ee:	270f      	movs	r7, #15
 80012f0:	40af      	lsls	r7, r5
 80012f2:	ea22 0207 	bic.w	r2, r2, r7
 80012f6:	fa06 f505 	lsl.w	r5, r6, r5
 80012fa:	432a      	orrs	r2, r5
 80012fc:	f8ce 2000 	str.w	r2, [lr]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001300:	684a      	ldr	r2, [r1, #4]
 8001302:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8001306:	d053      	beq.n	80013b0 <HAL_GPIO_Init+0xec>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001308:	4a63      	ldr	r2, [pc, #396]	; (8001498 <HAL_GPIO_Init+0x1d4>)
 800130a:	6995      	ldr	r5, [r2, #24]
 800130c:	f045 0501 	orr.w	r5, r5, #1
 8001310:	6195      	str	r5, [r2, #24]
 8001312:	6992      	ldr	r2, [r2, #24]
 8001314:	f002 0201 	and.w	r2, r2, #1
 8001318:	9201      	str	r2, [sp, #4]
 800131a:	9a01      	ldr	r2, [sp, #4]
        temp = AFIO->EXTICR[position >> 2U];
 800131c:	08a5      	lsrs	r5, r4, #2
 800131e:	1caf      	adds	r7, r5, #2
 8001320:	4a5e      	ldr	r2, [pc, #376]	; (800149c <HAL_GPIO_Init+0x1d8>)
 8001322:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001326:	f004 0703 	and.w	r7, r4, #3
 800132a:	00bf      	lsls	r7, r7, #2
 800132c:	f04f 0e0f 	mov.w	lr, #15
 8001330:	fa0e fe07 	lsl.w	lr, lr, r7
 8001334:	ea22 020e 	bic.w	r2, r2, lr
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001338:	f8df e170 	ldr.w	lr, [pc, #368]	; 80014ac <HAL_GPIO_Init+0x1e8>
 800133c:	4570      	cmp	r0, lr
 800133e:	f000 8088 	beq.w	8001452 <HAL_GPIO_Init+0x18e>
 8001342:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 8001346:	4570      	cmp	r0, lr
 8001348:	f000 8086 	beq.w	8001458 <HAL_GPIO_Init+0x194>
 800134c:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 8001350:	4570      	cmp	r0, lr
 8001352:	f000 8084 	beq.w	800145e <HAL_GPIO_Init+0x19a>
 8001356:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 800135a:	4570      	cmp	r0, lr
 800135c:	d076      	beq.n	800144c <HAL_GPIO_Init+0x188>
 800135e:	f04f 0e04 	mov.w	lr, #4
 8001362:	fa0e f707 	lsl.w	r7, lr, r7
 8001366:	433a      	orrs	r2, r7
        AFIO->EXTICR[position >> 2U] = temp;
 8001368:	3502      	adds	r5, #2
 800136a:	4f4c      	ldr	r7, [pc, #304]	; (800149c <HAL_GPIO_Init+0x1d8>)
 800136c:	f847 2025 	str.w	r2, [r7, r5, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001370:	684a      	ldr	r2, [r1, #4]
 8001372:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8001376:	d075      	beq.n	8001464 <HAL_GPIO_Init+0x1a0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001378:	4d49      	ldr	r5, [pc, #292]	; (80014a0 <HAL_GPIO_Init+0x1dc>)
 800137a:	682a      	ldr	r2, [r5, #0]
 800137c:	431a      	orrs	r2, r3
 800137e:	602a      	str	r2, [r5, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001380:	684a      	ldr	r2, [r1, #4]
 8001382:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001386:	d073      	beq.n	8001470 <HAL_GPIO_Init+0x1ac>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001388:	4d45      	ldr	r5, [pc, #276]	; (80014a0 <HAL_GPIO_Init+0x1dc>)
 800138a:	686a      	ldr	r2, [r5, #4]
 800138c:	431a      	orrs	r2, r3
 800138e:	606a      	str	r2, [r5, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001390:	684a      	ldr	r2, [r1, #4]
 8001392:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 8001396:	d071      	beq.n	800147c <HAL_GPIO_Init+0x1b8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001398:	4d41      	ldr	r5, [pc, #260]	; (80014a0 <HAL_GPIO_Init+0x1dc>)
 800139a:	68aa      	ldr	r2, [r5, #8]
 800139c:	431a      	orrs	r2, r3
 800139e:	60aa      	str	r2, [r5, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013a0:	684a      	ldr	r2, [r1, #4]
 80013a2:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 80013a6:	d06f      	beq.n	8001488 <HAL_GPIO_Init+0x1c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013a8:	4d3d      	ldr	r5, [pc, #244]	; (80014a0 <HAL_GPIO_Init+0x1dc>)
 80013aa:	68ea      	ldr	r2, [r5, #12]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	60eb      	str	r3, [r5, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80013b0:	3401      	adds	r4, #1
 80013b2:	2c0f      	cmp	r4, #15
 80013b4:	d86e      	bhi.n	8001494 <HAL_GPIO_Init+0x1d0>
    ioposition = (0x01U << position);
 80013b6:	2201      	movs	r2, #1
 80013b8:	40a2      	lsls	r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ba:	680b      	ldr	r3, [r1, #0]
 80013bc:	4013      	ands	r3, r2
    if (iocurrent == ioposition)
 80013be:	429a      	cmp	r2, r3
 80013c0:	d1f6      	bne.n	80013b0 <HAL_GPIO_Init+0xec>
      switch (GPIO_Init->Mode)
 80013c2:	684d      	ldr	r5, [r1, #4]
 80013c4:	2d12      	cmp	r5, #18
 80013c6:	d030      	beq.n	800142a <HAL_GPIO_Init+0x166>
 80013c8:	d80b      	bhi.n	80013e2 <HAL_GPIO_Init+0x11e>
 80013ca:	2d02      	cmp	r5, #2
 80013cc:	d02a      	beq.n	8001424 <HAL_GPIO_Init+0x160>
 80013ce:	f67f af7e 	bls.w	80012ce <HAL_GPIO_Init+0xa>
 80013d2:	2d03      	cmp	r5, #3
 80013d4:	d02f      	beq.n	8001436 <HAL_GPIO_Init+0x172>
 80013d6:	2d11      	cmp	r5, #17
 80013d8:	f47f af7f 	bne.w	80012da <HAL_GPIO_Init+0x16>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013dc:	68ce      	ldr	r6, [r1, #12]
 80013de:	3604      	adds	r6, #4
          break;
 80013e0:	e77b      	b.n	80012da <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 80013e2:	4f30      	ldr	r7, [pc, #192]	; (80014a4 <HAL_GPIO_Init+0x1e0>)
 80013e4:	42bd      	cmp	r5, r7
 80013e6:	d016      	beq.n	8001416 <HAL_GPIO_Init+0x152>
 80013e8:	d90c      	bls.n	8001404 <HAL_GPIO_Init+0x140>
 80013ea:	4f2f      	ldr	r7, [pc, #188]	; (80014a8 <HAL_GPIO_Init+0x1e4>)
 80013ec:	42bd      	cmp	r5, r7
 80013ee:	d012      	beq.n	8001416 <HAL_GPIO_Init+0x152>
 80013f0:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80013f4:	42bd      	cmp	r5, r7
 80013f6:	d00e      	beq.n	8001416 <HAL_GPIO_Init+0x152>
 80013f8:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 80013fc:	42bd      	cmp	r5, r7
 80013fe:	f47f af6c 	bne.w	80012da <HAL_GPIO_Init+0x16>
 8001402:	e008      	b.n	8001416 <HAL_GPIO_Init+0x152>
 8001404:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8001408:	42bd      	cmp	r5, r7
 800140a:	d004      	beq.n	8001416 <HAL_GPIO_Init+0x152>
 800140c:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8001410:	42bd      	cmp	r5, r7
 8001412:	f47f af62 	bne.w	80012da <HAL_GPIO_Init+0x16>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001416:	688d      	ldr	r5, [r1, #8]
 8001418:	b17d      	cbz	r5, 800143a <HAL_GPIO_Init+0x176>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800141a:	2d01      	cmp	r5, #1
 800141c:	d008      	beq.n	8001430 <HAL_GPIO_Init+0x16c>
            GPIOx->BRR = ioposition;
 800141e:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001420:	2608      	movs	r6, #8
 8001422:	e75a      	b.n	80012da <HAL_GPIO_Init+0x16>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001424:	68ce      	ldr	r6, [r1, #12]
 8001426:	3608      	adds	r6, #8
          break;
 8001428:	e757      	b.n	80012da <HAL_GPIO_Init+0x16>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800142a:	68ce      	ldr	r6, [r1, #12]
 800142c:	360c      	adds	r6, #12
          break;
 800142e:	e754      	b.n	80012da <HAL_GPIO_Init+0x16>
            GPIOx->BSRR = ioposition;
 8001430:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001432:	2608      	movs	r6, #8
 8001434:	e751      	b.n	80012da <HAL_GPIO_Init+0x16>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001436:	2600      	movs	r6, #0
 8001438:	e74f      	b.n	80012da <HAL_GPIO_Init+0x16>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800143a:	2604      	movs	r6, #4
 800143c:	e74d      	b.n	80012da <HAL_GPIO_Init+0x16>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800143e:	f100 0e04 	add.w	lr, r0, #4
 8001442:	e74e      	b.n	80012e2 <HAL_GPIO_Init+0x1e>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8001444:	f1a4 0508 	sub.w	r5, r4, #8
 8001448:	00ad      	lsls	r5, r5, #2
 800144a:	e74e      	b.n	80012ea <HAL_GPIO_Init+0x26>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800144c:	f04f 0e03 	mov.w	lr, #3
 8001450:	e787      	b.n	8001362 <HAL_GPIO_Init+0x9e>
 8001452:	f04f 0e00 	mov.w	lr, #0
 8001456:	e784      	b.n	8001362 <HAL_GPIO_Init+0x9e>
 8001458:	f04f 0e01 	mov.w	lr, #1
 800145c:	e781      	b.n	8001362 <HAL_GPIO_Init+0x9e>
 800145e:	f04f 0e02 	mov.w	lr, #2
 8001462:	e77e      	b.n	8001362 <HAL_GPIO_Init+0x9e>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001464:	4d0e      	ldr	r5, [pc, #56]	; (80014a0 <HAL_GPIO_Init+0x1dc>)
 8001466:	682a      	ldr	r2, [r5, #0]
 8001468:	ea22 0203 	bic.w	r2, r2, r3
 800146c:	602a      	str	r2, [r5, #0]
 800146e:	e787      	b.n	8001380 <HAL_GPIO_Init+0xbc>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001470:	4d0b      	ldr	r5, [pc, #44]	; (80014a0 <HAL_GPIO_Init+0x1dc>)
 8001472:	686a      	ldr	r2, [r5, #4]
 8001474:	ea22 0203 	bic.w	r2, r2, r3
 8001478:	606a      	str	r2, [r5, #4]
 800147a:	e789      	b.n	8001390 <HAL_GPIO_Init+0xcc>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800147c:	4d08      	ldr	r5, [pc, #32]	; (80014a0 <HAL_GPIO_Init+0x1dc>)
 800147e:	68aa      	ldr	r2, [r5, #8]
 8001480:	ea22 0203 	bic.w	r2, r2, r3
 8001484:	60aa      	str	r2, [r5, #8]
 8001486:	e78b      	b.n	80013a0 <HAL_GPIO_Init+0xdc>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001488:	4d05      	ldr	r5, [pc, #20]	; (80014a0 <HAL_GPIO_Init+0x1dc>)
 800148a:	68ea      	ldr	r2, [r5, #12]
 800148c:	ea22 0303 	bic.w	r3, r2, r3
 8001490:	60eb      	str	r3, [r5, #12]
 8001492:	e78d      	b.n	80013b0 <HAL_GPIO_Init+0xec>
        }
      }
    }
  }
}
 8001494:	b003      	add	sp, #12
 8001496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001498:	40021000 	.word	0x40021000
 800149c:	40010000 	.word	0x40010000
 80014a0:	40010400 	.word	0x40010400
 80014a4:	10210000 	.word	0x10210000
 80014a8:	10310000 	.word	0x10310000
 80014ac:	40010800 	.word	0x40010800

080014b0 <HAL_GPIO_DeInit>:
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00U;
 80014b0:	2200      	movs	r2, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 80014b2:	e065      	b.n	8001580 <HAL_GPIO_DeInit+0xd0>
    if (iocurrent)
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014b4:	f100 0e04 	add.w	lr, r0, #4
 80014b8:	e03d      	b.n	8001536 <HAL_GPIO_DeInit+0x86>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80014ba:	f1a2 0608 	sub.w	r6, r2, #8
 80014be:	00b7      	lsls	r7, r6, #2

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80014c0:	f8de 4000 	ldr.w	r4, [lr]
 80014c4:	250f      	movs	r5, #15
 80014c6:	fa05 f607 	lsl.w	r6, r5, r7
 80014ca:	ea24 0406 	bic.w	r4, r4, r6
 80014ce:	2604      	movs	r6, #4
 80014d0:	40be      	lsls	r6, r7
 80014d2:	4334      	orrs	r4, r6
 80014d4:	f8ce 4000 	str.w	r4, [lr]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80014d8:	68c4      	ldr	r4, [r0, #12]
 80014da:	43db      	mvns	r3, r3
 80014dc:	401c      	ands	r4, r3
 80014de:	60c4      	str	r4, [r0, #12]

      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2U];
 80014e0:	ea4f 0e92 	mov.w	lr, r2, lsr #2
 80014e4:	f10e 0602 	add.w	r6, lr, #2
 80014e8:	4c2a      	ldr	r4, [pc, #168]	; (8001594 <HAL_GPIO_DeInit+0xe4>)
 80014ea:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
      tmp &= 0x0FU << (4U * (position & 0x03U));
 80014ee:	f002 0403 	and.w	r4, r2, #3
 80014f2:	00a4      	lsls	r4, r4, #2
 80014f4:	40a5      	lsls	r5, r4
 80014f6:	402e      	ands	r6, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80014f8:	4f27      	ldr	r7, [pc, #156]	; (8001598 <HAL_GPIO_DeInit+0xe8>)
 80014fa:	42b8      	cmp	r0, r7
 80014fc:	d021      	beq.n	8001542 <HAL_GPIO_DeInit+0x92>
 80014fe:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001502:	42b8      	cmp	r0, r7
 8001504:	d01f      	beq.n	8001546 <HAL_GPIO_DeInit+0x96>
 8001506:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800150a:	42b8      	cmp	r0, r7
 800150c:	d01d      	beq.n	800154a <HAL_GPIO_DeInit+0x9a>
 800150e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001512:	42b8      	cmp	r0, r7
 8001514:	d013      	beq.n	800153e <HAL_GPIO_DeInit+0x8e>
 8001516:	2704      	movs	r7, #4
 8001518:	fa07 f404 	lsl.w	r4, r7, r4
 800151c:	42a6      	cmp	r6, r4
 800151e:	d016      	beq.n	800154e <HAL_GPIO_DeInit+0x9e>
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
      }
    }

    position++;
 8001520:	3201      	adds	r2, #1
  while ((GPIO_Pin >> position) != 0U)
 8001522:	fa31 f302 	lsrs.w	r3, r1, r2
 8001526:	d029      	beq.n	800157c <HAL_GPIO_DeInit+0xcc>
    iocurrent = (GPIO_Pin) & (1U << position);
 8001528:	2301      	movs	r3, #1
 800152a:	4093      	lsls	r3, r2
    if (iocurrent)
 800152c:	400b      	ands	r3, r1
 800152e:	d0f7      	beq.n	8001520 <HAL_GPIO_DeInit+0x70>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001530:	2bff      	cmp	r3, #255	; 0xff
 8001532:	d8bf      	bhi.n	80014b4 <HAL_GPIO_DeInit+0x4>
 8001534:	4686      	mov	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8001536:	2bff      	cmp	r3, #255	; 0xff
 8001538:	d8bf      	bhi.n	80014ba <HAL_GPIO_DeInit+0xa>
 800153a:	0097      	lsls	r7, r2, #2
 800153c:	e7c0      	b.n	80014c0 <HAL_GPIO_DeInit+0x10>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800153e:	2703      	movs	r7, #3
 8001540:	e7ea      	b.n	8001518 <HAL_GPIO_DeInit+0x68>
 8001542:	2700      	movs	r7, #0
 8001544:	e7e8      	b.n	8001518 <HAL_GPIO_DeInit+0x68>
 8001546:	2701      	movs	r7, #1
 8001548:	e7e6      	b.n	8001518 <HAL_GPIO_DeInit+0x68>
 800154a:	2702      	movs	r7, #2
 800154c:	e7e4      	b.n	8001518 <HAL_GPIO_DeInit+0x68>
        CLEAR_BIT(AFIO->EXTICR[position >> 2U], tmp);
 800154e:	4f11      	ldr	r7, [pc, #68]	; (8001594 <HAL_GPIO_DeInit+0xe4>)
 8001550:	f10e 0402 	add.w	r4, lr, #2
 8001554:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
 8001558:	ea26 0505 	bic.w	r5, r6, r5
 800155c:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8001560:	4c0e      	ldr	r4, [pc, #56]	; (800159c <HAL_GPIO_DeInit+0xec>)
 8001562:	6825      	ldr	r5, [r4, #0]
 8001564:	401d      	ands	r5, r3
 8001566:	6025      	str	r5, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8001568:	6865      	ldr	r5, [r4, #4]
 800156a:	401d      	ands	r5, r3
 800156c:	6065      	str	r5, [r4, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800156e:	68a5      	ldr	r5, [r4, #8]
 8001570:	401d      	ands	r5, r3
 8001572:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8001574:	68e5      	ldr	r5, [r4, #12]
 8001576:	402b      	ands	r3, r5
 8001578:	60e3      	str	r3, [r4, #12]
 800157a:	e7d1      	b.n	8001520 <HAL_GPIO_DeInit+0x70>
  }
}
 800157c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    position++;
 800157e:	3201      	adds	r2, #1
  while ((GPIO_Pin >> position) != 0U)
 8001580:	fa31 f302 	lsrs.w	r3, r1, r2
 8001584:	d005      	beq.n	8001592 <HAL_GPIO_DeInit+0xe2>
    iocurrent = (GPIO_Pin) & (1U << position);
 8001586:	2301      	movs	r3, #1
 8001588:	4093      	lsls	r3, r2
    if (iocurrent)
 800158a:	400b      	ands	r3, r1
 800158c:	d0f7      	beq.n	800157e <HAL_GPIO_DeInit+0xce>
{
 800158e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001590:	e7ce      	b.n	8001530 <HAL_GPIO_DeInit+0x80>
 8001592:	4770      	bx	lr
 8001594:	40010000 	.word	0x40010000
 8001598:	40010800 	.word	0x40010800
 800159c:	40010400 	.word	0x40010400

080015a0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015a0:	6883      	ldr	r3, [r0, #8]
 80015a2:	4219      	tst	r1, r3
 80015a4:	d101      	bne.n	80015aa <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015a6:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80015a8:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 80015aa:	2001      	movs	r0, #1
 80015ac:	4770      	bx	lr

080015ae <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015ae:	b912      	cbnz	r2, 80015b6 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015b0:	0409      	lsls	r1, r1, #16
 80015b2:	6101      	str	r1, [r0, #16]
 80015b4:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 80015b6:	6101      	str	r1, [r0, #16]
 80015b8:	4770      	bx	lr

080015ba <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80015ba:	68c3      	ldr	r3, [r0, #12]
 80015bc:	4059      	eors	r1, r3
 80015be:	60c1      	str	r1, [r0, #12]
 80015c0:	4770      	bx	lr

080015c2 <HAL_GPIO_LockPin>:
* @param  GPIO_Pin: specifies the port bit to be locked.
*         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
* @retval None
*/
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015c2:	b082      	sub	sp, #8
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 80015c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015c8:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_LOCK_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  SET_BIT(tmp, GPIO_Pin);
 80015ca:	9b01      	ldr	r3, [sp, #4]
 80015cc:	430b      	orrs	r3, r1
 80015ce:	9301      	str	r3, [sp, #4]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 80015d0:	9b01      	ldr	r3, [sp, #4]
 80015d2:	6183      	str	r3, [r0, #24]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
 80015d4:	6181      	str	r1, [r0, #24]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 80015d6:	9b01      	ldr	r3, [sp, #4]
 80015d8:	6183      	str	r3, [r0, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80015da:	6983      	ldr	r3, [r0, #24]
 80015dc:	9301      	str	r3, [sp, #4]

  if ((uint32_t)(GPIOx->LCKR & GPIO_LCKR_LCKK))
 80015de:	6983      	ldr	r3, [r0, #24]
 80015e0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80015e4:	d102      	bne.n	80015ec <HAL_GPIO_LockPin+0x2a>
  {
    return HAL_OK;
  }
  else
  {
    return HAL_ERROR;
 80015e6:	2001      	movs	r0, #1
  }
}
 80015e8:	b002      	add	sp, #8
 80015ea:	4770      	bx	lr
    return HAL_OK;
 80015ec:	2000      	movs	r0, #0
 80015ee:	e7fb      	b.n	80015e8 <HAL_GPIO_LockPin+0x26>

080015f0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015f0:	4770      	bx	lr

080015f2 <HAL_GPIO_EXTI_IRQHandler>:
{
 80015f2:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80015f4:	4b04      	ldr	r3, [pc, #16]	; (8001608 <HAL_GPIO_EXTI_IRQHandler+0x16>)
 80015f6:	695b      	ldr	r3, [r3, #20]
 80015f8:	4203      	tst	r3, r0
 80015fa:	d100      	bne.n	80015fe <HAL_GPIO_EXTI_IRQHandler+0xc>
 80015fc:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015fe:	4b02      	ldr	r3, [pc, #8]	; (8001608 <HAL_GPIO_EXTI_IRQHandler+0x16>)
 8001600:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001602:	f7ff fff5 	bl	80015f0 <HAL_GPIO_EXTI_Callback>
}
 8001606:	e7f9      	b.n	80015fc <HAL_GPIO_EXTI_IRQHandler+0xa>
 8001608:	40010400 	.word	0x40010400

0800160c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800160c:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800160e:	4b08      	ldr	r3, [pc, #32]	; (8001630 <RCC_Delay+0x24>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a08      	ldr	r2, [pc, #32]	; (8001634 <RCC_Delay+0x28>)
 8001614:	fba2 2303 	umull	r2, r3, r2, r3
 8001618:	0a5b      	lsrs	r3, r3, #9
 800161a:	fb00 f003 	mul.w	r0, r0, r3
 800161e:	9001      	str	r0, [sp, #4]
 8001620:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001622:	9b01      	ldr	r3, [sp, #4]
 8001624:	1e5a      	subs	r2, r3, #1
 8001626:	9201      	str	r2, [sp, #4]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d1f9      	bne.n	8001620 <RCC_Delay+0x14>
}
 800162c:	b002      	add	sp, #8
 800162e:	4770      	bx	lr
 8001630:	20000000 	.word	0x20000000
 8001634:	10624dd3 	.word	0x10624dd3

08001638 <HAL_RCC_DeInit>:
{
 8001638:	b570      	push	{r4, r5, r6, lr}
  tickstart = HAL_GetTick();
 800163a:	f7ff f949 	bl	80008d0 <HAL_GetTick>
 800163e:	4604      	mov	r4, r0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001640:	4a35      	ldr	r2, [pc, #212]	; (8001718 <HAL_RCC_DeInit+0xe0>)
 8001642:	6813      	ldr	r3, [r2, #0]
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	6013      	str	r3, [r2, #0]
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800164a:	4b33      	ldr	r3, [pc, #204]	; (8001718 <HAL_RCC_DeInit+0xe0>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f013 0f02 	tst.w	r3, #2
 8001652:	d107      	bne.n	8001664 <HAL_RCC_DeInit+0x2c>
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001654:	f7ff f93c 	bl	80008d0 <HAL_GetTick>
 8001658:	1b00      	subs	r0, r0, r4
 800165a:	2802      	cmp	r0, #2
 800165c:	d9f5      	bls.n	800164a <HAL_RCC_DeInit+0x12>
      return HAL_TIMEOUT;
 800165e:	2403      	movs	r4, #3
}
 8001660:	4620      	mov	r0, r4
 8001662:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 8001664:	4d2c      	ldr	r5, [pc, #176]	; (8001718 <HAL_RCC_DeInit+0xe0>)
 8001666:	682b      	ldr	r3, [r5, #0]
 8001668:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800166c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001670:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8001672:	f7ff f92d 	bl	80008d0 <HAL_GetTick>
 8001676:	4604      	mov	r4, r0
  CLEAR_REG(RCC->CFGR);
 8001678:	2300      	movs	r3, #0
 800167a:	606b      	str	r3, [r5, #4]
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800167c:	4b26      	ldr	r3, [pc, #152]	; (8001718 <HAL_RCC_DeInit+0xe0>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f013 0f0c 	tst.w	r3, #12
 8001684:	d008      	beq.n	8001698 <HAL_RCC_DeInit+0x60>
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001686:	f7ff f923 	bl	80008d0 <HAL_GetTick>
 800168a:	1b00      	subs	r0, r0, r4
 800168c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001690:	4298      	cmp	r0, r3
 8001692:	d9f3      	bls.n	800167c <HAL_RCC_DeInit+0x44>
      return HAL_TIMEOUT;
 8001694:	2403      	movs	r4, #3
 8001696:	e7e3      	b.n	8001660 <HAL_RCC_DeInit+0x28>
  SystemCoreClock = HSI_VALUE;
 8001698:	4a20      	ldr	r2, [pc, #128]	; (800171c <HAL_RCC_DeInit+0xe4>)
 800169a:	4b21      	ldr	r3, [pc, #132]	; (8001720 <HAL_RCC_DeInit+0xe8>)
 800169c:	601a      	str	r2, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800169e:	200f      	movs	r0, #15
 80016a0:	f7ff f8d4 	bl	800084c <HAL_InitTick>
 80016a4:	4604      	mov	r4, r0
 80016a6:	b108      	cbz	r0, 80016ac <HAL_RCC_DeInit+0x74>
    return HAL_ERROR;
 80016a8:	2401      	movs	r4, #1
 80016aa:	e7d9      	b.n	8001660 <HAL_RCC_DeInit+0x28>
  tickstart = HAL_GetTick();
 80016ac:	f7ff f910 	bl	80008d0 <HAL_GetTick>
 80016b0:	4605      	mov	r5, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80016b2:	4a19      	ldr	r2, [pc, #100]	; (8001718 <HAL_RCC_DeInit+0xe0>)
 80016b4:	6813      	ldr	r3, [r2, #0]
 80016b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016ba:	6013      	str	r3, [r2, #0]
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80016bc:	4b16      	ldr	r3, [pc, #88]	; (8001718 <HAL_RCC_DeInit+0xe0>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80016c4:	d006      	beq.n	80016d4 <HAL_RCC_DeInit+0x9c>
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016c6:	f7ff f903 	bl	80008d0 <HAL_GetTick>
 80016ca:	1b40      	subs	r0, r0, r5
 80016cc:	2802      	cmp	r0, #2
 80016ce:	d9f5      	bls.n	80016bc <HAL_RCC_DeInit+0x84>
      return HAL_TIMEOUT;
 80016d0:	2403      	movs	r4, #3
 80016d2:	e7c5      	b.n	8001660 <HAL_RCC_DeInit+0x28>
  CLEAR_REG(RCC->CFGR);
 80016d4:	4e10      	ldr	r6, [pc, #64]	; (8001718 <HAL_RCC_DeInit+0xe0>)
 80016d6:	2300      	movs	r3, #0
 80016d8:	6073      	str	r3, [r6, #4]
  tickstart = HAL_GetTick();
 80016da:	f7ff f8f9 	bl	80008d0 <HAL_GetTick>
 80016de:	4605      	mov	r5, r0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 80016e0:	6833      	ldr	r3, [r6, #0]
 80016e2:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80016e6:	6033      	str	r3, [r6, #0]
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80016e8:	4b0b      	ldr	r3, [pc, #44]	; (8001718 <HAL_RCC_DeInit+0xe0>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80016f0:	d006      	beq.n	8001700 <HAL_RCC_DeInit+0xc8>
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016f2:	f7ff f8ed 	bl	80008d0 <HAL_GetTick>
 80016f6:	1b40      	subs	r0, r0, r5
 80016f8:	2864      	cmp	r0, #100	; 0x64
 80016fa:	d9f5      	bls.n	80016e8 <HAL_RCC_DeInit+0xb0>
      return HAL_TIMEOUT;
 80016fc:	2403      	movs	r4, #3
 80016fe:	e7af      	b.n	8001660 <HAL_RCC_DeInit+0x28>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001700:	4b05      	ldr	r3, [pc, #20]	; (8001718 <HAL_RCC_DeInit+0xe0>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001708:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 800170a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800170c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001710:	625a      	str	r2, [r3, #36]	; 0x24
  CLEAR_REG(RCC->CIR);
 8001712:	2200      	movs	r2, #0
 8001714:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001716:	e7a3      	b.n	8001660 <HAL_RCC_DeInit+0x28>
 8001718:	40021000 	.word	0x40021000
 800171c:	007a1200 	.word	0x007a1200
 8001720:	20000000 	.word	0x20000000

08001724 <HAL_RCC_OscConfig>:
{
 8001724:	b570      	push	{r4, r5, r6, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800172a:	6803      	ldr	r3, [r0, #0]
 800172c:	f013 0f01 	tst.w	r3, #1
 8001730:	d03d      	beq.n	80017ae <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001732:	4bac      	ldr	r3, [pc, #688]	; (80019e4 <HAL_RCC_OscConfig+0x2c0>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f003 030c 	and.w	r3, r3, #12
 800173a:	2b04      	cmp	r3, #4
 800173c:	d02e      	beq.n	800179c <HAL_RCC_OscConfig+0x78>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800173e:	4ba9      	ldr	r3, [pc, #676]	; (80019e4 <HAL_RCC_OscConfig+0x2c0>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f003 030c 	and.w	r3, r3, #12
 8001746:	2b08      	cmp	r3, #8
 8001748:	d023      	beq.n	8001792 <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800174a:	6863      	ldr	r3, [r4, #4]
 800174c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001750:	d051      	beq.n	80017f6 <HAL_RCC_OscConfig+0xd2>
 8001752:	2b00      	cmp	r3, #0
 8001754:	d155      	bne.n	8001802 <HAL_RCC_OscConfig+0xde>
 8001756:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800175a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800176c:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800176e:	6863      	ldr	r3, [r4, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d060      	beq.n	8001836 <HAL_RCC_OscConfig+0x112>
        tickstart = HAL_GetTick();
 8001774:	f7ff f8ac 	bl	80008d0 <HAL_GetTick>
 8001778:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800177a:	4b9a      	ldr	r3, [pc, #616]	; (80019e4 <HAL_RCC_OscConfig+0x2c0>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001782:	d114      	bne.n	80017ae <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001784:	f7ff f8a4 	bl	80008d0 <HAL_GetTick>
 8001788:	1b40      	subs	r0, r0, r5
 800178a:	2864      	cmp	r0, #100	; 0x64
 800178c:	d9f5      	bls.n	800177a <HAL_RCC_OscConfig+0x56>
            return HAL_TIMEOUT;
 800178e:	2003      	movs	r0, #3
 8001790:	e1af      	b.n	8001af2 <HAL_RCC_OscConfig+0x3ce>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001792:	4b94      	ldr	r3, [pc, #592]	; (80019e4 <HAL_RCC_OscConfig+0x2c0>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800179a:	d0d6      	beq.n	800174a <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800179c:	4b91      	ldr	r3, [pc, #580]	; (80019e4 <HAL_RCC_OscConfig+0x2c0>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80017a4:	d003      	beq.n	80017ae <HAL_RCC_OscConfig+0x8a>
 80017a6:	6863      	ldr	r3, [r4, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	f000 819f 	beq.w	8001aec <HAL_RCC_OscConfig+0x3c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ae:	6823      	ldr	r3, [r4, #0]
 80017b0:	f013 0f02 	tst.w	r3, #2
 80017b4:	d065      	beq.n	8001882 <HAL_RCC_OscConfig+0x15e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80017b6:	4b8b      	ldr	r3, [pc, #556]	; (80019e4 <HAL_RCC_OscConfig+0x2c0>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f013 0f0c 	tst.w	r3, #12
 80017be:	d04e      	beq.n	800185e <HAL_RCC_OscConfig+0x13a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017c0:	4b88      	ldr	r3, [pc, #544]	; (80019e4 <HAL_RCC_OscConfig+0x2c0>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 030c 	and.w	r3, r3, #12
 80017c8:	2b08      	cmp	r3, #8
 80017ca:	d043      	beq.n	8001854 <HAL_RCC_OscConfig+0x130>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017cc:	6923      	ldr	r3, [r4, #16]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d079      	beq.n	80018c6 <HAL_RCC_OscConfig+0x1a2>
        __HAL_RCC_HSI_ENABLE();
 80017d2:	2201      	movs	r2, #1
 80017d4:	4b84      	ldr	r3, [pc, #528]	; (80019e8 <HAL_RCC_OscConfig+0x2c4>)
 80017d6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80017d8:	f7ff f87a 	bl	80008d0 <HAL_GetTick>
 80017dc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017de:	4b81      	ldr	r3, [pc, #516]	; (80019e4 <HAL_RCC_OscConfig+0x2c0>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f013 0f02 	tst.w	r3, #2
 80017e6:	d165      	bne.n	80018b4 <HAL_RCC_OscConfig+0x190>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017e8:	f7ff f872 	bl	80008d0 <HAL_GetTick>
 80017ec:	1b40      	subs	r0, r0, r5
 80017ee:	2802      	cmp	r0, #2
 80017f0:	d9f5      	bls.n	80017de <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
 80017f2:	2003      	movs	r0, #3
 80017f4:	e17d      	b.n	8001af2 <HAL_RCC_OscConfig+0x3ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017f6:	4a7b      	ldr	r2, [pc, #492]	; (80019e4 <HAL_RCC_OscConfig+0x2c0>)
 80017f8:	6813      	ldr	r3, [r2, #0]
 80017fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017fe:	6013      	str	r3, [r2, #0]
 8001800:	e7b5      	b.n	800176e <HAL_RCC_OscConfig+0x4a>
 8001802:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001806:	d009      	beq.n	800181c <HAL_RCC_OscConfig+0xf8>
 8001808:	4b76      	ldr	r3, [pc, #472]	; (80019e4 <HAL_RCC_OscConfig+0x2c0>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	e7a8      	b.n	800176e <HAL_RCC_OscConfig+0x4a>
 800181c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001820:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	e79b      	b.n	800176e <HAL_RCC_OscConfig+0x4a>
        tickstart = HAL_GetTick();
 8001836:	f7ff f84b 	bl	80008d0 <HAL_GetTick>
 800183a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800183c:	4b69      	ldr	r3, [pc, #420]	; (80019e4 <HAL_RCC_OscConfig+0x2c0>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001844:	d0b3      	beq.n	80017ae <HAL_RCC_OscConfig+0x8a>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001846:	f7ff f843 	bl	80008d0 <HAL_GetTick>
 800184a:	1b40      	subs	r0, r0, r5
 800184c:	2864      	cmp	r0, #100	; 0x64
 800184e:	d9f5      	bls.n	800183c <HAL_RCC_OscConfig+0x118>
            return HAL_TIMEOUT;
 8001850:	2003      	movs	r0, #3
 8001852:	e14e      	b.n	8001af2 <HAL_RCC_OscConfig+0x3ce>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001854:	4b63      	ldr	r3, [pc, #396]	; (80019e4 <HAL_RCC_OscConfig+0x2c0>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800185c:	d1b6      	bne.n	80017cc <HAL_RCC_OscConfig+0xa8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800185e:	4b61      	ldr	r3, [pc, #388]	; (80019e4 <HAL_RCC_OscConfig+0x2c0>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f013 0f02 	tst.w	r3, #2
 8001866:	d004      	beq.n	8001872 <HAL_RCC_OscConfig+0x14e>
 8001868:	6923      	ldr	r3, [r4, #16]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d001      	beq.n	8001872 <HAL_RCC_OscConfig+0x14e>
        return HAL_ERROR;
 800186e:	2001      	movs	r0, #1
 8001870:	e13f      	b.n	8001af2 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001872:	4a5c      	ldr	r2, [pc, #368]	; (80019e4 <HAL_RCC_OscConfig+0x2c0>)
 8001874:	6813      	ldr	r3, [r2, #0]
 8001876:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800187a:	6961      	ldr	r1, [r4, #20]
 800187c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001880:	6013      	str	r3, [r2, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001882:	6823      	ldr	r3, [r4, #0]
 8001884:	f013 0f08 	tst.w	r3, #8
 8001888:	d032      	beq.n	80018f0 <HAL_RCC_OscConfig+0x1cc>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800188a:	69a3      	ldr	r3, [r4, #24]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d06e      	beq.n	800196e <HAL_RCC_OscConfig+0x24a>
      __HAL_RCC_LSI_ENABLE();
 8001890:	2201      	movs	r2, #1
 8001892:	4b56      	ldr	r3, [pc, #344]	; (80019ec <HAL_RCC_OscConfig+0x2c8>)
 8001894:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001896:	f7ff f81b 	bl	80008d0 <HAL_GetTick>
 800189a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800189c:	4b51      	ldr	r3, [pc, #324]	; (80019e4 <HAL_RCC_OscConfig+0x2c0>)
 800189e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a0:	f013 0f02 	tst.w	r3, #2
 80018a4:	d121      	bne.n	80018ea <HAL_RCC_OscConfig+0x1c6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018a6:	f7ff f813 	bl	80008d0 <HAL_GetTick>
 80018aa:	1b40      	subs	r0, r0, r5
 80018ac:	2802      	cmp	r0, #2
 80018ae:	d9f5      	bls.n	800189c <HAL_RCC_OscConfig+0x178>
          return HAL_TIMEOUT;
 80018b0:	2003      	movs	r0, #3
 80018b2:	e11e      	b.n	8001af2 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b4:	4a4b      	ldr	r2, [pc, #300]	; (80019e4 <HAL_RCC_OscConfig+0x2c0>)
 80018b6:	6813      	ldr	r3, [r2, #0]
 80018b8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80018bc:	6961      	ldr	r1, [r4, #20]
 80018be:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80018c2:	6013      	str	r3, [r2, #0]
 80018c4:	e7dd      	b.n	8001882 <HAL_RCC_OscConfig+0x15e>
        __HAL_RCC_HSI_DISABLE();
 80018c6:	2200      	movs	r2, #0
 80018c8:	4b47      	ldr	r3, [pc, #284]	; (80019e8 <HAL_RCC_OscConfig+0x2c4>)
 80018ca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80018cc:	f7ff f800 	bl	80008d0 <HAL_GetTick>
 80018d0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018d2:	4b44      	ldr	r3, [pc, #272]	; (80019e4 <HAL_RCC_OscConfig+0x2c0>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f013 0f02 	tst.w	r3, #2
 80018da:	d0d2      	beq.n	8001882 <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018dc:	f7fe fff8 	bl	80008d0 <HAL_GetTick>
 80018e0:	1b40      	subs	r0, r0, r5
 80018e2:	2802      	cmp	r0, #2
 80018e4:	d9f5      	bls.n	80018d2 <HAL_RCC_OscConfig+0x1ae>
            return HAL_TIMEOUT;
 80018e6:	2003      	movs	r0, #3
 80018e8:	e103      	b.n	8001af2 <HAL_RCC_OscConfig+0x3ce>
      RCC_Delay(1);
 80018ea:	2001      	movs	r0, #1
 80018ec:	f7ff fe8e 	bl	800160c <RCC_Delay>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018f0:	6823      	ldr	r3, [r4, #0]
 80018f2:	f013 0f04 	tst.w	r3, #4
 80018f6:	f000 8099 	beq.w	8001a2c <HAL_RCC_OscConfig+0x308>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018fa:	4b3a      	ldr	r3, [pc, #232]	; (80019e4 <HAL_RCC_OscConfig+0x2c0>)
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001902:	d146      	bne.n	8001992 <HAL_RCC_OscConfig+0x26e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001904:	4b37      	ldr	r3, [pc, #220]	; (80019e4 <HAL_RCC_OscConfig+0x2c0>)
 8001906:	69da      	ldr	r2, [r3, #28]
 8001908:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800190c:	61da      	str	r2, [r3, #28]
 800190e:	69db      	ldr	r3, [r3, #28]
 8001910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001914:	9301      	str	r3, [sp, #4]
 8001916:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001918:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800191a:	4b35      	ldr	r3, [pc, #212]	; (80019f0 <HAL_RCC_OscConfig+0x2cc>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001922:	d038      	beq.n	8001996 <HAL_RCC_OscConfig+0x272>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001924:	68e3      	ldr	r3, [r4, #12]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d049      	beq.n	80019be <HAL_RCC_OscConfig+0x29a>
 800192a:	2b00      	cmp	r3, #0
 800192c:	d14d      	bne.n	80019ca <HAL_RCC_OscConfig+0x2a6>
 800192e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001932:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001936:	6a1a      	ldr	r2, [r3, #32]
 8001938:	f022 0201 	bic.w	r2, r2, #1
 800193c:	621a      	str	r2, [r3, #32]
 800193e:	6a1a      	ldr	r2, [r3, #32]
 8001940:	f022 0204 	bic.w	r2, r2, #4
 8001944:	621a      	str	r2, [r3, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001946:	68e3      	ldr	r3, [r4, #12]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d05d      	beq.n	8001a08 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 800194c:	f7fe ffc0 	bl	80008d0 <HAL_GetTick>
 8001950:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001952:	4b24      	ldr	r3, [pc, #144]	; (80019e4 <HAL_RCC_OscConfig+0x2c0>)
 8001954:	6a1b      	ldr	r3, [r3, #32]
 8001956:	f013 0f02 	tst.w	r3, #2
 800195a:	d166      	bne.n	8001a2a <HAL_RCC_OscConfig+0x306>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800195c:	f7fe ffb8 	bl	80008d0 <HAL_GetTick>
 8001960:	1b80      	subs	r0, r0, r6
 8001962:	f241 3388 	movw	r3, #5000	; 0x1388
 8001966:	4298      	cmp	r0, r3
 8001968:	d9f3      	bls.n	8001952 <HAL_RCC_OscConfig+0x22e>
          return HAL_TIMEOUT;
 800196a:	2003      	movs	r0, #3
 800196c:	e0c1      	b.n	8001af2 <HAL_RCC_OscConfig+0x3ce>
      __HAL_RCC_LSI_DISABLE();
 800196e:	2200      	movs	r2, #0
 8001970:	4b1e      	ldr	r3, [pc, #120]	; (80019ec <HAL_RCC_OscConfig+0x2c8>)
 8001972:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001974:	f7fe ffac 	bl	80008d0 <HAL_GetTick>
 8001978:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800197a:	4b1a      	ldr	r3, [pc, #104]	; (80019e4 <HAL_RCC_OscConfig+0x2c0>)
 800197c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197e:	f013 0f02 	tst.w	r3, #2
 8001982:	d0b5      	beq.n	80018f0 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001984:	f7fe ffa4 	bl	80008d0 <HAL_GetTick>
 8001988:	1b40      	subs	r0, r0, r5
 800198a:	2802      	cmp	r0, #2
 800198c:	d9f5      	bls.n	800197a <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 800198e:	2003      	movs	r0, #3
 8001990:	e0af      	b.n	8001af2 <HAL_RCC_OscConfig+0x3ce>
    FlagStatus       pwrclkchanged = RESET;
 8001992:	2500      	movs	r5, #0
 8001994:	e7c1      	b.n	800191a <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001996:	4a16      	ldr	r2, [pc, #88]	; (80019f0 <HAL_RCC_OscConfig+0x2cc>)
 8001998:	6813      	ldr	r3, [r2, #0]
 800199a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800199e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80019a0:	f7fe ff96 	bl	80008d0 <HAL_GetTick>
 80019a4:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a6:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <HAL_RCC_OscConfig+0x2cc>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f413 7f80 	tst.w	r3, #256	; 0x100
 80019ae:	d1b9      	bne.n	8001924 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019b0:	f7fe ff8e 	bl	80008d0 <HAL_GetTick>
 80019b4:	1b80      	subs	r0, r0, r6
 80019b6:	2864      	cmp	r0, #100	; 0x64
 80019b8:	d9f5      	bls.n	80019a6 <HAL_RCC_OscConfig+0x282>
          return HAL_TIMEOUT;
 80019ba:	2003      	movs	r0, #3
 80019bc:	e099      	b.n	8001af2 <HAL_RCC_OscConfig+0x3ce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019be:	4a09      	ldr	r2, [pc, #36]	; (80019e4 <HAL_RCC_OscConfig+0x2c0>)
 80019c0:	6a13      	ldr	r3, [r2, #32]
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	6213      	str	r3, [r2, #32]
 80019c8:	e7bd      	b.n	8001946 <HAL_RCC_OscConfig+0x222>
 80019ca:	2b05      	cmp	r3, #5
 80019cc:	d012      	beq.n	80019f4 <HAL_RCC_OscConfig+0x2d0>
 80019ce:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <HAL_RCC_OscConfig+0x2c0>)
 80019d0:	6a1a      	ldr	r2, [r3, #32]
 80019d2:	f022 0201 	bic.w	r2, r2, #1
 80019d6:	621a      	str	r2, [r3, #32]
 80019d8:	6a1a      	ldr	r2, [r3, #32]
 80019da:	f022 0204 	bic.w	r2, r2, #4
 80019de:	621a      	str	r2, [r3, #32]
 80019e0:	e7b1      	b.n	8001946 <HAL_RCC_OscConfig+0x222>
 80019e2:	bf00      	nop
 80019e4:	40021000 	.word	0x40021000
 80019e8:	42420000 	.word	0x42420000
 80019ec:	42420480 	.word	0x42420480
 80019f0:	40007000 	.word	0x40007000
 80019f4:	4b41      	ldr	r3, [pc, #260]	; (8001afc <HAL_RCC_OscConfig+0x3d8>)
 80019f6:	6a1a      	ldr	r2, [r3, #32]
 80019f8:	f042 0204 	orr.w	r2, r2, #4
 80019fc:	621a      	str	r2, [r3, #32]
 80019fe:	6a1a      	ldr	r2, [r3, #32]
 8001a00:	f042 0201 	orr.w	r2, r2, #1
 8001a04:	621a      	str	r2, [r3, #32]
 8001a06:	e79e      	b.n	8001946 <HAL_RCC_OscConfig+0x222>
      tickstart = HAL_GetTick();
 8001a08:	f7fe ff62 	bl	80008d0 <HAL_GetTick>
 8001a0c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a0e:	4b3b      	ldr	r3, [pc, #236]	; (8001afc <HAL_RCC_OscConfig+0x3d8>)
 8001a10:	6a1b      	ldr	r3, [r3, #32]
 8001a12:	f013 0f02 	tst.w	r3, #2
 8001a16:	d008      	beq.n	8001a2a <HAL_RCC_OscConfig+0x306>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a18:	f7fe ff5a 	bl	80008d0 <HAL_GetTick>
 8001a1c:	1b80      	subs	r0, r0, r6
 8001a1e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a22:	4298      	cmp	r0, r3
 8001a24:	d9f3      	bls.n	8001a0e <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 8001a26:	2003      	movs	r0, #3
 8001a28:	e063      	b.n	8001af2 <HAL_RCC_OscConfig+0x3ce>
    if(pwrclkchanged == SET)
 8001a2a:	b9e5      	cbnz	r5, 8001a66 <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a2c:	69e3      	ldr	r3, [r4, #28]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d05e      	beq.n	8001af0 <HAL_RCC_OscConfig+0x3cc>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a32:	4a32      	ldr	r2, [pc, #200]	; (8001afc <HAL_RCC_OscConfig+0x3d8>)
 8001a34:	6852      	ldr	r2, [r2, #4]
 8001a36:	f002 020c 	and.w	r2, r2, #12
 8001a3a:	2a08      	cmp	r2, #8
 8001a3c:	d05b      	beq.n	8001af6 <HAL_RCC_OscConfig+0x3d2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d017      	beq.n	8001a72 <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 8001a42:	2200      	movs	r2, #0
 8001a44:	4b2e      	ldr	r3, [pc, #184]	; (8001b00 <HAL_RCC_OscConfig+0x3dc>)
 8001a46:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a48:	f7fe ff42 	bl	80008d0 <HAL_GetTick>
 8001a4c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a4e:	4b2b      	ldr	r3, [pc, #172]	; (8001afc <HAL_RCC_OscConfig+0x3d8>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001a56:	d047      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x3c4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a58:	f7fe ff3a 	bl	80008d0 <HAL_GetTick>
 8001a5c:	1b00      	subs	r0, r0, r4
 8001a5e:	2802      	cmp	r0, #2
 8001a60:	d9f5      	bls.n	8001a4e <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8001a62:	2003      	movs	r0, #3
 8001a64:	e045      	b.n	8001af2 <HAL_RCC_OscConfig+0x3ce>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a66:	4a25      	ldr	r2, [pc, #148]	; (8001afc <HAL_RCC_OscConfig+0x3d8>)
 8001a68:	69d3      	ldr	r3, [r2, #28]
 8001a6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a6e:	61d3      	str	r3, [r2, #28]
 8001a70:	e7dc      	b.n	8001a2c <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 8001a72:	2200      	movs	r2, #0
 8001a74:	4b22      	ldr	r3, [pc, #136]	; (8001b00 <HAL_RCC_OscConfig+0x3dc>)
 8001a76:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a78:	f7fe ff2a 	bl	80008d0 <HAL_GetTick>
 8001a7c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a7e:	4b1f      	ldr	r3, [pc, #124]	; (8001afc <HAL_RCC_OscConfig+0x3d8>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001a86:	d006      	beq.n	8001a96 <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a88:	f7fe ff22 	bl	80008d0 <HAL_GetTick>
 8001a8c:	1b40      	subs	r0, r0, r5
 8001a8e:	2802      	cmp	r0, #2
 8001a90:	d9f5      	bls.n	8001a7e <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8001a92:	2003      	movs	r0, #3
 8001a94:	e02d      	b.n	8001af2 <HAL_RCC_OscConfig+0x3ce>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a96:	6a23      	ldr	r3, [r4, #32]
 8001a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a9c:	d01a      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a9e:	4917      	ldr	r1, [pc, #92]	; (8001afc <HAL_RCC_OscConfig+0x3d8>)
 8001aa0:	684b      	ldr	r3, [r1, #4]
 8001aa2:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8001aa6:	6a22      	ldr	r2, [r4, #32]
 8001aa8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001aaa:	4302      	orrs	r2, r0
 8001aac:	4313      	orrs	r3, r2
 8001aae:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	4b13      	ldr	r3, [pc, #76]	; (8001b00 <HAL_RCC_OscConfig+0x3dc>)
 8001ab4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ab6:	f7fe ff0b 	bl	80008d0 <HAL_GetTick>
 8001aba:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001abc:	4b0f      	ldr	r3, [pc, #60]	; (8001afc <HAL_RCC_OscConfig+0x3d8>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001ac4:	d10e      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x3c0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ac6:	f7fe ff03 	bl	80008d0 <HAL_GetTick>
 8001aca:	1b00      	subs	r0, r0, r4
 8001acc:	2802      	cmp	r0, #2
 8001ace:	d9f5      	bls.n	8001abc <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8001ad0:	2003      	movs	r0, #3
 8001ad2:	e00e      	b.n	8001af2 <HAL_RCC_OscConfig+0x3ce>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ad4:	4a09      	ldr	r2, [pc, #36]	; (8001afc <HAL_RCC_OscConfig+0x3d8>)
 8001ad6:	6853      	ldr	r3, [r2, #4]
 8001ad8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001adc:	68a1      	ldr	r1, [r4, #8]
 8001ade:	430b      	orrs	r3, r1
 8001ae0:	6053      	str	r3, [r2, #4]
 8001ae2:	e7dc      	b.n	8001a9e <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8001ae4:	2000      	movs	r0, #0
 8001ae6:	e004      	b.n	8001af2 <HAL_RCC_OscConfig+0x3ce>
 8001ae8:	2000      	movs	r0, #0
 8001aea:	e002      	b.n	8001af2 <HAL_RCC_OscConfig+0x3ce>
        return HAL_ERROR;
 8001aec:	2001      	movs	r0, #1
 8001aee:	e000      	b.n	8001af2 <HAL_RCC_OscConfig+0x3ce>
  return HAL_OK;
 8001af0:	2000      	movs	r0, #0
}
 8001af2:	b002      	add	sp, #8
 8001af4:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001af6:	2001      	movs	r0, #1
 8001af8:	e7fb      	b.n	8001af2 <HAL_RCC_OscConfig+0x3ce>
 8001afa:	bf00      	nop
 8001afc:	40021000 	.word	0x40021000
 8001b00:	42420060 	.word	0x42420060

08001b04 <HAL_RCC_MCOConfig>:
{
 8001b04:	b530      	push	{r4, r5, lr}
 8001b06:	b087      	sub	sp, #28
 8001b08:	460d      	mov	r5, r1
  GPIO_InitTypeDef gpio = {0U};
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	9304      	str	r3, [sp, #16]
  gpio.Mode      = GPIO_MODE_AF_PP;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	9303      	str	r3, [sp, #12]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001b12:	2303      	movs	r3, #3
 8001b14:	9305      	str	r3, [sp, #20]
  gpio.Pin       = MCO1_PIN;
 8001b16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b1a:	9302      	str	r3, [sp, #8]
  MCO1_CLK_ENABLE();
 8001b1c:	4c0a      	ldr	r4, [pc, #40]	; (8001b48 <HAL_RCC_MCOConfig+0x44>)
 8001b1e:	69a3      	ldr	r3, [r4, #24]
 8001b20:	f043 0304 	orr.w	r3, r3, #4
 8001b24:	61a3      	str	r3, [r4, #24]
 8001b26:	69a3      	ldr	r3, [r4, #24]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	9301      	str	r3, [sp, #4]
 8001b2e:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8001b30:	a902      	add	r1, sp, #8
 8001b32:	4806      	ldr	r0, [pc, #24]	; (8001b4c <HAL_RCC_MCOConfig+0x48>)
 8001b34:	f7ff fbc6 	bl	80012c4 <HAL_GPIO_Init>
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8001b38:	6861      	ldr	r1, [r4, #4]
 8001b3a:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 8001b3e:	4329      	orrs	r1, r5
 8001b40:	6061      	str	r1, [r4, #4]
}
 8001b42:	b007      	add	sp, #28
 8001b44:	bd30      	pop	{r4, r5, pc}
 8001b46:	bf00      	nop
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	40010800 	.word	0x40010800

08001b50 <HAL_RCC_EnableCSS>:
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8001b50:	2201      	movs	r2, #1
 8001b52:	4b01      	ldr	r3, [pc, #4]	; (8001b58 <HAL_RCC_EnableCSS+0x8>)
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	4770      	bx	lr
 8001b58:	4242004c 	.word	0x4242004c

08001b5c <HAL_RCC_DisableCSS>:
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	4b01      	ldr	r3, [pc, #4]	; (8001b64 <HAL_RCC_DisableCSS+0x8>)
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	4770      	bx	lr
 8001b64:	4242004c 	.word	0x4242004c

08001b68 <HAL_RCC_GetSysClockFreq>:
{
 8001b68:	b510      	push	{r4, lr}
 8001b6a:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b6c:	4c15      	ldr	r4, [pc, #84]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0x5c>)
 8001b6e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b72:	f10d 0e18 	add.w	lr, sp, #24
 8001b76:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b7a:	8a23      	ldrh	r3, [r4, #16]
 8001b7c:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8001b80:	4b11      	ldr	r3, [pc, #68]	; (8001bc8 <HAL_RCC_GetSysClockFreq+0x60>)
 8001b82:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001b84:	f003 020c 	and.w	r2, r3, #12
 8001b88:	2a08      	cmp	r2, #8
 8001b8a:	d118      	bne.n	8001bbe <HAL_RCC_GetSysClockFreq+0x56>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b8c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001b90:	4472      	add	r2, lr
 8001b92:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b96:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001b9a:	d103      	bne.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x3c>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b9c:	480b      	ldr	r0, [pc, #44]	; (8001bcc <HAL_RCC_GetSysClockFreq+0x64>)
 8001b9e:	fb00 f002 	mul.w	r0, r0, r2
 8001ba2:	e00d      	b.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x58>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ba4:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <HAL_RCC_GetSysClockFreq+0x60>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8001bac:	4473      	add	r3, lr
 8001bae:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001bb2:	4807      	ldr	r0, [pc, #28]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x68>)
 8001bb4:	fb00 f002 	mul.w	r0, r0, r2
 8001bb8:	fbb0 f0f3 	udiv	r0, r0, r3
 8001bbc:	e000      	b.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x58>
      sysclockfreq = HSE_VALUE;
 8001bbe:	4804      	ldr	r0, [pc, #16]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x68>)
}
 8001bc0:	b006      	add	sp, #24
 8001bc2:	bd10      	pop	{r4, pc}
 8001bc4:	080038c0 	.word	0x080038c0
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	003d0900 	.word	0x003d0900
 8001bd0:	007a1200 	.word	0x007a1200

08001bd4 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001bd4:	4b62      	ldr	r3, [pc, #392]	; (8001d60 <HAL_RCC_ClockConfig+0x18c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	428b      	cmp	r3, r1
 8001bde:	d20c      	bcs.n	8001bfa <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be0:	4a5f      	ldr	r2, [pc, #380]	; (8001d60 <HAL_RCC_ClockConfig+0x18c>)
 8001be2:	6813      	ldr	r3, [r2, #0]
 8001be4:	f023 0307 	bic.w	r3, r3, #7
 8001be8:	430b      	orrs	r3, r1
 8001bea:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001bec:	6813      	ldr	r3, [r2, #0]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	4299      	cmp	r1, r3
 8001bf4:	d001      	beq.n	8001bfa <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
 8001bf6:	2001      	movs	r0, #1
 8001bf8:	4770      	bx	lr
{
 8001bfa:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bfc:	6803      	ldr	r3, [r0, #0]
 8001bfe:	f013 0f02 	tst.w	r3, #2
 8001c02:	d017      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x60>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c04:	f013 0f04 	tst.w	r3, #4
 8001c08:	d004      	beq.n	8001c14 <HAL_RCC_ClockConfig+0x40>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c0a:	4a56      	ldr	r2, [pc, #344]	; (8001d64 <HAL_RCC_ClockConfig+0x190>)
 8001c0c:	6853      	ldr	r3, [r2, #4]
 8001c0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c12:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c14:	6803      	ldr	r3, [r0, #0]
 8001c16:	f013 0f08 	tst.w	r3, #8
 8001c1a:	d004      	beq.n	8001c26 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c1c:	4a51      	ldr	r2, [pc, #324]	; (8001d64 <HAL_RCC_ClockConfig+0x190>)
 8001c1e:	6853      	ldr	r3, [r2, #4]
 8001c20:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c24:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c26:	4a4f      	ldr	r2, [pc, #316]	; (8001d64 <HAL_RCC_ClockConfig+0x190>)
 8001c28:	6853      	ldr	r3, [r2, #4]
 8001c2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c2e:	6884      	ldr	r4, [r0, #8]
 8001c30:	4323      	orrs	r3, r4
 8001c32:	6053      	str	r3, [r2, #4]
 8001c34:	460d      	mov	r5, r1
 8001c36:	4604      	mov	r4, r0
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c38:	6803      	ldr	r3, [r0, #0]
 8001c3a:	f013 0f01 	tst.w	r3, #1
 8001c3e:	d052      	beq.n	8001ce6 <HAL_RCC_ClockConfig+0x112>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c40:	6843      	ldr	r3, [r0, #4]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d023      	beq.n	8001c8e <HAL_RCC_ClockConfig+0xba>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d028      	beq.n	8001c9c <HAL_RCC_ClockConfig+0xc8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c4a:	4a46      	ldr	r2, [pc, #280]	; (8001d64 <HAL_RCC_ClockConfig+0x190>)
 8001c4c:	6812      	ldr	r2, [r2, #0]
 8001c4e:	f012 0f02 	tst.w	r2, #2
 8001c52:	f000 8082 	beq.w	8001d5a <HAL_RCC_ClockConfig+0x186>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c56:	4943      	ldr	r1, [pc, #268]	; (8001d64 <HAL_RCC_ClockConfig+0x190>)
 8001c58:	684a      	ldr	r2, [r1, #4]
 8001c5a:	f022 0203 	bic.w	r2, r2, #3
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8001c62:	f7fe fe35 	bl	80008d0 <HAL_GetTick>
 8001c66:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c68:	6863      	ldr	r3, [r4, #4]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d01d      	beq.n	8001caa <HAL_RCC_ClockConfig+0xd6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d02a      	beq.n	8001cc8 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c72:	4b3c      	ldr	r3, [pc, #240]	; (8001d64 <HAL_RCC_ClockConfig+0x190>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f013 0f0c 	tst.w	r3, #12
 8001c7a:	d034      	beq.n	8001ce6 <HAL_RCC_ClockConfig+0x112>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c7c:	f7fe fe28 	bl	80008d0 <HAL_GetTick>
 8001c80:	1b80      	subs	r0, r0, r6
 8001c82:	f241 3388 	movw	r3, #5000	; 0x1388
 8001c86:	4298      	cmp	r0, r3
 8001c88:	d9f3      	bls.n	8001c72 <HAL_RCC_ClockConfig+0x9e>
          return HAL_TIMEOUT;
 8001c8a:	2003      	movs	r0, #3
 8001c8c:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c8e:	4a35      	ldr	r2, [pc, #212]	; (8001d64 <HAL_RCC_ClockConfig+0x190>)
 8001c90:	6812      	ldr	r2, [r2, #0]
 8001c92:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001c96:	d1de      	bne.n	8001c56 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8001c98:	2001      	movs	r0, #1
 8001c9a:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c9c:	4a31      	ldr	r2, [pc, #196]	; (8001d64 <HAL_RCC_ClockConfig+0x190>)
 8001c9e:	6812      	ldr	r2, [r2, #0]
 8001ca0:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001ca4:	d1d7      	bne.n	8001c56 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8001ca6:	2001      	movs	r0, #1
 8001ca8:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001caa:	4b2e      	ldr	r3, [pc, #184]	; (8001d64 <HAL_RCC_ClockConfig+0x190>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f003 030c 	and.w	r3, r3, #12
 8001cb2:	2b04      	cmp	r3, #4
 8001cb4:	d017      	beq.n	8001ce6 <HAL_RCC_ClockConfig+0x112>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb6:	f7fe fe0b 	bl	80008d0 <HAL_GetTick>
 8001cba:	1b80      	subs	r0, r0, r6
 8001cbc:	f241 3388 	movw	r3, #5000	; 0x1388
 8001cc0:	4298      	cmp	r0, r3
 8001cc2:	d9f2      	bls.n	8001caa <HAL_RCC_ClockConfig+0xd6>
          return HAL_TIMEOUT;
 8001cc4:	2003      	movs	r0, #3
 8001cc6:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cc8:	4b26      	ldr	r3, [pc, #152]	; (8001d64 <HAL_RCC_ClockConfig+0x190>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f003 030c 	and.w	r3, r3, #12
 8001cd0:	2b08      	cmp	r3, #8
 8001cd2:	d008      	beq.n	8001ce6 <HAL_RCC_ClockConfig+0x112>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cd4:	f7fe fdfc 	bl	80008d0 <HAL_GetTick>
 8001cd8:	1b80      	subs	r0, r0, r6
 8001cda:	f241 3388 	movw	r3, #5000	; 0x1388
 8001cde:	4298      	cmp	r0, r3
 8001ce0:	d9f2      	bls.n	8001cc8 <HAL_RCC_ClockConfig+0xf4>
          return HAL_TIMEOUT;
 8001ce2:	2003      	movs	r0, #3
 8001ce4:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001ce6:	4b1e      	ldr	r3, [pc, #120]	; (8001d60 <HAL_RCC_ClockConfig+0x18c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	429d      	cmp	r5, r3
 8001cf0:	d20c      	bcs.n	8001d0c <HAL_RCC_ClockConfig+0x138>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cf2:	4a1b      	ldr	r2, [pc, #108]	; (8001d60 <HAL_RCC_ClockConfig+0x18c>)
 8001cf4:	6813      	ldr	r3, [r2, #0]
 8001cf6:	f023 0307 	bic.w	r3, r3, #7
 8001cfa:	432b      	orrs	r3, r5
 8001cfc:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cfe:	6813      	ldr	r3, [r2, #0]
 8001d00:	f003 0307 	and.w	r3, r3, #7
 8001d04:	429d      	cmp	r5, r3
 8001d06:	d001      	beq.n	8001d0c <HAL_RCC_ClockConfig+0x138>
      return HAL_ERROR;
 8001d08:	2001      	movs	r0, #1
}
 8001d0a:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d0c:	6823      	ldr	r3, [r4, #0]
 8001d0e:	f013 0f04 	tst.w	r3, #4
 8001d12:	d006      	beq.n	8001d22 <HAL_RCC_ClockConfig+0x14e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d14:	4a13      	ldr	r2, [pc, #76]	; (8001d64 <HAL_RCC_ClockConfig+0x190>)
 8001d16:	6853      	ldr	r3, [r2, #4]
 8001d18:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d1c:	68e1      	ldr	r1, [r4, #12]
 8001d1e:	430b      	orrs	r3, r1
 8001d20:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d22:	6823      	ldr	r3, [r4, #0]
 8001d24:	f013 0f08 	tst.w	r3, #8
 8001d28:	d007      	beq.n	8001d3a <HAL_RCC_ClockConfig+0x166>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d2a:	4a0e      	ldr	r2, [pc, #56]	; (8001d64 <HAL_RCC_ClockConfig+0x190>)
 8001d2c:	6853      	ldr	r3, [r2, #4]
 8001d2e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001d32:	6921      	ldr	r1, [r4, #16]
 8001d34:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001d38:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d3a:	f7ff ff15 	bl	8001b68 <HAL_RCC_GetSysClockFreq>
 8001d3e:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <HAL_RCC_ClockConfig+0x190>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001d46:	4a08      	ldr	r2, [pc, #32]	; (8001d68 <HAL_RCC_ClockConfig+0x194>)
 8001d48:	5cd3      	ldrb	r3, [r2, r3]
 8001d4a:	40d8      	lsrs	r0, r3
 8001d4c:	4b07      	ldr	r3, [pc, #28]	; (8001d6c <HAL_RCC_ClockConfig+0x198>)
 8001d4e:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001d50:	200f      	movs	r0, #15
 8001d52:	f7fe fd7b 	bl	800084c <HAL_InitTick>
  return HAL_OK;
 8001d56:	2000      	movs	r0, #0
 8001d58:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001d5a:	2001      	movs	r0, #1
 8001d5c:	bd70      	pop	{r4, r5, r6, pc}
 8001d5e:	bf00      	nop
 8001d60:	40022000 	.word	0x40022000
 8001d64:	40021000 	.word	0x40021000
 8001d68:	080038a8 	.word	0x080038a8
 8001d6c:	20000000 	.word	0x20000000

08001d70 <HAL_RCC_GetHCLKFreq>:
}
 8001d70:	4b01      	ldr	r3, [pc, #4]	; (8001d78 <HAL_RCC_GetHCLKFreq+0x8>)
 8001d72:	6818      	ldr	r0, [r3, #0]
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	20000000 	.word	0x20000000

08001d7c <HAL_RCC_GetPCLK1Freq>:
{
 8001d7c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d7e:	f7ff fff7 	bl	8001d70 <HAL_RCC_GetHCLKFreq>
 8001d82:	4b04      	ldr	r3, [pc, #16]	; (8001d94 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001d8a:	4a03      	ldr	r2, [pc, #12]	; (8001d98 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001d8c:	5cd3      	ldrb	r3, [r2, r3]
}    
 8001d8e:	40d8      	lsrs	r0, r3
 8001d90:	bd08      	pop	{r3, pc}
 8001d92:	bf00      	nop
 8001d94:	40021000 	.word	0x40021000
 8001d98:	080038b8 	.word	0x080038b8

08001d9c <HAL_RCC_GetPCLK2Freq>:
{
 8001d9c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d9e:	f7ff ffe7 	bl	8001d70 <HAL_RCC_GetHCLKFreq>
 8001da2:	4b04      	ldr	r3, [pc, #16]	; (8001db4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001daa:	4a03      	ldr	r2, [pc, #12]	; (8001db8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001dac:	5cd3      	ldrb	r3, [r2, r3]
} 
 8001dae:	40d8      	lsrs	r0, r3
 8001db0:	bd08      	pop	{r3, pc}
 8001db2:	bf00      	nop
 8001db4:	40021000 	.word	0x40021000
 8001db8:	080038b8 	.word	0x080038b8

08001dbc <HAL_RCC_GetOscConfig>:
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI  \
 8001dbc:	230f      	movs	r3, #15
 8001dbe:	6003      	str	r3, [r0, #0]
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 8001dc0:	4b2a      	ldr	r3, [pc, #168]	; (8001e6c <HAL_RCC_GetOscConfig+0xb0>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001dc8:	d030      	beq.n	8001e2c <HAL_RCC_GetOscConfig+0x70>
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 8001dca:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001dce:	6043      	str	r3, [r0, #4]
  RCC_OscInitStruct->HSEPredivValue = __HAL_RCC_HSE_GET_PREDIV();
 8001dd0:	4a26      	ldr	r2, [pc, #152]	; (8001e6c <HAL_RCC_GetOscConfig+0xb0>)
 8001dd2:	6853      	ldr	r3, [r2, #4]
 8001dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd8:	6083      	str	r3, [r0, #8]
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 8001dda:	6813      	ldr	r3, [r2, #0]
 8001ddc:	f013 0f01 	tst.w	r3, #1
 8001de0:	d030      	beq.n	8001e44 <HAL_RCC_GetOscConfig+0x88>
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 8001de2:	2301      	movs	r3, #1
 8001de4:	6103      	str	r3, [r0, #16]
  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR & RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_Pos);
 8001de6:	4a21      	ldr	r2, [pc, #132]	; (8001e6c <HAL_RCC_GetOscConfig+0xb0>)
 8001de8:	6813      	ldr	r3, [r2, #0]
 8001dea:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8001dee:	6143      	str	r3, [r0, #20]
  if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 8001df0:	6a13      	ldr	r3, [r2, #32]
 8001df2:	f013 0f04 	tst.w	r3, #4
 8001df6:	d028      	beq.n	8001e4a <HAL_RCC_GetOscConfig+0x8e>
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 8001df8:	2305      	movs	r3, #5
 8001dfa:	60c3      	str	r3, [r0, #12]
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 8001dfc:	4b1b      	ldr	r3, [pc, #108]	; (8001e6c <HAL_RCC_GetOscConfig+0xb0>)
 8001dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e00:	f013 0f01 	tst.w	r3, #1
 8001e04:	d02c      	beq.n	8001e60 <HAL_RCC_GetOscConfig+0xa4>
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 8001e06:	2301      	movs	r3, #1
 8001e08:	6183      	str	r3, [r0, #24]
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 8001e0a:	4b18      	ldr	r3, [pc, #96]	; (8001e6c <HAL_RCC_GetOscConfig+0xb0>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001e12:	d128      	bne.n	8001e66 <HAL_RCC_GetOscConfig+0xaa>
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 8001e14:	2301      	movs	r3, #1
 8001e16:	61c3      	str	r3, [r0, #28]
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLSRC);
 8001e18:	4a14      	ldr	r2, [pc, #80]	; (8001e6c <HAL_RCC_GetOscConfig+0xb0>)
 8001e1a:	6853      	ldr	r3, [r2, #4]
 8001e1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e20:	6203      	str	r3, [r0, #32]
  RCC_OscInitStruct->PLL.PLLMUL = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLMULL);
 8001e22:	6853      	ldr	r3, [r2, #4]
 8001e24:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001e28:	6243      	str	r3, [r0, #36]	; 0x24
 8001e2a:	4770      	bx	lr
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 8001e2c:	4b0f      	ldr	r3, [pc, #60]	; (8001e6c <HAL_RCC_GetOscConfig+0xb0>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001e34:	d003      	beq.n	8001e3e <HAL_RCC_GetOscConfig+0x82>
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 8001e36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e3a:	6043      	str	r3, [r0, #4]
 8001e3c:	e7c8      	b.n	8001dd0 <HAL_RCC_GetOscConfig+0x14>
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	6043      	str	r3, [r0, #4]
 8001e42:	e7c5      	b.n	8001dd0 <HAL_RCC_GetOscConfig+0x14>
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 8001e44:	2300      	movs	r3, #0
 8001e46:	6103      	str	r3, [r0, #16]
 8001e48:	e7cd      	b.n	8001de6 <HAL_RCC_GetOscConfig+0x2a>
  else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 8001e4a:	4b08      	ldr	r3, [pc, #32]	; (8001e6c <HAL_RCC_GetOscConfig+0xb0>)
 8001e4c:	6a1b      	ldr	r3, [r3, #32]
 8001e4e:	f013 0f01 	tst.w	r3, #1
 8001e52:	d002      	beq.n	8001e5a <HAL_RCC_GetOscConfig+0x9e>
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 8001e54:	2301      	movs	r3, #1
 8001e56:	60c3      	str	r3, [r0, #12]
 8001e58:	e7d0      	b.n	8001dfc <HAL_RCC_GetOscConfig+0x40>
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60c3      	str	r3, [r0, #12]
 8001e5e:	e7cd      	b.n	8001dfc <HAL_RCC_GetOscConfig+0x40>
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 8001e60:	2300      	movs	r3, #0
 8001e62:	6183      	str	r3, [r0, #24]
 8001e64:	e7d1      	b.n	8001e0a <HAL_RCC_GetOscConfig+0x4e>
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 8001e66:	2302      	movs	r3, #2
 8001e68:	61c3      	str	r3, [r0, #28]
 8001e6a:	e7d5      	b.n	8001e18 <HAL_RCC_GetOscConfig+0x5c>
 8001e6c:	40021000 	.word	0x40021000

08001e70 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e70:	230f      	movs	r3, #15
 8001e72:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e74:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <HAL_RCC_GetClockConfig+0x34>)
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	f002 0203 	and.w	r2, r2, #3
 8001e7c:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001e7e:	685a      	ldr	r2, [r3, #4]
 8001e80:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001e84:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8001e86:	685a      	ldr	r2, [r3, #4]
 8001e88:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001e8c:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	08db      	lsrs	r3, r3, #3
 8001e92:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e96:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8001e98:	4b03      	ldr	r3, [pc, #12]	; (8001ea8 <HAL_RCC_GetClockConfig+0x38>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	600b      	str	r3, [r1, #0]
 8001ea2:	4770      	bx	lr
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	40022000 	.word	0x40022000

08001eac <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8001eac:	4770      	bx	lr

08001eae <HAL_RCC_NMI_IRQHandler>:
{
 8001eae:	b508      	push	{r3, lr}
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8001eb0:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <HAL_RCC_NMI_IRQHandler+0x1a>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001eb8:	d100      	bne.n	8001ebc <HAL_RCC_NMI_IRQHandler+0xe>
 8001eba:	bd08      	pop	{r3, pc}
    HAL_RCC_CSSCallback();
 8001ebc:	f7ff fff6 	bl	8001eac <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8001ec0:	2280      	movs	r2, #128	; 0x80
 8001ec2:	4b02      	ldr	r3, [pc, #8]	; (8001ecc <HAL_RCC_NMI_IRQHandler+0x1e>)
 8001ec4:	701a      	strb	r2, [r3, #0]
}
 8001ec6:	e7f8      	b.n	8001eba <HAL_RCC_NMI_IRQHandler+0xc>
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	4002100a 	.word	0x4002100a

08001ed0 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001ed0:	6802      	ldr	r2, [r0, #0]
 8001ed2:	68d3      	ldr	r3, [r2, #12]
 8001ed4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001ed8:	60d3      	str	r3, [r2, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001eda:	2320      	movs	r3, #32
 8001edc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 8001ee0:	4770      	bx	lr

08001ee2 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ee2:	6802      	ldr	r2, [r0, #0]
 8001ee4:	68d3      	ldr	r3, [r2, #12]
 8001ee6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001eea:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001eec:	6802      	ldr	r2, [r0, #0]
 8001eee:	6953      	ldr	r3, [r2, #20]
 8001ef0:	f023 0301 	bic.w	r3, r3, #1
 8001ef4:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001ef6:	2320      	movs	r3, #32
 8001ef8:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8001efc:	4770      	bx	lr

08001efe <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8001efe:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	2b21      	cmp	r3, #33	; 0x21
 8001f06:	d001      	beq.n	8001f0c <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001f08:	2002      	movs	r0, #2
 8001f0a:	4770      	bx	lr
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001f0c:	6883      	ldr	r3, [r0, #8]
 8001f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f12:	d017      	beq.n	8001f44 <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001f14:	6802      	ldr	r2, [r0, #0]
 8001f16:	6a03      	ldr	r3, [r0, #32]
 8001f18:	1c59      	adds	r1, r3, #1
 8001f1a:	6201      	str	r1, [r0, #32]
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	6053      	str	r3, [r2, #4]
    if(--huart->TxXferCount == 0U)
 8001f20:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	3b01      	subs	r3, #1
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	84c3      	strh	r3, [r0, #38]	; 0x26
 8001f2a:	b9db      	cbnz	r3, 8001f64 <UART_Transmit_IT+0x66>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001f2c:	6802      	ldr	r2, [r0, #0]
 8001f2e:	68d3      	ldr	r3, [r2, #12]
 8001f30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f34:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001f36:	6802      	ldr	r2, [r0, #0]
 8001f38:	68d3      	ldr	r3, [r2, #12]
 8001f3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f3e:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8001f40:	2000      	movs	r0, #0
 8001f42:	4770      	bx	lr
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8001f44:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001f46:	6802      	ldr	r2, [r0, #0]
 8001f48:	881b      	ldrh	r3, [r3, #0]
 8001f4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f4e:	6053      	str	r3, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001f50:	6903      	ldr	r3, [r0, #16]
 8001f52:	b91b      	cbnz	r3, 8001f5c <UART_Transmit_IT+0x5e>
        huart->pTxBuffPtr += 2U;
 8001f54:	6a03      	ldr	r3, [r0, #32]
 8001f56:	3302      	adds	r3, #2
 8001f58:	6203      	str	r3, [r0, #32]
 8001f5a:	e7e1      	b.n	8001f20 <UART_Transmit_IT+0x22>
        huart->pTxBuffPtr += 1U;
 8001f5c:	6a03      	ldr	r3, [r0, #32]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	6203      	str	r3, [r0, #32]
 8001f62:	e7dd      	b.n	8001f20 <UART_Transmit_IT+0x22>
    return HAL_OK;
 8001f64:	2000      	movs	r0, #0
  }
}
 8001f66:	4770      	bx	lr

08001f68 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f6c:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f6e:	6802      	ldr	r2, [r0, #0]
 8001f70:	6913      	ldr	r3, [r2, #16]
 8001f72:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f76:	68c1      	ldr	r1, [r0, #12]
 8001f78:	430b      	orrs	r3, r1
 8001f7a:	6113      	str	r3, [r2, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001f7c:	6883      	ldr	r3, [r0, #8]
 8001f7e:	6902      	ldr	r2, [r0, #16]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	6942      	ldr	r2, [r0, #20]
 8001f84:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, 
 8001f86:	6801      	ldr	r1, [r0, #0]
 8001f88:	68ca      	ldr	r2, [r1, #12]
 8001f8a:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8001f8e:	f022 020c 	bic.w	r2, r2, #12
 8001f92:	4313      	orrs	r3, r2
 8001f94:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f96:	6802      	ldr	r2, [r0, #0]
 8001f98:	6953      	ldr	r3, [r2, #20]
 8001f9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f9e:	6981      	ldr	r1, [r0, #24]
 8001fa0:	430b      	orrs	r3, r1
 8001fa2:	6153      	str	r3, [r2, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001fa4:	f8d0 8000 	ldr.w	r8, [r0]
 8001fa8:	4b59      	ldr	r3, [pc, #356]	; (8002110 <UART_SetConfig+0x1a8>)
 8001faa:	4598      	cmp	r8, r3
 8001fac:	d057      	beq.n	800205e <UART_SetConfig+0xf6>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001fae:	f7ff fee5 	bl	8001d7c <HAL_RCC_GetPCLK1Freq>
 8001fb2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001fb6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001fba:	686c      	ldr	r4, [r5, #4]
 8001fbc:	00a4      	lsls	r4, r4, #2
 8001fbe:	fbb0 f4f4 	udiv	r4, r0, r4
 8001fc2:	4f54      	ldr	r7, [pc, #336]	; (8002114 <UART_SetConfig+0x1ac>)
 8001fc4:	fba7 3404 	umull	r3, r4, r7, r4
 8001fc8:	0964      	lsrs	r4, r4, #5
 8001fca:	0126      	lsls	r6, r4, #4
 8001fcc:	f7ff fed6 	bl	8001d7c <HAL_RCC_GetPCLK1Freq>
 8001fd0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001fd4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001fd8:	686c      	ldr	r4, [r5, #4]
 8001fda:	00a4      	lsls	r4, r4, #2
 8001fdc:	fbb0 faf4 	udiv	sl, r0, r4
 8001fe0:	f7ff fecc 	bl	8001d7c <HAL_RCC_GetPCLK1Freq>
 8001fe4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001fe8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001fec:	686c      	ldr	r4, [r5, #4]
 8001fee:	00a4      	lsls	r4, r4, #2
 8001ff0:	fbb0 f4f4 	udiv	r4, r0, r4
 8001ff4:	fba7 3404 	umull	r3, r4, r7, r4
 8001ff8:	0964      	lsrs	r4, r4, #5
 8001ffa:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001ffe:	fb09 a414 	mls	r4, r9, r4, sl
 8002002:	0124      	lsls	r4, r4, #4
 8002004:	3432      	adds	r4, #50	; 0x32
 8002006:	fba7 3404 	umull	r3, r4, r7, r4
 800200a:	0964      	lsrs	r4, r4, #5
 800200c:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
 8002010:	4434      	add	r4, r6
 8002012:	f7ff feb3 	bl	8001d7c <HAL_RCC_GetPCLK1Freq>
 8002016:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800201a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800201e:	686e      	ldr	r6, [r5, #4]
 8002020:	00b6      	lsls	r6, r6, #2
 8002022:	fbb0 f6f6 	udiv	r6, r0, r6
 8002026:	f7ff fea9 	bl	8001d7c <HAL_RCC_GetPCLK1Freq>
 800202a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800202e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002032:	686b      	ldr	r3, [r5, #4]
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	fbb0 f0f3 	udiv	r0, r0, r3
 800203a:	fba7 3000 	umull	r3, r0, r7, r0
 800203e:	0940      	lsrs	r0, r0, #5
 8002040:	fb09 6910 	mls	r9, r9, r0, r6
 8002044:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8002048:	f109 0932 	add.w	r9, r9, #50	; 0x32
 800204c:	fba7 3709 	umull	r3, r7, r7, r9
 8002050:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8002054:	4427      	add	r7, r4
 8002056:	f8c8 7008 	str.w	r7, [r8, #8]
 800205a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800205e:	f7ff fe9d 	bl	8001d9c <HAL_RCC_GetPCLK2Freq>
 8002062:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002066:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800206a:	686c      	ldr	r4, [r5, #4]
 800206c:	00a4      	lsls	r4, r4, #2
 800206e:	fbb0 f4f4 	udiv	r4, r0, r4
 8002072:	4f28      	ldr	r7, [pc, #160]	; (8002114 <UART_SetConfig+0x1ac>)
 8002074:	fba7 3404 	umull	r3, r4, r7, r4
 8002078:	0964      	lsrs	r4, r4, #5
 800207a:	0126      	lsls	r6, r4, #4
 800207c:	f7ff fe8e 	bl	8001d9c <HAL_RCC_GetPCLK2Freq>
 8002080:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002084:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002088:	686c      	ldr	r4, [r5, #4]
 800208a:	00a4      	lsls	r4, r4, #2
 800208c:	fbb0 faf4 	udiv	sl, r0, r4
 8002090:	f7ff fe84 	bl	8001d9c <HAL_RCC_GetPCLK2Freq>
 8002094:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002098:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800209c:	686c      	ldr	r4, [r5, #4]
 800209e:	00a4      	lsls	r4, r4, #2
 80020a0:	fbb0 f4f4 	udiv	r4, r0, r4
 80020a4:	fba7 3404 	umull	r3, r4, r7, r4
 80020a8:	0964      	lsrs	r4, r4, #5
 80020aa:	f04f 0964 	mov.w	r9, #100	; 0x64
 80020ae:	fb09 a414 	mls	r4, r9, r4, sl
 80020b2:	0124      	lsls	r4, r4, #4
 80020b4:	3432      	adds	r4, #50	; 0x32
 80020b6:	fba7 3404 	umull	r3, r4, r7, r4
 80020ba:	0964      	lsrs	r4, r4, #5
 80020bc:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
 80020c0:	4434      	add	r4, r6
 80020c2:	f7ff fe6b 	bl	8001d9c <HAL_RCC_GetPCLK2Freq>
 80020c6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80020ca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80020ce:	686e      	ldr	r6, [r5, #4]
 80020d0:	00b6      	lsls	r6, r6, #2
 80020d2:	fbb0 f6f6 	udiv	r6, r0, r6
 80020d6:	f7ff fe61 	bl	8001d9c <HAL_RCC_GetPCLK2Freq>
 80020da:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80020de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80020e2:	686b      	ldr	r3, [r5, #4]
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80020ea:	fba7 2303 	umull	r2, r3, r7, r3
 80020ee:	095b      	lsrs	r3, r3, #5
 80020f0:	fb09 6913 	mls	r9, r9, r3, r6
 80020f4:	ea4f 1909 	mov.w	r9, r9, lsl #4
 80020f8:	f109 0932 	add.w	r9, r9, #50	; 0x32
 80020fc:	fba7 3709 	umull	r3, r7, r7, r9
 8002100:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8002104:	4427      	add	r7, r4
 8002106:	f8c8 7008 	str.w	r7, [r8, #8]
 800210a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800210e:	bf00      	nop
 8002110:	40013800 	.word	0x40013800
 8002114:	51eb851f 	.word	0x51eb851f

08002118 <UART_WaitOnFlagUntilTimeout>:
{
 8002118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800211c:	4605      	mov	r5, r0
 800211e:	460f      	mov	r7, r1
 8002120:	4616      	mov	r6, r2
 8002122:	4698      	mov	r8, r3
 8002124:	9c06      	ldr	r4, [sp, #24]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8002126:	682b      	ldr	r3, [r5, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	ea37 0303 	bics.w	r3, r7, r3
 800212e:	bf0c      	ite	eq
 8002130:	2301      	moveq	r3, #1
 8002132:	2300      	movne	r3, #0
 8002134:	42b3      	cmp	r3, r6
 8002136:	d11e      	bne.n	8002176 <UART_WaitOnFlagUntilTimeout+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 8002138:	f1b4 3fff 	cmp.w	r4, #4294967295
 800213c:	d0f3      	beq.n	8002126 <UART_WaitOnFlagUntilTimeout+0xe>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800213e:	b12c      	cbz	r4, 800214c <UART_WaitOnFlagUntilTimeout+0x34>
 8002140:	f7fe fbc6 	bl	80008d0 <HAL_GetTick>
 8002144:	eba0 0008 	sub.w	r0, r0, r8
 8002148:	4284      	cmp	r4, r0
 800214a:	d2ec      	bcs.n	8002126 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800214c:	682a      	ldr	r2, [r5, #0]
 800214e:	68d3      	ldr	r3, [r2, #12]
 8002150:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002154:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002156:	682a      	ldr	r2, [r5, #0]
 8002158:	6953      	ldr	r3, [r2, #20]
 800215a:	f023 0301 	bic.w	r3, r3, #1
 800215e:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002160:	2320      	movs	r3, #32
 8002162:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002166:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800216a:	2300      	movs	r3, #0
 800216c:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 8002170:	2003      	movs	r0, #3
 8002172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 8002176:	2000      	movs	r0, #0
}
 8002178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
 800217c:	4770      	bx	lr

0800217e <HAL_UART_Init>:
  if(huart == NULL)
 800217e:	b358      	cbz	r0, 80021d8 <HAL_UART_Init+0x5a>
{
 8002180:	b510      	push	{r4, lr}
 8002182:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 8002184:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002188:	b30b      	cbz	r3, 80021ce <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800218a:	2324      	movs	r3, #36	; 0x24
 800218c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002190:	6822      	ldr	r2, [r4, #0]
 8002192:	68d3      	ldr	r3, [r2, #12]
 8002194:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002198:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800219a:	4620      	mov	r0, r4
 800219c:	f7ff fee4 	bl	8001f68 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021a0:	6822      	ldr	r2, [r4, #0]
 80021a2:	6913      	ldr	r3, [r2, #16]
 80021a4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80021a8:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021aa:	6822      	ldr	r2, [r4, #0]
 80021ac:	6953      	ldr	r3, [r2, #20]
 80021ae:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80021b2:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80021b4:	6822      	ldr	r2, [r4, #0]
 80021b6:	68d3      	ldr	r3, [r2, #12]
 80021b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80021bc:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021be:	2000      	movs	r0, #0
 80021c0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80021c2:	2320      	movs	r3, #32
 80021c4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80021c8:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80021cc:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80021ce:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80021d2:	f7fe fab5 	bl	8000740 <HAL_UART_MspInit>
 80021d6:	e7d8      	b.n	800218a <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80021d8:	2001      	movs	r0, #1
 80021da:	4770      	bx	lr

080021dc <HAL_HalfDuplex_Init>:
  if(huart == NULL)
 80021dc:	2800      	cmp	r0, #0
 80021de:	d030      	beq.n	8002242 <HAL_HalfDuplex_Init+0x66>
{
 80021e0:	b510      	push	{r4, lr}
 80021e2:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 80021e4:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80021e8:	b333      	cbz	r3, 8002238 <HAL_HalfDuplex_Init+0x5c>
  huart->gState = HAL_UART_STATE_BUSY;
 80021ea:	2324      	movs	r3, #36	; 0x24
 80021ec:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80021f0:	6822      	ldr	r2, [r4, #0]
 80021f2:	68d3      	ldr	r3, [r2, #12]
 80021f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80021f8:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80021fa:	4620      	mov	r0, r4
 80021fc:	f7ff feb4 	bl	8001f68 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002200:	6822      	ldr	r2, [r4, #0]
 8002202:	6913      	ldr	r3, [r2, #16]
 8002204:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002208:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800220a:	6822      	ldr	r2, [r4, #0]
 800220c:	6953      	ldr	r3, [r2, #20]
 800220e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002212:	6153      	str	r3, [r2, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002214:	6822      	ldr	r2, [r4, #0]
 8002216:	6953      	ldr	r3, [r2, #20]
 8002218:	f043 0308 	orr.w	r3, r3, #8
 800221c:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800221e:	6822      	ldr	r2, [r4, #0]
 8002220:	68d3      	ldr	r3, [r2, #12]
 8002222:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002226:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002228:	2000      	movs	r0, #0
 800222a:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800222c:	2320      	movs	r3, #32
 800222e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8002232:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8002236:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002238:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800223c:	f7fe fa80 	bl	8000740 <HAL_UART_MspInit>
 8002240:	e7d3      	b.n	80021ea <HAL_HalfDuplex_Init+0xe>
    return HAL_ERROR;
 8002242:	2001      	movs	r0, #1
 8002244:	4770      	bx	lr

08002246 <HAL_LIN_Init>:
  if(huart == NULL)
 8002246:	2800      	cmp	r0, #0
 8002248:	d038      	beq.n	80022bc <HAL_LIN_Init+0x76>
{
 800224a:	b538      	push	{r3, r4, r5, lr}
 800224c:	4604      	mov	r4, r0
 800224e:	460d      	mov	r5, r1
  if(huart->gState == HAL_UART_STATE_RESET)
 8002250:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002254:	2b00      	cmp	r3, #0
 8002256:	d02c      	beq.n	80022b2 <HAL_LIN_Init+0x6c>
  huart->gState = HAL_UART_STATE_BUSY;
 8002258:	2324      	movs	r3, #36	; 0x24
 800225a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800225e:	6822      	ldr	r2, [r4, #0]
 8002260:	68d3      	ldr	r3, [r2, #12]
 8002262:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002266:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002268:	4620      	mov	r0, r4
 800226a:	f7ff fe7d 	bl	8001f68 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800226e:	6822      	ldr	r2, [r4, #0]
 8002270:	6913      	ldr	r3, [r2, #16]
 8002272:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002276:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 8002278:	6822      	ldr	r2, [r4, #0]
 800227a:	6953      	ldr	r3, [r2, #20]
 800227c:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002280:	6153      	str	r3, [r2, #20]
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 8002282:	6822      	ldr	r2, [r4, #0]
 8002284:	6913      	ldr	r3, [r2, #16]
 8002286:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800228a:	6113      	str	r3, [r2, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_LBDL, BreakDetectLength);
 800228c:	6822      	ldr	r2, [r4, #0]
 800228e:	6913      	ldr	r3, [r2, #16]
 8002290:	f023 0320 	bic.w	r3, r3, #32
 8002294:	432b      	orrs	r3, r5
 8002296:	6113      	str	r3, [r2, #16]
  __HAL_UART_ENABLE(huart);
 8002298:	6822      	ldr	r2, [r4, #0]
 800229a:	68d3      	ldr	r3, [r2, #12]
 800229c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80022a0:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022a2:	2000      	movs	r0, #0
 80022a4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80022a6:	2320      	movs	r3, #32
 80022a8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80022ac:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80022b0:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 80022b2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80022b6:	f7fe fa43 	bl	8000740 <HAL_UART_MspInit>
 80022ba:	e7cd      	b.n	8002258 <HAL_LIN_Init+0x12>
    return HAL_ERROR;
 80022bc:	2001      	movs	r0, #1
 80022be:	4770      	bx	lr

080022c0 <HAL_MultiProcessor_Init>:
  if(huart == NULL)
 80022c0:	2800      	cmp	r0, #0
 80022c2:	d03a      	beq.n	800233a <HAL_MultiProcessor_Init+0x7a>
{
 80022c4:	b570      	push	{r4, r5, r6, lr}
 80022c6:	4604      	mov	r4, r0
 80022c8:	4616      	mov	r6, r2
 80022ca:	460d      	mov	r5, r1
  if(huart->gState == HAL_UART_STATE_RESET)
 80022cc:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d02d      	beq.n	8002330 <HAL_MultiProcessor_Init+0x70>
  huart->gState = HAL_UART_STATE_BUSY;
 80022d4:	2324      	movs	r3, #36	; 0x24
 80022d6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80022da:	6822      	ldr	r2, [r4, #0]
 80022dc:	68d3      	ldr	r3, [r2, #12]
 80022de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80022e2:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80022e4:	4620      	mov	r0, r4
 80022e6:	f7ff fe3f 	bl	8001f68 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022ea:	6822      	ldr	r2, [r4, #0]
 80022ec:	6913      	ldr	r3, [r2, #16]
 80022ee:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80022f2:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022f4:	6822      	ldr	r2, [r4, #0]
 80022f6:	6953      	ldr	r3, [r2, #20]
 80022f8:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80022fc:	6153      	str	r3, [r2, #20]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, Address);
 80022fe:	6823      	ldr	r3, [r4, #0]
 8002300:	6919      	ldr	r1, [r3, #16]
 8002302:	f021 010f 	bic.w	r1, r1, #15
 8002306:	430d      	orrs	r5, r1
 8002308:	611d      	str	r5, [r3, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 800230a:	6821      	ldr	r1, [r4, #0]
 800230c:	68cb      	ldr	r3, [r1, #12]
 800230e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002312:	4333      	orrs	r3, r6
 8002314:	60cb      	str	r3, [r1, #12]
  __HAL_UART_ENABLE(huart);
 8002316:	6822      	ldr	r2, [r4, #0]
 8002318:	68d3      	ldr	r3, [r2, #12]
 800231a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800231e:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002320:	2000      	movs	r0, #0
 8002322:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002324:	2320      	movs	r3, #32
 8002326:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800232a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800232e:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 8002330:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002334:	f7fe fa04 	bl	8000740 <HAL_UART_MspInit>
 8002338:	e7cc      	b.n	80022d4 <HAL_MultiProcessor_Init+0x14>
    return HAL_ERROR;
 800233a:	2001      	movs	r0, #1
 800233c:	4770      	bx	lr
{
 800233e:	4770      	bx	lr

08002340 <HAL_UART_DeInit>:
  if(huart == NULL)
 8002340:	b178      	cbz	r0, 8002362 <HAL_UART_DeInit+0x22>
{
 8002342:	b510      	push	{r4, lr}
 8002344:	4604      	mov	r4, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8002346:	2324      	movs	r3, #36	; 0x24
 8002348:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_MspDeInit(huart);
 800234c:	f7fe fa38 	bl	80007c0 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002350:	2000      	movs	r0, #0
 8002352:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 8002354:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 8002358:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
  __HAL_UNLOCK(huart);
 800235c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  return HAL_OK;
 8002360:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002362:	2001      	movs	r0, #1
 8002364:	4770      	bx	lr

08002366 <HAL_UART_Transmit>:
{
 8002366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	461e      	mov	r6, r3
  if(huart->gState == HAL_UART_STATE_READY)
 800236e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b20      	cmp	r3, #32
 8002376:	d004      	beq.n	8002382 <HAL_UART_Transmit+0x1c>
    return HAL_BUSY;
 8002378:	2302      	movs	r3, #2
}
 800237a:	4618      	mov	r0, r3
 800237c:	b002      	add	sp, #8
 800237e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002382:	4604      	mov	r4, r0
 8002384:	460d      	mov	r5, r1
 8002386:	4690      	mov	r8, r2
    if((pData == NULL) || (Size == 0U))
 8002388:	2900      	cmp	r1, #0
 800238a:	d055      	beq.n	8002438 <HAL_UART_Transmit+0xd2>
 800238c:	2a00      	cmp	r2, #0
 800238e:	d055      	beq.n	800243c <HAL_UART_Transmit+0xd6>
    __HAL_LOCK(huart);
 8002390:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002394:	2b01      	cmp	r3, #1
 8002396:	d101      	bne.n	800239c <HAL_UART_Transmit+0x36>
 8002398:	2302      	movs	r3, #2
 800239a:	e7ee      	b.n	800237a <HAL_UART_Transmit+0x14>
 800239c:	2301      	movs	r3, #1
 800239e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023a2:	2300      	movs	r3, #0
 80023a4:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023a6:	2321      	movs	r3, #33	; 0x21
 80023a8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80023ac:	f7fe fa90 	bl	80008d0 <HAL_GetTick>
 80023b0:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 80023b2:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80023b6:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80023ba:	e010      	b.n	80023de <HAL_UART_Transmit+0x78>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023bc:	9600      	str	r6, [sp, #0]
 80023be:	463b      	mov	r3, r7
 80023c0:	2200      	movs	r2, #0
 80023c2:	2180      	movs	r1, #128	; 0x80
 80023c4:	4620      	mov	r0, r4
 80023c6:	f7ff fea7 	bl	8002118 <UART_WaitOnFlagUntilTimeout>
 80023ca:	2800      	cmp	r0, #0
 80023cc:	d138      	bne.n	8002440 <HAL_UART_Transmit+0xda>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80023ce:	6822      	ldr	r2, [r4, #0]
 80023d0:	882b      	ldrh	r3, [r5, #0]
 80023d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023d6:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80023d8:	6923      	ldr	r3, [r4, #16]
 80023da:	b9cb      	cbnz	r3, 8002410 <HAL_UART_Transmit+0xaa>
          pData +=2U;
 80023dc:	3502      	adds	r5, #2
    while(huart->TxXferCount > 0U)
 80023de:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	b1bb      	cbz	r3, 8002414 <HAL_UART_Transmit+0xae>
      huart->TxXferCount--;
 80023e4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	3b01      	subs	r3, #1
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80023ee:	68a3      	ldr	r3, [r4, #8]
 80023f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023f4:	d0e2      	beq.n	80023bc <HAL_UART_Transmit+0x56>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023f6:	9600      	str	r6, [sp, #0]
 80023f8:	463b      	mov	r3, r7
 80023fa:	2200      	movs	r2, #0
 80023fc:	2180      	movs	r1, #128	; 0x80
 80023fe:	4620      	mov	r0, r4
 8002400:	f7ff fe8a 	bl	8002118 <UART_WaitOnFlagUntilTimeout>
 8002404:	b9f0      	cbnz	r0, 8002444 <HAL_UART_Transmit+0xde>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002406:	6823      	ldr	r3, [r4, #0]
 8002408:	782a      	ldrb	r2, [r5, #0]
 800240a:	605a      	str	r2, [r3, #4]
 800240c:	3501      	adds	r5, #1
 800240e:	e7e6      	b.n	80023de <HAL_UART_Transmit+0x78>
          pData +=1U;
 8002410:	3501      	adds	r5, #1
 8002412:	e7e4      	b.n	80023de <HAL_UART_Transmit+0x78>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002414:	9600      	str	r6, [sp, #0]
 8002416:	463b      	mov	r3, r7
 8002418:	2200      	movs	r2, #0
 800241a:	2140      	movs	r1, #64	; 0x40
 800241c:	4620      	mov	r0, r4
 800241e:	f7ff fe7b 	bl	8002118 <UART_WaitOnFlagUntilTimeout>
 8002422:	4603      	mov	r3, r0
 8002424:	b108      	cbz	r0, 800242a <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e7a7      	b.n	800237a <HAL_UART_Transmit+0x14>
    huart->gState = HAL_UART_STATE_READY;
 800242a:	2220      	movs	r2, #32
 800242c:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8002430:	2200      	movs	r2, #0
 8002432:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    return HAL_OK;
 8002436:	e7a0      	b.n	800237a <HAL_UART_Transmit+0x14>
      return  HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e79e      	b.n	800237a <HAL_UART_Transmit+0x14>
 800243c:	2301      	movs	r3, #1
 800243e:	e79c      	b.n	800237a <HAL_UART_Transmit+0x14>
          return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e79a      	b.n	800237a <HAL_UART_Transmit+0x14>
          return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e798      	b.n	800237a <HAL_UART_Transmit+0x14>

08002448 <HAL_UART_Receive>:
{
 8002448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800244c:	b082      	sub	sp, #8
 800244e:	461e      	mov	r6, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 8002450:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b20      	cmp	r3, #32
 8002458:	d003      	beq.n	8002462 <HAL_UART_Receive+0x1a>
    return HAL_BUSY;
 800245a:	2002      	movs	r0, #2
}
 800245c:	b002      	add	sp, #8
 800245e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002462:	4604      	mov	r4, r0
 8002464:	460d      	mov	r5, r1
 8002466:	4690      	mov	r8, r2
    if((pData == NULL) || (Size == 0U))
 8002468:	2900      	cmp	r1, #0
 800246a:	d058      	beq.n	800251e <HAL_UART_Receive+0xd6>
 800246c:	2a00      	cmp	r2, #0
 800246e:	d058      	beq.n	8002522 <HAL_UART_Receive+0xda>
    __HAL_LOCK(huart);
 8002470:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002474:	2b01      	cmp	r3, #1
 8002476:	d101      	bne.n	800247c <HAL_UART_Receive+0x34>
 8002478:	2002      	movs	r0, #2
 800247a:	e7ef      	b.n	800245c <HAL_UART_Receive+0x14>
 800247c:	2301      	movs	r3, #1
 800247e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002482:	2300      	movs	r3, #0
 8002484:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002486:	2322      	movs	r3, #34	; 0x22
 8002488:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 800248c:	f7fe fa20 	bl	80008d0 <HAL_GetTick>
 8002490:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 8002492:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002496:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    while(huart->RxXferCount > 0U)
 800249a:	e01d      	b.n	80024d8 <HAL_UART_Receive+0x90>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800249c:	9600      	str	r6, [sp, #0]
 800249e:	463b      	mov	r3, r7
 80024a0:	2200      	movs	r2, #0
 80024a2:	2120      	movs	r1, #32
 80024a4:	4620      	mov	r0, r4
 80024a6:	f7ff fe37 	bl	8002118 <UART_WaitOnFlagUntilTimeout>
 80024aa:	2800      	cmp	r0, #0
 80024ac:	d13b      	bne.n	8002526 <HAL_UART_Receive+0xde>
        if(huart->Init.Parity == UART_PARITY_NONE)
 80024ae:	6923      	ldr	r3, [r4, #16]
 80024b0:	b933      	cbnz	r3, 80024c0 <HAL_UART_Receive+0x78>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80024b2:	6823      	ldr	r3, [r4, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024ba:	f825 3b02 	strh.w	r3, [r5], #2
 80024be:	e00b      	b.n	80024d8 <HAL_UART_Receive+0x90>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80024c0:	6823      	ldr	r3, [r4, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	f825 3b01 	strh.w	r3, [r5], #1
 80024ca:	e005      	b.n	80024d8 <HAL_UART_Receive+0x90>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80024cc:	6823      	ldr	r3, [r4, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024d4:	702b      	strb	r3, [r5, #0]
 80024d6:	3501      	adds	r5, #1
    while(huart->RxXferCount > 0U)
 80024d8:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80024da:	b29b      	uxth	r3, r3
 80024dc:	b1c3      	cbz	r3, 8002510 <HAL_UART_Receive+0xc8>
      huart->RxXferCount--;
 80024de:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	3b01      	subs	r3, #1
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80024e8:	68a3      	ldr	r3, [r4, #8]
 80024ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ee:	d0d5      	beq.n	800249c <HAL_UART_Receive+0x54>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80024f0:	9600      	str	r6, [sp, #0]
 80024f2:	463b      	mov	r3, r7
 80024f4:	2200      	movs	r2, #0
 80024f6:	2120      	movs	r1, #32
 80024f8:	4620      	mov	r0, r4
 80024fa:	f7ff fe0d 	bl	8002118 <UART_WaitOnFlagUntilTimeout>
 80024fe:	b9a0      	cbnz	r0, 800252a <HAL_UART_Receive+0xe2>
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002500:	6923      	ldr	r3, [r4, #16]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1e2      	bne.n	80024cc <HAL_UART_Receive+0x84>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002506:	6823      	ldr	r3, [r4, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	702b      	strb	r3, [r5, #0]
 800250c:	3501      	adds	r5, #1
 800250e:	e7e3      	b.n	80024d8 <HAL_UART_Receive+0x90>
    huart->RxState = HAL_UART_STATE_READY;
 8002510:	2320      	movs	r3, #32
 8002512:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    __HAL_UNLOCK(huart);
 8002516:	2000      	movs	r0, #0
 8002518:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 800251c:	e79e      	b.n	800245c <HAL_UART_Receive+0x14>
      return  HAL_ERROR;
 800251e:	2001      	movs	r0, #1
 8002520:	e79c      	b.n	800245c <HAL_UART_Receive+0x14>
 8002522:	2001      	movs	r0, #1
 8002524:	e79a      	b.n	800245c <HAL_UART_Receive+0x14>
          return HAL_TIMEOUT;
 8002526:	2003      	movs	r0, #3
 8002528:	e798      	b.n	800245c <HAL_UART_Receive+0x14>
          return HAL_TIMEOUT;
 800252a:	2003      	movs	r0, #3
 800252c:	e796      	b.n	800245c <HAL_UART_Receive+0x14>

0800252e <HAL_UART_Transmit_IT>:
  if(huart->gState == HAL_UART_STATE_READY)
 800252e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b20      	cmp	r3, #32
 8002536:	d001      	beq.n	800253c <HAL_UART_Transmit_IT+0xe>
    return HAL_BUSY;
 8002538:	2002      	movs	r0, #2
 800253a:	4770      	bx	lr
    if((pData == NULL) || (Size == 0U)) 
 800253c:	b1a9      	cbz	r1, 800256a <HAL_UART_Transmit_IT+0x3c>
 800253e:	b1b2      	cbz	r2, 800256e <HAL_UART_Transmit_IT+0x40>
    __HAL_LOCK(huart);
 8002540:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002544:	2b01      	cmp	r3, #1
 8002546:	d014      	beq.n	8002572 <HAL_UART_Transmit_IT+0x44>
    huart->pTxBuffPtr = pData;
 8002548:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 800254a:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 800254c:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800254e:	2300      	movs	r3, #0
 8002550:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002552:	2221      	movs	r2, #33	; 0x21
 8002554:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8002558:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800255c:	6801      	ldr	r1, [r0, #0]
 800255e:	68ca      	ldr	r2, [r1, #12]
 8002560:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002564:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8002566:	4618      	mov	r0, r3
 8002568:	4770      	bx	lr
      return HAL_ERROR;
 800256a:	2001      	movs	r0, #1
 800256c:	4770      	bx	lr
 800256e:	2001      	movs	r0, #1
 8002570:	4770      	bx	lr
    __HAL_LOCK(huart);
 8002572:	2002      	movs	r0, #2
}
 8002574:	4770      	bx	lr

08002576 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 8002576:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b20      	cmp	r3, #32
 800257e:	d001      	beq.n	8002584 <HAL_UART_Receive_IT+0xe>
    return HAL_BUSY;
 8002580:	2002      	movs	r0, #2
 8002582:	4770      	bx	lr
    if((pData == NULL) || (Size == 0U))
 8002584:	b1f9      	cbz	r1, 80025c6 <HAL_UART_Receive_IT+0x50>
 8002586:	b302      	cbz	r2, 80025ca <HAL_UART_Receive_IT+0x54>
    __HAL_LOCK(huart);
 8002588:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800258c:	2b01      	cmp	r3, #1
 800258e:	d01e      	beq.n	80025ce <HAL_UART_Receive_IT+0x58>
    huart->pRxBuffPtr = pData;
 8002590:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8002592:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002594:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002596:	2300      	movs	r3, #0
 8002598:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800259a:	2222      	movs	r2, #34	; 0x22
 800259c:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UNLOCK(huart);
 80025a0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80025a4:	6801      	ldr	r1, [r0, #0]
 80025a6:	68ca      	ldr	r2, [r1, #12]
 80025a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025ac:	60ca      	str	r2, [r1, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80025ae:	6801      	ldr	r1, [r0, #0]
 80025b0:	694a      	ldr	r2, [r1, #20]
 80025b2:	f042 0201 	orr.w	r2, r2, #1
 80025b6:	614a      	str	r2, [r1, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80025b8:	6801      	ldr	r1, [r0, #0]
 80025ba:	68ca      	ldr	r2, [r1, #12]
 80025bc:	f042 0220 	orr.w	r2, r2, #32
 80025c0:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 80025c2:	4618      	mov	r0, r3
 80025c4:	4770      	bx	lr
      return HAL_ERROR;
 80025c6:	2001      	movs	r0, #1
 80025c8:	4770      	bx	lr
 80025ca:	2001      	movs	r0, #1
 80025cc:	4770      	bx	lr
    __HAL_LOCK(huart);
 80025ce:	2002      	movs	r0, #2
}
 80025d0:	4770      	bx	lr

080025d2 <HAL_UART_Transmit_DMA>:
{
 80025d2:	b538      	push	{r3, r4, r5, lr}
  if(huart->gState == HAL_UART_STATE_READY)
 80025d4:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
 80025d8:	b2e4      	uxtb	r4, r4
 80025da:	2c20      	cmp	r4, #32
 80025dc:	d001      	beq.n	80025e2 <HAL_UART_Transmit_DMA+0x10>
    return HAL_BUSY;
 80025de:	2002      	movs	r0, #2
 80025e0:	bd38      	pop	{r3, r4, r5, pc}
    if((pData == NULL) || (Size == 0U))
 80025e2:	2900      	cmp	r1, #0
 80025e4:	d031      	beq.n	800264a <HAL_UART_Transmit_DMA+0x78>
 80025e6:	2a00      	cmp	r2, #0
 80025e8:	d031      	beq.n	800264e <HAL_UART_Transmit_DMA+0x7c>
    __HAL_LOCK(huart);
 80025ea:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d101      	bne.n	80025f6 <HAL_UART_Transmit_DMA+0x24>
 80025f2:	2002      	movs	r0, #2
}
 80025f4:	bd38      	pop	{r3, r4, r5, pc}
 80025f6:	4613      	mov	r3, r2
 80025f8:	4604      	mov	r4, r0
    __HAL_LOCK(huart);
 80025fa:	2201      	movs	r2, #1
 80025fc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    huart->pTxBuffPtr = pData;
 8002600:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 8002602:	8483      	strh	r3, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 8002604:	84c3      	strh	r3, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002606:	2500      	movs	r5, #0
 8002608:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800260a:	2221      	movs	r2, #33	; 0x21
 800260c:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002610:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8002612:	4810      	ldr	r0, [pc, #64]	; (8002654 <HAL_UART_Transmit_DMA+0x82>)
 8002614:	6290      	str	r0, [r2, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002616:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002618:	480f      	ldr	r0, [pc, #60]	; (8002658 <HAL_UART_Transmit_DMA+0x86>)
 800261a:	62d0      	str	r0, [r2, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800261c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800261e:	480f      	ldr	r0, [pc, #60]	; (800265c <HAL_UART_Transmit_DMA+0x8a>)
 8002620:	6310      	str	r0, [r2, #48]	; 0x30
    huart->hdmatx->XferAbortCallback = NULL;
 8002622:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002624:	6355      	str	r5, [r2, #52]	; 0x34
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002626:	6822      	ldr	r2, [r4, #0]
 8002628:	3204      	adds	r2, #4
 800262a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800262c:	f7fe fb9a 	bl	8000d64 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002630:	6823      	ldr	r3, [r4, #0]
 8002632:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002636:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 8002638:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800263c:	6822      	ldr	r2, [r4, #0]
 800263e:	6953      	ldr	r3, [r2, #20]
 8002640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002644:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 8002646:	4628      	mov	r0, r5
 8002648:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800264a:	2001      	movs	r0, #1
 800264c:	bd38      	pop	{r3, r4, r5, pc}
 800264e:	2001      	movs	r0, #1
 8002650:	bd38      	pop	{r3, r4, r5, pc}
 8002652:	bf00      	nop
 8002654:	0800293f 	.word	0x0800293f
 8002658:	0800298b 	.word	0x0800298b
 800265c:	08002a81 	.word	0x08002a81

08002660 <HAL_UART_Receive_DMA>:
{
 8002660:	b530      	push	{r4, r5, lr}
 8002662:	b083      	sub	sp, #12
  if(huart->RxState == HAL_UART_STATE_READY) 
 8002664:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
 8002668:	b2e4      	uxtb	r4, r4
 800266a:	2c20      	cmp	r4, #32
 800266c:	d002      	beq.n	8002674 <HAL_UART_Receive_DMA+0x14>
    return HAL_BUSY;
 800266e:	2002      	movs	r0, #2
}
 8002670:	b003      	add	sp, #12
 8002672:	bd30      	pop	{r4, r5, pc}
    if((pData == NULL) || (Size == 0U))
 8002674:	2900      	cmp	r1, #0
 8002676:	d03d      	beq.n	80026f4 <HAL_UART_Receive_DMA+0x94>
 8002678:	2a00      	cmp	r2, #0
 800267a:	d03d      	beq.n	80026f8 <HAL_UART_Receive_DMA+0x98>
    __HAL_LOCK(huart);
 800267c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002680:	2b01      	cmp	r3, #1
 8002682:	d101      	bne.n	8002688 <HAL_UART_Receive_DMA+0x28>
 8002684:	2002      	movs	r0, #2
 8002686:	e7f3      	b.n	8002670 <HAL_UART_Receive_DMA+0x10>
 8002688:	4613      	mov	r3, r2
 800268a:	460a      	mov	r2, r1
 800268c:	4604      	mov	r4, r0
 800268e:	2101      	movs	r1, #1
 8002690:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->pRxBuffPtr = pData;
 8002694:	6282      	str	r2, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8002696:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002698:	2500      	movs	r5, #0
 800269a:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800269c:	2122      	movs	r1, #34	; 0x22
 800269e:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80026a2:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80026a4:	4815      	ldr	r0, [pc, #84]	; (80026fc <HAL_UART_Receive_DMA+0x9c>)
 80026a6:	6288      	str	r0, [r1, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80026a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80026aa:	4815      	ldr	r0, [pc, #84]	; (8002700 <HAL_UART_Receive_DMA+0xa0>)
 80026ac:	62c8      	str	r0, [r1, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80026ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80026b0:	4814      	ldr	r0, [pc, #80]	; (8002704 <HAL_UART_Receive_DMA+0xa4>)
 80026b2:	6308      	str	r0, [r1, #48]	; 0x30
    huart->hdmarx->XferAbortCallback = NULL;
 80026b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80026b6:	634d      	str	r5, [r1, #52]	; 0x34
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 80026b8:	6821      	ldr	r1, [r4, #0]
 80026ba:	3104      	adds	r1, #4
 80026bc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80026be:	f7fe fb51 	bl	8000d64 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_OREFLAG(huart);
 80026c2:	9501      	str	r5, [sp, #4]
 80026c4:	6823      	ldr	r3, [r4, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	9201      	str	r2, [sp, #4]
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	9201      	str	r2, [sp, #4]
 80026ce:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(huart);
 80026d0:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80026d4:	68da      	ldr	r2, [r3, #12]
 80026d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026da:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026dc:	6822      	ldr	r2, [r4, #0]
 80026de:	6953      	ldr	r3, [r2, #20]
 80026e0:	f043 0301 	orr.w	r3, r3, #1
 80026e4:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026e6:	6822      	ldr	r2, [r4, #0]
 80026e8:	6953      	ldr	r3, [r2, #20]
 80026ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026ee:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 80026f0:	4628      	mov	r0, r5
 80026f2:	e7bd      	b.n	8002670 <HAL_UART_Receive_DMA+0x10>
      return HAL_ERROR;
 80026f4:	2001      	movs	r0, #1
 80026f6:	e7bb      	b.n	8002670 <HAL_UART_Receive_DMA+0x10>
 80026f8:	2001      	movs	r0, #1
 80026fa:	e7b9      	b.n	8002670 <HAL_UART_Receive_DMA+0x10>
 80026fc:	08002997 	.word	0x08002997
 8002700:	08002a75 	.word	0x08002a75
 8002704:	08002a81 	.word	0x08002a81

08002708 <HAL_UART_DMAPause>:
  __HAL_LOCK(huart);
 8002708:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800270c:	2b01      	cmp	r3, #1
 800270e:	d031      	beq.n	8002774 <HAL_UART_DMAPause+0x6c>
 8002710:	2301      	movs	r3, #1
 8002712:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002716:	6801      	ldr	r1, [r0, #0]
 8002718:	694a      	ldr	r2, [r1, #20]
 800271a:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800271e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b21      	cmp	r3, #33	; 0x21
 8002726:	d00d      	beq.n	8002744 <HAL_UART_DMAPause+0x3c>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002728:	6801      	ldr	r1, [r0, #0]
 800272a:	694a      	ldr	r2, [r1, #20]
 800272c:	f002 0240 	and.w	r2, r2, #64	; 0x40
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002730:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b22      	cmp	r3, #34	; 0x22
 8002738:	d00b      	beq.n	8002752 <HAL_UART_DMAPause+0x4a>
  __HAL_UNLOCK(huart);
 800273a:	2300      	movs	r3, #0
 800273c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  return HAL_OK;
 8002740:	4618      	mov	r0, r3
 8002742:	4770      	bx	lr
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002744:	2a00      	cmp	r2, #0
 8002746:	d0ef      	beq.n	8002728 <HAL_UART_DMAPause+0x20>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002748:	694b      	ldr	r3, [r1, #20]
 800274a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800274e:	614b      	str	r3, [r1, #20]
 8002750:	e7ea      	b.n	8002728 <HAL_UART_DMAPause+0x20>
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002752:	2a00      	cmp	r2, #0
 8002754:	d0f1      	beq.n	800273a <HAL_UART_DMAPause+0x32>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002756:	68cb      	ldr	r3, [r1, #12]
 8002758:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800275c:	60cb      	str	r3, [r1, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800275e:	6802      	ldr	r2, [r0, #0]
 8002760:	6953      	ldr	r3, [r2, #20]
 8002762:	f023 0301 	bic.w	r3, r3, #1
 8002766:	6153      	str	r3, [r2, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002768:	6802      	ldr	r2, [r0, #0]
 800276a:	6953      	ldr	r3, [r2, #20]
 800276c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002770:	6153      	str	r3, [r2, #20]
 8002772:	e7e2      	b.n	800273a <HAL_UART_DMAPause+0x32>
  __HAL_LOCK(huart);
 8002774:	2002      	movs	r0, #2
}
 8002776:	4770      	bx	lr

08002778 <HAL_UART_DMAResume>:
  __HAL_LOCK(huart);
 8002778:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800277c:	2b01      	cmp	r3, #1
 800277e:	d034      	beq.n	80027ea <HAL_UART_DMAResume+0x72>
 8002780:	2301      	movs	r3, #1
 8002782:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8002786:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b21      	cmp	r3, #33	; 0x21
 800278e:	d009      	beq.n	80027a4 <HAL_UART_DMAResume+0x2c>
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002790:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b22      	cmp	r3, #34	; 0x22
 8002798:	d00a      	beq.n	80027b0 <HAL_UART_DMAResume+0x38>
  __HAL_UNLOCK(huart);
 800279a:	2300      	movs	r3, #0
 800279c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  return HAL_OK;
 80027a0:	4618      	mov	r0, r3
}
 80027a2:	4770      	bx	lr
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80027a4:	6802      	ldr	r2, [r0, #0]
 80027a6:	6953      	ldr	r3, [r2, #20]
 80027a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027ac:	6153      	str	r3, [r2, #20]
 80027ae:	e7ef      	b.n	8002790 <HAL_UART_DMAResume+0x18>
{
 80027b0:	b082      	sub	sp, #8
    __HAL_UART_CLEAR_OREFLAG(huart);
 80027b2:	2300      	movs	r3, #0
 80027b4:	9301      	str	r3, [sp, #4]
 80027b6:	6803      	ldr	r3, [r0, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	9201      	str	r2, [sp, #4]
 80027bc:	685a      	ldr	r2, [r3, #4]
 80027be:	9201      	str	r2, [sp, #4]
 80027c0:	9a01      	ldr	r2, [sp, #4]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80027c2:	68da      	ldr	r2, [r3, #12]
 80027c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027c8:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027ca:	6802      	ldr	r2, [r0, #0]
 80027cc:	6953      	ldr	r3, [r2, #20]
 80027ce:	f043 0301 	orr.w	r3, r3, #1
 80027d2:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027d4:	6802      	ldr	r2, [r0, #0]
 80027d6:	6953      	ldr	r3, [r2, #20]
 80027d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027dc:	6153      	str	r3, [r2, #20]
  __HAL_UNLOCK(huart);
 80027de:	2300      	movs	r3, #0
 80027e0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  return HAL_OK;
 80027e4:	4618      	mov	r0, r3
}
 80027e6:	b002      	add	sp, #8
 80027e8:	4770      	bx	lr
  __HAL_LOCK(huart);
 80027ea:	2002      	movs	r0, #2
 80027ec:	4770      	bx	lr

080027ee <HAL_UART_DMAStop>:
{
 80027ee:	b510      	push	{r4, lr}
 80027f0:	4604      	mov	r4, r0
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80027f2:	6801      	ldr	r1, [r0, #0]
 80027f4:	694a      	ldr	r2, [r1, #20]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80027f6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b21      	cmp	r3, #33	; 0x21
 80027fe:	d00a      	beq.n	8002816 <HAL_UART_DMAStop+0x28>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002800:	6821      	ldr	r1, [r4, #0]
 8002802:	694a      	ldr	r2, [r1, #20]
 8002804:	f002 0240 	and.w	r2, r2, #64	; 0x40
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002808:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b22      	cmp	r3, #34	; 0x22
 8002810:	d011      	beq.n	8002836 <HAL_UART_DMAStop+0x48>
}
 8002812:	2000      	movs	r0, #0
 8002814:	bd10      	pop	{r4, pc}
 8002816:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800281a:	2a00      	cmp	r2, #0
 800281c:	d0f0      	beq.n	8002800 <HAL_UART_DMAStop+0x12>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800281e:	694b      	ldr	r3, [r1, #20]
 8002820:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002824:	614b      	str	r3, [r1, #20]
    if(huart->hdmatx != NULL)
 8002826:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8002828:	b108      	cbz	r0, 800282e <HAL_UART_DMAStop+0x40>
      HAL_DMA_Abort(huart->hdmatx);
 800282a:	f7fe fad5 	bl	8000dd8 <HAL_DMA_Abort>
    UART_EndTxTransfer(huart);
 800282e:	4620      	mov	r0, r4
 8002830:	f7ff fb4e 	bl	8001ed0 <UART_EndTxTransfer>
 8002834:	e7e4      	b.n	8002800 <HAL_UART_DMAStop+0x12>
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002836:	2a00      	cmp	r2, #0
 8002838:	d0eb      	beq.n	8002812 <HAL_UART_DMAStop+0x24>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800283a:	694b      	ldr	r3, [r1, #20]
 800283c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002840:	614b      	str	r3, [r1, #20]
    if(huart->hdmarx != NULL)
 8002842:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002844:	b108      	cbz	r0, 800284a <HAL_UART_DMAStop+0x5c>
      HAL_DMA_Abort(huart->hdmarx);
 8002846:	f7fe fac7 	bl	8000dd8 <HAL_DMA_Abort>
    UART_EndRxTransfer(huart);
 800284a:	4620      	mov	r0, r4
 800284c:	f7ff fb49 	bl	8001ee2 <UART_EndRxTransfer>
 8002850:	e7df      	b.n	8002812 <HAL_UART_DMAStop+0x24>

08002852 <HAL_UART_Abort>:
{
 8002852:	b510      	push	{r4, lr}
 8002854:	4604      	mov	r4, r0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8002856:	6802      	ldr	r2, [r0, #0]
 8002858:	68d3      	ldr	r3, [r2, #12]
 800285a:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 800285e:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002860:	6802      	ldr	r2, [r0, #0]
 8002862:	6953      	ldr	r3, [r2, #20]
 8002864:	f023 0301 	bic.w	r3, r3, #1
 8002868:	6153      	str	r3, [r2, #20]
  if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800286a:	6803      	ldr	r3, [r0, #0]
 800286c:	695a      	ldr	r2, [r3, #20]
 800286e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002872:	d00a      	beq.n	800288a <HAL_UART_Abort+0x38>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002874:	695a      	ldr	r2, [r3, #20]
 8002876:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800287a:	615a      	str	r2, [r3, #20]
    if(huart->hdmatx != NULL)
 800287c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800287e:	b123      	cbz	r3, 800288a <HAL_UART_Abort+0x38>
      huart->hdmatx->XferAbortCallback = NULL;
 8002880:	2200      	movs	r2, #0
 8002882:	635a      	str	r2, [r3, #52]	; 0x34
      HAL_DMA_Abort(huart->hdmatx);
 8002884:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8002886:	f7fe faa7 	bl	8000dd8 <HAL_DMA_Abort>
  if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800288a:	6823      	ldr	r3, [r4, #0]
 800288c:	695a      	ldr	r2, [r3, #20]
 800288e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002892:	d00a      	beq.n	80028aa <HAL_UART_Abort+0x58>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002894:	695a      	ldr	r2, [r3, #20]
 8002896:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800289a:	615a      	str	r2, [r3, #20]
    if(huart->hdmarx != NULL)
 800289c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800289e:	b123      	cbz	r3, 80028aa <HAL_UART_Abort+0x58>
      huart->hdmarx->XferAbortCallback = NULL;
 80028a0:	2200      	movs	r2, #0
 80028a2:	635a      	str	r2, [r3, #52]	; 0x34
      HAL_DMA_Abort(huart->hdmarx);
 80028a4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80028a6:	f7fe fa97 	bl	8000dd8 <HAL_DMA_Abort>
  huart->TxXferCount = 0x00U;
 80028aa:	2000      	movs	r0, #0
 80028ac:	84e0      	strh	r0, [r4, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 80028ae:	85e0      	strh	r0, [r4, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028b0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->RxState = HAL_UART_STATE_READY;
 80028b2:	2320      	movs	r3, #32
 80028b4:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  huart->gState = HAL_UART_STATE_READY;
 80028b8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 80028bc:	bd10      	pop	{r4, pc}

080028be <HAL_UART_AbortTransmit>:
{
 80028be:	b510      	push	{r4, lr}
 80028c0:	4604      	mov	r4, r0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80028c2:	6802      	ldr	r2, [r0, #0]
 80028c4:	68d3      	ldr	r3, [r2, #12]
 80028c6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80028ca:	60d3      	str	r3, [r2, #12]
  if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80028cc:	6803      	ldr	r3, [r0, #0]
 80028ce:	695a      	ldr	r2, [r3, #20]
 80028d0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80028d4:	d00a      	beq.n	80028ec <HAL_UART_AbortTransmit+0x2e>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80028d6:	695a      	ldr	r2, [r3, #20]
 80028d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028dc:	615a      	str	r2, [r3, #20]
    if(huart->hdmatx != NULL)
 80028de:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80028e0:	b123      	cbz	r3, 80028ec <HAL_UART_AbortTransmit+0x2e>
      huart->hdmatx->XferAbortCallback = NULL;
 80028e2:	2200      	movs	r2, #0
 80028e4:	635a      	str	r2, [r3, #52]	; 0x34
      HAL_DMA_Abort(huart->hdmatx);
 80028e6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80028e8:	f7fe fa76 	bl	8000dd8 <HAL_DMA_Abort>
  huart->TxXferCount = 0x00U;
 80028ec:	2000      	movs	r0, #0
 80028ee:	84e0      	strh	r0, [r4, #38]	; 0x26
  huart->gState = HAL_UART_STATE_READY;
 80028f0:	2320      	movs	r3, #32
 80028f2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 80028f6:	bd10      	pop	{r4, pc}

080028f8 <HAL_UART_AbortReceive>:
{
 80028f8:	b510      	push	{r4, lr}
 80028fa:	4604      	mov	r4, r0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028fc:	6802      	ldr	r2, [r0, #0]
 80028fe:	68d3      	ldr	r3, [r2, #12]
 8002900:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002904:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002906:	6802      	ldr	r2, [r0, #0]
 8002908:	6953      	ldr	r3, [r2, #20]
 800290a:	f023 0301 	bic.w	r3, r3, #1
 800290e:	6153      	str	r3, [r2, #20]
  if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002910:	6803      	ldr	r3, [r0, #0]
 8002912:	695a      	ldr	r2, [r3, #20]
 8002914:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002918:	d00a      	beq.n	8002930 <HAL_UART_AbortReceive+0x38>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800291a:	695a      	ldr	r2, [r3, #20]
 800291c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002920:	615a      	str	r2, [r3, #20]
    if(huart->hdmarx != NULL)
 8002922:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002924:	b123      	cbz	r3, 8002930 <HAL_UART_AbortReceive+0x38>
      huart->hdmarx->XferAbortCallback = NULL;
 8002926:	2200      	movs	r2, #0
 8002928:	635a      	str	r2, [r3, #52]	; 0x34
      HAL_DMA_Abort(huart->hdmarx);
 800292a:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800292c:	f7fe fa54 	bl	8000dd8 <HAL_DMA_Abort>
  huart->RxXferCount = 0x00U;
 8002930:	2000      	movs	r0, #0
 8002932:	85e0      	strh	r0, [r4, #46]	; 0x2e
  huart->RxState = HAL_UART_STATE_READY;
 8002934:	2320      	movs	r3, #32
 8002936:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 800293a:	bd10      	pop	{r4, pc}

0800293c <HAL_UART_TxCpltCallback>:
{
 800293c:	4770      	bx	lr

0800293e <UART_DMATransmitCplt>:
{
 800293e:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002940:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002942:	6802      	ldr	r2, [r0, #0]
 8002944:	6812      	ldr	r2, [r2, #0]
 8002946:	f012 0f20 	tst.w	r2, #32
 800294a:	d10c      	bne.n	8002966 <UART_DMATransmitCplt+0x28>
    huart->TxXferCount = 0U;
 800294c:	2200      	movs	r2, #0
 800294e:	84da      	strh	r2, [r3, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002950:	6819      	ldr	r1, [r3, #0]
 8002952:	694a      	ldr	r2, [r1, #20]
 8002954:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002958:	614a      	str	r2, [r1, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	68d3      	ldr	r3, [r2, #12]
 800295e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002962:	60d3      	str	r3, [r2, #12]
 8002964:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8002966:	4618      	mov	r0, r3
 8002968:	f7ff ffe8 	bl	800293c <HAL_UART_TxCpltCallback>
 800296c:	bd08      	pop	{r3, pc}

0800296e <UART_EndTransmit_IT>:
{
 800296e:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002970:	6801      	ldr	r1, [r0, #0]
 8002972:	68cb      	ldr	r3, [r1, #12]
 8002974:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002978:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 800297a:	2320      	movs	r3, #32
 800297c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002980:	f7ff ffdc 	bl	800293c <HAL_UART_TxCpltCallback>
}
 8002984:	2000      	movs	r0, #0
 8002986:	bd08      	pop	{r3, pc}

08002988 <HAL_UART_TxHalfCpltCallback>:
{
 8002988:	4770      	bx	lr

0800298a <UART_DMATxHalfCplt>:
{
 800298a:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 800298c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800298e:	f7ff fffb 	bl	8002988 <HAL_UART_TxHalfCpltCallback>
 8002992:	bd08      	pop	{r3, pc}
{
 8002994:	4770      	bx	lr

08002996 <UART_DMAReceiveCplt>:
{
 8002996:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002998:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800299a:	6802      	ldr	r2, [r0, #0]
 800299c:	6812      	ldr	r2, [r2, #0]
 800299e:	f012 0f20 	tst.w	r2, #32
 80029a2:	d113      	bne.n	80029cc <UART_DMAReceiveCplt+0x36>
    huart->RxXferCount = 0U;
 80029a4:	2200      	movs	r2, #0
 80029a6:	85da      	strh	r2, [r3, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80029a8:	6819      	ldr	r1, [r3, #0]
 80029aa:	68ca      	ldr	r2, [r1, #12]
 80029ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029b0:	60ca      	str	r2, [r1, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029b2:	6819      	ldr	r1, [r3, #0]
 80029b4:	694a      	ldr	r2, [r1, #20]
 80029b6:	f022 0201 	bic.w	r2, r2, #1
 80029ba:	614a      	str	r2, [r1, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029bc:	6819      	ldr	r1, [r3, #0]
 80029be:	694a      	ldr	r2, [r1, #20]
 80029c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029c4:	614a      	str	r2, [r1, #20]
    huart->RxState = HAL_UART_STATE_READY;
 80029c6:	2220      	movs	r2, #32
 80029c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fd fe8c 	bl	80006ea <HAL_UART_RxCpltCallback>
 80029d2:	bd08      	pop	{r3, pc}

080029d4 <UART_Receive_IT>:
{
 80029d4:	b508      	push	{r3, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80029d6:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2b22      	cmp	r3, #34	; 0x22
 80029de:	d001      	beq.n	80029e4 <UART_Receive_IT+0x10>
    return HAL_BUSY;
 80029e0:	2002      	movs	r0, #2
 80029e2:	bd08      	pop	{r3, pc}
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80029e4:	6883      	ldr	r3, [r0, #8]
 80029e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ea:	d00f      	beq.n	8002a0c <UART_Receive_IT+0x38>
      if(huart->Init.Parity == UART_PARITY_NONE)
 80029ec:	6903      	ldr	r3, [r0, #16]
 80029ee:	bb0b      	cbnz	r3, 8002a34 <UART_Receive_IT+0x60>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80029f0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80029f2:	1c5a      	adds	r2, r3, #1
 80029f4:	6282      	str	r2, [r0, #40]	; 0x28
 80029f6:	6802      	ldr	r2, [r0, #0]
 80029f8:	6852      	ldr	r2, [r2, #4]
 80029fa:	701a      	strb	r2, [r3, #0]
    if(--huart->RxXferCount == 0U)
 80029fc:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	3b01      	subs	r3, #1
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8002a06:	b1f3      	cbz	r3, 8002a46 <UART_Receive_IT+0x72>
    return HAL_OK;
 8002a08:	2000      	movs	r0, #0
}
 8002a0a:	bd08      	pop	{r3, pc}
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8002a0c:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002a0e:	6903      	ldr	r3, [r0, #16]
 8002a10:	b943      	cbnz	r3, 8002a24 <UART_Receive_IT+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a12:	6803      	ldr	r3, [r0, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a1a:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 8002a1c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002a1e:	3302      	adds	r3, #2
 8002a20:	6283      	str	r3, [r0, #40]	; 0x28
 8002a22:	e7eb      	b.n	80029fc <UART_Receive_IT+0x28>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002a24:	6803      	ldr	r3, [r0, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 8002a2c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002a2e:	3301      	adds	r3, #1
 8002a30:	6283      	str	r3, [r0, #40]	; 0x28
 8002a32:	e7e3      	b.n	80029fc <UART_Receive_IT+0x28>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a34:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002a36:	1c53      	adds	r3, r2, #1
 8002a38:	6283      	str	r3, [r0, #40]	; 0x28
 8002a3a:	6803      	ldr	r3, [r0, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a42:	7013      	strb	r3, [r2, #0]
 8002a44:	e7da      	b.n	80029fc <UART_Receive_IT+0x28>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a46:	6802      	ldr	r2, [r0, #0]
 8002a48:	68d3      	ldr	r3, [r2, #12]
 8002a4a:	f023 0320 	bic.w	r3, r3, #32
 8002a4e:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a50:	6802      	ldr	r2, [r0, #0]
 8002a52:	68d3      	ldr	r3, [r2, #12]
 8002a54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a58:	60d3      	str	r3, [r2, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a5a:	6802      	ldr	r2, [r0, #0]
 8002a5c:	6953      	ldr	r3, [r2, #20]
 8002a5e:	f023 0301 	bic.w	r3, r3, #1
 8002a62:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002a64:	2320      	movs	r3, #32
 8002a66:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8002a6a:	f7fd fe3e 	bl	80006ea <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8002a6e:	2000      	movs	r0, #0
 8002a70:	bd08      	pop	{r3, pc}

08002a72 <HAL_UART_RxHalfCpltCallback>:
{
 8002a72:	4770      	bx	lr

08002a74 <UART_DMARxHalfCplt>:
{
 8002a74:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart); 
 8002a76:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002a78:	f7ff fffb 	bl	8002a72 <HAL_UART_RxHalfCpltCallback>
 8002a7c:	bd08      	pop	{r3, pc}
{
 8002a7e:	4770      	bx	lr

08002a80 <UART_DMAError>:
{
 8002a80:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a82:	6a44      	ldr	r4, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002a84:	6823      	ldr	r3, [r4, #0]
 8002a86:	695a      	ldr	r2, [r3, #20]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002a88:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b21      	cmp	r3, #33	; 0x21
 8002a90:	d010      	beq.n	8002ab4 <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8002a92:	6823      	ldr	r3, [r4, #0]
 8002a94:	695a      	ldr	r2, [r3, #20]
 8002a96:	f002 0240 	and.w	r2, r2, #64	; 0x40
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002a9a:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2b22      	cmp	r3, #34	; 0x22
 8002aa2:	d011      	beq.n	8002ac8 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002aa4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002aa6:	f043 0310 	orr.w	r3, r3, #16
 8002aaa:	63e3      	str	r3, [r4, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8002aac:	4620      	mov	r0, r4
 8002aae:	f7fd fe2d 	bl	800070c <HAL_UART_ErrorCallback>
 8002ab2:	bd10      	pop	{r4, pc}
 8002ab4:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002ab8:	2a00      	cmp	r2, #0
 8002aba:	d0ea      	beq.n	8002a92 <UART_DMAError+0x12>
    huart->TxXferCount = 0U;
 8002abc:	2300      	movs	r3, #0
 8002abe:	84e3      	strh	r3, [r4, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002ac0:	4620      	mov	r0, r4
 8002ac2:	f7ff fa05 	bl	8001ed0 <UART_EndTxTransfer>
 8002ac6:	e7e4      	b.n	8002a92 <UART_DMAError+0x12>
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002ac8:	2a00      	cmp	r2, #0
 8002aca:	d0eb      	beq.n	8002aa4 <UART_DMAError+0x24>
    huart->RxXferCount = 0U;
 8002acc:	2300      	movs	r3, #0
 8002ace:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002ad0:	4620      	mov	r0, r4
 8002ad2:	f7ff fa06 	bl	8001ee2 <UART_EndRxTransfer>
 8002ad6:	e7e5      	b.n	8002aa4 <UART_DMAError+0x24>

08002ad8 <HAL_UART_IRQHandler>:
{
 8002ad8:	b510      	push	{r4, lr}
 8002ada:	4604      	mov	r4, r0
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002adc:	6802      	ldr	r2, [r0, #0]
 8002ade:	6813      	ldr	r3, [r2, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ae0:	68d1      	ldr	r1, [r2, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ae2:	6952      	ldr	r2, [r2, #20]
  if(errorflags == RESET)
 8002ae4:	f013 000f 	ands.w	r0, r3, #15
 8002ae8:	d105      	bne.n	8002af6 <HAL_UART_IRQHandler+0x1e>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002aea:	f013 0f20 	tst.w	r3, #32
 8002aee:	d002      	beq.n	8002af6 <HAL_UART_IRQHandler+0x1e>
 8002af0:	f011 0f20 	tst.w	r1, #32
 8002af4:	d153      	bne.n	8002b9e <HAL_UART_IRQHandler+0xc6>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002af6:	2800      	cmp	r0, #0
 8002af8:	d067      	beq.n	8002bca <HAL_UART_IRQHandler+0xf2>
 8002afa:	f012 0201 	ands.w	r2, r2, #1
 8002afe:	d102      	bne.n	8002b06 <HAL_UART_IRQHandler+0x2e>
 8002b00:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002b04:	d061      	beq.n	8002bca <HAL_UART_IRQHandler+0xf2>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b06:	f013 0f01 	tst.w	r3, #1
 8002b0a:	d006      	beq.n	8002b1a <HAL_UART_IRQHandler+0x42>
 8002b0c:	f411 7f80 	tst.w	r1, #256	; 0x100
 8002b10:	d003      	beq.n	8002b1a <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b12:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002b14:	f040 0001 	orr.w	r0, r0, #1
 8002b18:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b1a:	f013 0f04 	tst.w	r3, #4
 8002b1e:	d004      	beq.n	8002b2a <HAL_UART_IRQHandler+0x52>
 8002b20:	b11a      	cbz	r2, 8002b2a <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b22:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002b24:	f040 0002 	orr.w	r0, r0, #2
 8002b28:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b2a:	f013 0f02 	tst.w	r3, #2
 8002b2e:	d004      	beq.n	8002b3a <HAL_UART_IRQHandler+0x62>
 8002b30:	b11a      	cbz	r2, 8002b3a <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b32:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002b34:	f040 0004 	orr.w	r0, r0, #4
 8002b38:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b3a:	f013 0f08 	tst.w	r3, #8
 8002b3e:	d004      	beq.n	8002b4a <HAL_UART_IRQHandler+0x72>
 8002b40:	b11a      	cbz	r2, 8002b4a <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b42:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002b44:	f042 0208 	orr.w	r2, r2, #8
 8002b48:	63e2      	str	r2, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b4a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002b4c:	2a00      	cmp	r2, #0
 8002b4e:	d048      	beq.n	8002be2 <HAL_UART_IRQHandler+0x10a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b50:	f013 0f20 	tst.w	r3, #32
 8002b54:	d002      	beq.n	8002b5c <HAL_UART_IRQHandler+0x84>
 8002b56:	f011 0f20 	tst.w	r1, #32
 8002b5a:	d124      	bne.n	8002ba6 <HAL_UART_IRQHandler+0xce>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b5c:	6823      	ldr	r3, [r4, #0]
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b64:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002b66:	f012 0f08 	tst.w	r2, #8
 8002b6a:	d100      	bne.n	8002b6e <HAL_UART_IRQHandler+0x96>
 8002b6c:	b33b      	cbz	r3, 8002bbe <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 8002b6e:	4620      	mov	r0, r4
 8002b70:	f7ff f9b7 	bl	8001ee2 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b74:	6823      	ldr	r3, [r4, #0]
 8002b76:	695a      	ldr	r2, [r3, #20]
 8002b78:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002b7c:	d01b      	beq.n	8002bb6 <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b7e:	695a      	ldr	r2, [r3, #20]
 8002b80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b84:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8002b86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002b88:	b18b      	cbz	r3, 8002bae <HAL_UART_IRQHandler+0xd6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b8a:	4a1a      	ldr	r2, [pc, #104]	; (8002bf4 <HAL_UART_IRQHandler+0x11c>)
 8002b8c:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b8e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002b90:	f7fe f939 	bl	8000e06 <HAL_DMA_Abort_IT>
 8002b94:	b328      	cbz	r0, 8002be2 <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b96:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002b98:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002b9a:	4798      	blx	r3
 8002b9c:	bd10      	pop	{r4, pc}
      UART_Receive_IT(huart);
 8002b9e:	4620      	mov	r0, r4
 8002ba0:	f7ff ff18 	bl	80029d4 <UART_Receive_IT>
      return;
 8002ba4:	bd10      	pop	{r4, pc}
        UART_Receive_IT(huart);
 8002ba6:	4620      	mov	r0, r4
 8002ba8:	f7ff ff14 	bl	80029d4 <UART_Receive_IT>
 8002bac:	e7d6      	b.n	8002b5c <HAL_UART_IRQHandler+0x84>
            HAL_UART_ErrorCallback(huart);
 8002bae:	4620      	mov	r0, r4
 8002bb0:	f7fd fdac 	bl	800070c <HAL_UART_ErrorCallback>
 8002bb4:	bd10      	pop	{r4, pc}
          HAL_UART_ErrorCallback(huart);
 8002bb6:	4620      	mov	r0, r4
 8002bb8:	f7fd fda8 	bl	800070c <HAL_UART_ErrorCallback>
 8002bbc:	bd10      	pop	{r4, pc}
        HAL_UART_ErrorCallback(huart);
 8002bbe:	4620      	mov	r0, r4
 8002bc0:	f7fd fda4 	bl	800070c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	63e3      	str	r3, [r4, #60]	; 0x3c
 8002bc8:	bd10      	pop	{r4, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002bca:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002bce:	d002      	beq.n	8002bd6 <HAL_UART_IRQHandler+0xfe>
 8002bd0:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002bd4:	d106      	bne.n	8002be4 <HAL_UART_IRQHandler+0x10c>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002bd6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002bda:	d002      	beq.n	8002be2 <HAL_UART_IRQHandler+0x10a>
 8002bdc:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002be0:	d104      	bne.n	8002bec <HAL_UART_IRQHandler+0x114>
 8002be2:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 8002be4:	4620      	mov	r0, r4
 8002be6:	f7ff f98a 	bl	8001efe <UART_Transmit_IT>
    return;
 8002bea:	bd10      	pop	{r4, pc}
    UART_EndTransmit_IT(huart);
 8002bec:	4620      	mov	r0, r4
 8002bee:	f7ff febe 	bl	800296e <UART_EndTransmit_IT>
    return;
 8002bf2:	e7f6      	b.n	8002be2 <HAL_UART_IRQHandler+0x10a>
 8002bf4:	08002bf9 	.word	0x08002bf9

08002bf8 <UART_DMAAbortOnError>:
{
 8002bf8:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bfa:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002c00:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002c02:	f7fd fd83 	bl	800070c <HAL_UART_ErrorCallback>
 8002c06:	bd08      	pop	{r3, pc}

08002c08 <HAL_UART_AbortCpltCallback>:
{
 8002c08:	4770      	bx	lr

08002c0a <HAL_UART_Abort_IT>:
{
 8002c0a:	b510      	push	{r4, lr}
 8002c0c:	4604      	mov	r4, r0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8002c0e:	6802      	ldr	r2, [r0, #0]
 8002c10:	68d3      	ldr	r3, [r2, #12]
 8002c12:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8002c16:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c18:	6802      	ldr	r2, [r0, #0]
 8002c1a:	6953      	ldr	r3, [r2, #20]
 8002c1c:	f023 0301 	bic.w	r3, r3, #1
 8002c20:	6153      	str	r3, [r2, #20]
  if(huart->hdmatx != NULL)
 8002c22:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002c24:	b133      	cbz	r3, 8002c34 <HAL_UART_Abort_IT+0x2a>
    if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8002c26:	6802      	ldr	r2, [r0, #0]
 8002c28:	6952      	ldr	r2, [r2, #20]
 8002c2a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002c2e:	d01d      	beq.n	8002c6c <HAL_UART_Abort_IT+0x62>
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8002c30:	4a26      	ldr	r2, [pc, #152]	; (8002ccc <HAL_UART_Abort_IT+0xc2>)
 8002c32:	635a      	str	r2, [r3, #52]	; 0x34
  if(huart->hdmarx != NULL)
 8002c34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002c36:	b133      	cbz	r3, 8002c46 <HAL_UART_Abort_IT+0x3c>
    if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c38:	6822      	ldr	r2, [r4, #0]
 8002c3a:	6952      	ldr	r2, [r2, #20]
 8002c3c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002c40:	d017      	beq.n	8002c72 <HAL_UART_Abort_IT+0x68>
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8002c42:	4a23      	ldr	r2, [pc, #140]	; (8002cd0 <HAL_UART_Abort_IT+0xc6>)
 8002c44:	635a      	str	r2, [r3, #52]	; 0x34
  if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8002c46:	6823      	ldr	r3, [r4, #0]
 8002c48:	695a      	ldr	r2, [r3, #20]
 8002c4a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002c4e:	d013      	beq.n	8002c78 <HAL_UART_Abort_IT+0x6e>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002c50:	695a      	ldr	r2, [r3, #20]
 8002c52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c56:	615a      	str	r2, [r3, #20]
    if(huart->hdmatx != NULL)
 8002c58:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002c5a:	b318      	cbz	r0, 8002ca4 <HAL_UART_Abort_IT+0x9a>
      if(HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8002c5c:	f7fe f8d3 	bl	8000e06 <HAL_DMA_Abort_IT>
 8002c60:	b310      	cbz	r0, 8002ca8 <HAL_UART_Abort_IT+0x9e>
        huart->hdmatx->XferAbortCallback = NULL;
 8002c62:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002c64:	2200      	movs	r2, #0
 8002c66:	635a      	str	r2, [r3, #52]	; 0x34
  uint32_t AbortCplt = 0x01U;
 8002c68:	2201      	movs	r2, #1
 8002c6a:	e006      	b.n	8002c7a <HAL_UART_Abort_IT+0x70>
      huart->hdmatx->XferAbortCallback = NULL;
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	635a      	str	r2, [r3, #52]	; 0x34
 8002c70:	e7e0      	b.n	8002c34 <HAL_UART_Abort_IT+0x2a>
      huart->hdmarx->XferAbortCallback = NULL;
 8002c72:	2200      	movs	r2, #0
 8002c74:	635a      	str	r2, [r3, #52]	; 0x34
 8002c76:	e7e6      	b.n	8002c46 <HAL_UART_Abort_IT+0x3c>
  uint32_t AbortCplt = 0x01U;
 8002c78:	2201      	movs	r2, #1
  if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c7a:	6823      	ldr	r3, [r4, #0]
 8002c7c:	6959      	ldr	r1, [r3, #20]
 8002c7e:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002c82:	d00c      	beq.n	8002c9e <HAL_UART_Abort_IT+0x94>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c84:	6959      	ldr	r1, [r3, #20]
 8002c86:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8002c8a:	6159      	str	r1, [r3, #20]
    if(huart->hdmarx != NULL)
 8002c8c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002c8e:	b130      	cbz	r0, 8002c9e <HAL_UART_Abort_IT+0x94>
      if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c90:	f7fe f8b9 	bl	8000e06 <HAL_DMA_Abort_IT>
 8002c94:	b150      	cbz	r0, 8002cac <HAL_UART_Abort_IT+0xa2>
        huart->hdmarx->XferAbortCallback = NULL;
 8002c96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002c98:	2200      	movs	r2, #0
 8002c9a:	635a      	str	r2, [r3, #52]	; 0x34
        AbortCplt = 0x01U;
 8002c9c:	2201      	movs	r2, #1
  if(AbortCplt == 0x01U)
 8002c9e:	b93a      	cbnz	r2, 8002cb0 <HAL_UART_Abort_IT+0xa6>
}
 8002ca0:	2000      	movs	r0, #0
 8002ca2:	bd10      	pop	{r4, pc}
  uint32_t AbortCplt = 0x01U;
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	e7e8      	b.n	8002c7a <HAL_UART_Abort_IT+0x70>
        AbortCplt = 0x00U;
 8002ca8:	2200      	movs	r2, #0
 8002caa:	e7e6      	b.n	8002c7a <HAL_UART_Abort_IT+0x70>
        AbortCplt = 0x00U;
 8002cac:	2200      	movs	r2, #0
 8002cae:	e7f6      	b.n	8002c9e <HAL_UART_Abort_IT+0x94>
    huart->TxXferCount = 0x00U; 
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	84e3      	strh	r3, [r4, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 8002cb4:	85e3      	strh	r3, [r4, #46]	; 0x2e
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cb6:	63e3      	str	r3, [r4, #60]	; 0x3c
    huart->gState  = HAL_UART_STATE_READY;
 8002cb8:	2320      	movs	r3, #32
 8002cba:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    huart->RxState = HAL_UART_STATE_READY;
 8002cbe:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    HAL_UART_AbortCpltCallback(huart);
 8002cc2:	4620      	mov	r0, r4
 8002cc4:	f7ff ffa0 	bl	8002c08 <HAL_UART_AbortCpltCallback>
 8002cc8:	e7ea      	b.n	8002ca0 <HAL_UART_Abort_IT+0x96>
 8002cca:	bf00      	nop
 8002ccc:	08002d01 	.word	0x08002d01
 8002cd0:	08002cd5 	.word	0x08002cd5

08002cd4 <UART_DMARxAbortCallback>:
{
 8002cd4:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cd6:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->hdmarx->XferAbortCallback = NULL;
 8002cd8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002cda:	2200      	movs	r2, #0
 8002cdc:	635a      	str	r2, [r3, #52]	; 0x34
  if(huart->hdmatx != NULL)
 8002cde:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002ce0:	b113      	cbz	r3, 8002ce8 <UART_DMARxAbortCallback+0x14>
    if(huart->hdmatx->XferAbortCallback != NULL)
 8002ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce4:	b103      	cbz	r3, 8002ce8 <UART_DMARxAbortCallback+0x14>
 8002ce6:	bd08      	pop	{r3, pc}
  huart->TxXferCount = 0x00U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	84c3      	strh	r3, [r0, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8002cec:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cee:	63c3      	str	r3, [r0, #60]	; 0x3c
  huart->gState  = HAL_UART_STATE_READY;
 8002cf0:	2320      	movs	r3, #32
 8002cf2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002cf6:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  HAL_UART_AbortCpltCallback(huart);
 8002cfa:	f7ff ff85 	bl	8002c08 <HAL_UART_AbortCpltCallback>
 8002cfe:	e7f2      	b.n	8002ce6 <UART_DMARxAbortCallback+0x12>

08002d00 <UART_DMATxAbortCallback>:
{
 8002d00:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d02:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->hdmatx->XferAbortCallback = NULL;
 8002d04:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002d06:	2200      	movs	r2, #0
 8002d08:	635a      	str	r2, [r3, #52]	; 0x34
  if(huart->hdmarx != NULL)
 8002d0a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002d0c:	b113      	cbz	r3, 8002d14 <UART_DMATxAbortCallback+0x14>
    if(huart->hdmarx->XferAbortCallback != NULL)
 8002d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d10:	b103      	cbz	r3, 8002d14 <UART_DMATxAbortCallback+0x14>
 8002d12:	bd08      	pop	{r3, pc}
  huart->TxXferCount = 0x00U;
 8002d14:	2300      	movs	r3, #0
 8002d16:	84c3      	strh	r3, [r0, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8002d18:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d1a:	63c3      	str	r3, [r0, #60]	; 0x3c
  huart->gState  = HAL_UART_STATE_READY;
 8002d1c:	2320      	movs	r3, #32
 8002d1e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002d22:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  HAL_UART_AbortCpltCallback(huart);
 8002d26:	f7ff ff6f 	bl	8002c08 <HAL_UART_AbortCpltCallback>
 8002d2a:	e7f2      	b.n	8002d12 <UART_DMATxAbortCallback+0x12>

08002d2c <HAL_UART_AbortTransmitCpltCallback>:
{
 8002d2c:	4770      	bx	lr

08002d2e <HAL_UART_AbortTransmit_IT>:
{
 8002d2e:	b510      	push	{r4, lr}
 8002d30:	4604      	mov	r4, r0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002d32:	6802      	ldr	r2, [r0, #0]
 8002d34:	68d3      	ldr	r3, [r2, #12]
 8002d36:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002d3a:	60d3      	str	r3, [r2, #12]
  if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8002d3c:	6803      	ldr	r3, [r0, #0]
 8002d3e:	695a      	ldr	r2, [r3, #20]
 8002d40:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002d44:	d019      	beq.n	8002d7a <HAL_UART_AbortTransmit_IT+0x4c>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002d46:	695a      	ldr	r2, [r3, #20]
 8002d48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d4c:	615a      	str	r2, [r3, #20]
    if(huart->hdmatx != NULL)
 8002d4e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002d50:	b15b      	cbz	r3, 8002d6a <HAL_UART_AbortTransmit_IT+0x3c>
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 8002d52:	4a0e      	ldr	r2, [pc, #56]	; (8002d8c <HAL_UART_AbortTransmit_IT+0x5e>)
 8002d54:	635a      	str	r2, [r3, #52]	; 0x34
      if(HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8002d56:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8002d58:	f7fe f855 	bl	8000e06 <HAL_DMA_Abort_IT>
 8002d5c:	b908      	cbnz	r0, 8002d62 <HAL_UART_AbortTransmit_IT+0x34>
}
 8002d5e:	2000      	movs	r0, #0
 8002d60:	bd10      	pop	{r4, pc}
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 8002d62:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002d64:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002d66:	4798      	blx	r3
 8002d68:	e7f9      	b.n	8002d5e <HAL_UART_AbortTransmit_IT+0x30>
      huart->TxXferCount = 0x00U;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	84c3      	strh	r3, [r0, #38]	; 0x26
      huart->gState = HAL_UART_STATE_READY;
 8002d6e:	2320      	movs	r3, #32
 8002d70:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
      HAL_UART_AbortTransmitCpltCallback(huart);
 8002d74:	f7ff ffda 	bl	8002d2c <HAL_UART_AbortTransmitCpltCallback>
 8002d78:	e7f1      	b.n	8002d5e <HAL_UART_AbortTransmit_IT+0x30>
    huart->TxXferCount = 0x00U;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	84c3      	strh	r3, [r0, #38]	; 0x26
    huart->gState = HAL_UART_STATE_READY;
 8002d7e:	2320      	movs	r3, #32
 8002d80:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    HAL_UART_AbortTransmitCpltCallback(huart);
 8002d84:	f7ff ffd2 	bl	8002d2c <HAL_UART_AbortTransmitCpltCallback>
 8002d88:	e7e9      	b.n	8002d5e <HAL_UART_AbortTransmit_IT+0x30>
 8002d8a:	bf00      	nop
 8002d8c:	08002d91 	.word	0x08002d91

08002d90 <UART_DMATxOnlyAbortCallback>:
{
 8002d90:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d92:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->TxXferCount = 0x00U;
 8002d94:	2300      	movs	r3, #0
 8002d96:	84c3      	strh	r3, [r0, #38]	; 0x26
  huart->gState = HAL_UART_STATE_READY;
 8002d98:	2320      	movs	r3, #32
 8002d9a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_AbortTransmitCpltCallback(huart);
 8002d9e:	f7ff ffc5 	bl	8002d2c <HAL_UART_AbortTransmitCpltCallback>
 8002da2:	bd08      	pop	{r3, pc}

08002da4 <HAL_UART_AbortReceiveCpltCallback>:
{
 8002da4:	4770      	bx	lr

08002da6 <HAL_UART_AbortReceive_IT>:
{
 8002da6:	b510      	push	{r4, lr}
 8002da8:	4604      	mov	r4, r0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002daa:	6802      	ldr	r2, [r0, #0]
 8002dac:	68d3      	ldr	r3, [r2, #12]
 8002dae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002db2:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002db4:	6802      	ldr	r2, [r0, #0]
 8002db6:	6953      	ldr	r3, [r2, #20]
 8002db8:	f023 0301 	bic.w	r3, r3, #1
 8002dbc:	6153      	str	r3, [r2, #20]
  if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dbe:	6803      	ldr	r3, [r0, #0]
 8002dc0:	695a      	ldr	r2, [r3, #20]
 8002dc2:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002dc6:	d019      	beq.n	8002dfc <HAL_UART_AbortReceive_IT+0x56>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dc8:	695a      	ldr	r2, [r3, #20]
 8002dca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dce:	615a      	str	r2, [r3, #20]
    if(huart->hdmarx != NULL)
 8002dd0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002dd2:	b15b      	cbz	r3, 8002dec <HAL_UART_AbortReceive_IT+0x46>
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8002dd4:	4a0d      	ldr	r2, [pc, #52]	; (8002e0c <HAL_UART_AbortReceive_IT+0x66>)
 8002dd6:	635a      	str	r2, [r3, #52]	; 0x34
      if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002dd8:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8002dda:	f7fe f814 	bl	8000e06 <HAL_DMA_Abort_IT>
 8002dde:	b908      	cbnz	r0, 8002de4 <HAL_UART_AbortReceive_IT+0x3e>
}
 8002de0:	2000      	movs	r0, #0
 8002de2:	bd10      	pop	{r4, pc}
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002de4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002de6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002de8:	4798      	blx	r3
 8002dea:	e7f9      	b.n	8002de0 <HAL_UART_AbortReceive_IT+0x3a>
      huart->RxXferCount = 0x00U;
 8002dec:	2300      	movs	r3, #0
 8002dee:	85c3      	strh	r3, [r0, #46]	; 0x2e
      huart->RxState = HAL_UART_STATE_READY;
 8002df0:	2320      	movs	r3, #32
 8002df2:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_AbortReceiveCpltCallback(huart);
 8002df6:	f7ff ffd5 	bl	8002da4 <HAL_UART_AbortReceiveCpltCallback>
 8002dfa:	e7f1      	b.n	8002de0 <HAL_UART_AbortReceive_IT+0x3a>
    huart->RxXferCount = 0x00U;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	85c3      	strh	r3, [r0, #46]	; 0x2e
    huart->RxState = HAL_UART_STATE_READY;
 8002e00:	2320      	movs	r3, #32
 8002e02:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    HAL_UART_AbortReceiveCpltCallback(huart);
 8002e06:	f7ff ffcd 	bl	8002da4 <HAL_UART_AbortReceiveCpltCallback>
 8002e0a:	e7e9      	b.n	8002de0 <HAL_UART_AbortReceive_IT+0x3a>
 8002e0c:	08002e11 	.word	0x08002e11

08002e10 <UART_DMARxOnlyAbortCallback>:
{
 8002e10:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e12:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8002e14:	2300      	movs	r3, #0
 8002e16:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->RxState = HAL_UART_STATE_READY;
 8002e18:	2320      	movs	r3, #32
 8002e1a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  HAL_UART_AbortReceiveCpltCallback(huart);
 8002e1e:	f7ff ffc1 	bl	8002da4 <HAL_UART_AbortReceiveCpltCallback>
 8002e22:	bd08      	pop	{r3, pc}

08002e24 <HAL_LIN_SendBreak>:
  __HAL_LOCK(huart);
 8002e24:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d012      	beq.n	8002e52 <HAL_LIN_SendBreak+0x2e>
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  huart->gState = HAL_UART_STATE_BUSY;
 8002e32:	2324      	movs	r3, #36	; 0x24
 8002e34:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  SET_BIT(huart->Instance->CR1, USART_CR1_SBK);
 8002e38:	6802      	ldr	r2, [r0, #0]
 8002e3a:	68d3      	ldr	r3, [r2, #12]
 8002e3c:	f043 0301 	orr.w	r3, r3, #1
 8002e40:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002e42:	2320      	movs	r3, #32
 8002e44:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(huart);
 8002e48:	2300      	movs	r3, #0
 8002e4a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  return HAL_OK; 
 8002e4e:	4618      	mov	r0, r3
 8002e50:	4770      	bx	lr
  __HAL_LOCK(huart);
 8002e52:	2002      	movs	r0, #2
}
 8002e54:	4770      	bx	lr

08002e56 <HAL_MultiProcessor_EnterMuteMode>:
  __HAL_LOCK(huart);
 8002e56:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d012      	beq.n	8002e84 <HAL_MultiProcessor_EnterMuteMode+0x2e>
 8002e5e:	2301      	movs	r3, #1
 8002e60:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  huart->gState = HAL_UART_STATE_BUSY;
 8002e64:	2324      	movs	r3, #36	; 0x24
 8002e66:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  SET_BIT(huart->Instance->CR1, USART_CR1_RWU);
 8002e6a:	6802      	ldr	r2, [r0, #0]
 8002e6c:	68d3      	ldr	r3, [r2, #12]
 8002e6e:	f043 0302 	orr.w	r3, r3, #2
 8002e72:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002e74:	2320      	movs	r3, #32
 8002e76:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(huart);
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  return HAL_OK; 
 8002e80:	4618      	mov	r0, r3
 8002e82:	4770      	bx	lr
  __HAL_LOCK(huart);
 8002e84:	2002      	movs	r0, #2
}
 8002e86:	4770      	bx	lr

08002e88 <HAL_MultiProcessor_ExitMuteMode>:
  __HAL_LOCK(huart);
 8002e88:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d012      	beq.n	8002eb6 <HAL_MultiProcessor_ExitMuteMode+0x2e>
 8002e90:	2301      	movs	r3, #1
 8002e92:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  huart->gState = HAL_UART_STATE_BUSY;
 8002e96:	2324      	movs	r3, #36	; 0x24
 8002e98:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_RWU);
 8002e9c:	6802      	ldr	r2, [r0, #0]
 8002e9e:	68d3      	ldr	r3, [r2, #12]
 8002ea0:	f023 0302 	bic.w	r3, r3, #2
 8002ea4:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002ea6:	2320      	movs	r3, #32
 8002ea8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(huart);
 8002eac:	2300      	movs	r3, #0
 8002eae:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  return HAL_OK; 
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	4770      	bx	lr
  __HAL_LOCK(huart);
 8002eb6:	2002      	movs	r0, #2
}
 8002eb8:	4770      	bx	lr

08002eba <HAL_HalfDuplex_EnableTransmitter>:
  __HAL_LOCK(huart);
 8002eba:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d014      	beq.n	8002eec <HAL_HalfDuplex_EnableTransmitter+0x32>
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  huart->gState = HAL_UART_STATE_BUSY;
 8002ec8:	2324      	movs	r3, #36	; 0x24
 8002eca:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpreg = huart->Instance->CR1;
 8002ece:	6802      	ldr	r2, [r0, #0]
 8002ed0:	68d3      	ldr	r3, [r2, #12]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8002ed2:	f023 030c 	bic.w	r3, r3, #12
  tmpreg |= (uint32_t)USART_CR1_TE;
 8002ed6:	f043 0308 	orr.w	r3, r3, #8
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8002eda:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002edc:	2320      	movs	r3, #32
 8002ede:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(huart);
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  return HAL_OK; 
 8002ee8:	4618      	mov	r0, r3
 8002eea:	4770      	bx	lr
  __HAL_LOCK(huart);
 8002eec:	2002      	movs	r0, #2
}
 8002eee:	4770      	bx	lr

08002ef0 <HAL_HalfDuplex_EnableReceiver>:
  __HAL_LOCK(huart);
 8002ef0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d014      	beq.n	8002f22 <HAL_HalfDuplex_EnableReceiver+0x32>
 8002ef8:	2301      	movs	r3, #1
 8002efa:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  huart->gState = HAL_UART_STATE_BUSY;
 8002efe:	2324      	movs	r3, #36	; 0x24
 8002f00:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpreg = huart->Instance->CR1;
 8002f04:	6802      	ldr	r2, [r0, #0]
 8002f06:	68d3      	ldr	r3, [r2, #12]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8002f08:	f023 030c 	bic.w	r3, r3, #12
  tmpreg |= (uint32_t)USART_CR1_RE;
 8002f0c:	f043 0304 	orr.w	r3, r3, #4
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8002f10:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002f12:	2320      	movs	r3, #32
 8002f14:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(huart);
 8002f18:	2300      	movs	r3, #0
 8002f1a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  return HAL_OK; 
 8002f1e:	4618      	mov	r0, r3
 8002f20:	4770      	bx	lr
  __HAL_LOCK(huart);
 8002f22:	2002      	movs	r0, #2
}
 8002f24:	4770      	bx	lr

08002f26 <HAL_UART_GetState>:
  temp1 = huart->gState;
 8002f26:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
  temp2 = huart->RxState;
 8002f2a:	f890 003a 	ldrb.w	r0, [r0, #58]	; 0x3a
}
 8002f2e:	4318      	orrs	r0, r3
 8002f30:	4770      	bx	lr

08002f32 <HAL_UART_GetError>:
  return huart->ErrorCode;
 8002f32:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop

08002f38 <main>:

//#include "main.h"
#include "ap.h"

int main(void)
{
 8002f38:	b508      	push	{r3, lr}

  hwInit();
 8002f3a:	f7fd fc63 	bl	8000804 <hwInit>
  apInit();
 8002f3e:	f7fd f905 	bl	800014c <apInit>

  apMain();
 8002f42:	f7fd f90a 	bl	800015a <apMain>

}
 8002f46:	2000      	movs	r0, #0
 8002f48:	bd08      	pop	{r3, pc}
	...

08002f4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002f4c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002f4e:	e003      	b.n	8002f58 <LoopCopyDataInit>

08002f50 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002f50:	4b0b      	ldr	r3, [pc, #44]	; (8002f80 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002f52:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002f54:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002f56:	3104      	adds	r1, #4

08002f58 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002f58:	480a      	ldr	r0, [pc, #40]	; (8002f84 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002f5a:	4b0b      	ldr	r3, [pc, #44]	; (8002f88 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002f5c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002f5e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002f60:	d3f6      	bcc.n	8002f50 <CopyDataInit>
  ldr r2, =_sbss
 8002f62:	4a0a      	ldr	r2, [pc, #40]	; (8002f8c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002f64:	e002      	b.n	8002f6c <LoopFillZerobss>

08002f66 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002f66:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002f68:	f842 3b04 	str.w	r3, [r2], #4

08002f6c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002f6c:	4b08      	ldr	r3, [pc, #32]	; (8002f90 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002f6e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002f70:	d3f9      	bcc.n	8002f66 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002f72:	f7fd f94f 	bl	8000214 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f76:	f000 f80f 	bl	8002f98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f7a:	f7ff ffdd 	bl	8002f38 <main>
  bx lr
 8002f7e:	4770      	bx	lr
  ldr r3, =_sidata
 8002f80:	0800391c 	.word	0x0800391c
  ldr r0, =_sdata
 8002f84:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002f88:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8002f8c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8002f90:	2000011c 	.word	0x2000011c

08002f94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f94:	e7fe      	b.n	8002f94 <ADC1_2_IRQHandler>
	...

08002f98 <__libc_init_array>:
 8002f98:	b570      	push	{r4, r5, r6, lr}
 8002f9a:	2500      	movs	r5, #0
 8002f9c:	4e0c      	ldr	r6, [pc, #48]	; (8002fd0 <__libc_init_array+0x38>)
 8002f9e:	4c0d      	ldr	r4, [pc, #52]	; (8002fd4 <__libc_init_array+0x3c>)
 8002fa0:	1ba4      	subs	r4, r4, r6
 8002fa2:	10a4      	asrs	r4, r4, #2
 8002fa4:	42a5      	cmp	r5, r4
 8002fa6:	d109      	bne.n	8002fbc <__libc_init_array+0x24>
 8002fa8:	f000 fc72 	bl	8003890 <_init>
 8002fac:	2500      	movs	r5, #0
 8002fae:	4e0a      	ldr	r6, [pc, #40]	; (8002fd8 <__libc_init_array+0x40>)
 8002fb0:	4c0a      	ldr	r4, [pc, #40]	; (8002fdc <__libc_init_array+0x44>)
 8002fb2:	1ba4      	subs	r4, r4, r6
 8002fb4:	10a4      	asrs	r4, r4, #2
 8002fb6:	42a5      	cmp	r5, r4
 8002fb8:	d105      	bne.n	8002fc6 <__libc_init_array+0x2e>
 8002fba:	bd70      	pop	{r4, r5, r6, pc}
 8002fbc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fc0:	4798      	blx	r3
 8002fc2:	3501      	adds	r5, #1
 8002fc4:	e7ee      	b.n	8002fa4 <__libc_init_array+0xc>
 8002fc6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fca:	4798      	blx	r3
 8002fcc:	3501      	adds	r5, #1
 8002fce:	e7f2      	b.n	8002fb6 <__libc_init_array+0x1e>
 8002fd0:	08003914 	.word	0x08003914
 8002fd4:	08003914 	.word	0x08003914
 8002fd8:	08003914 	.word	0x08003914
 8002fdc:	08003918 	.word	0x08003918

08002fe0 <memset>:
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	4402      	add	r2, r0
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d100      	bne.n	8002fea <memset+0xa>
 8002fe8:	4770      	bx	lr
 8002fea:	f803 1b01 	strb.w	r1, [r3], #1
 8002fee:	e7f9      	b.n	8002fe4 <memset+0x4>

08002ff0 <_vsniprintf_r>:
 8002ff0:	b530      	push	{r4, r5, lr}
 8002ff2:	1e14      	subs	r4, r2, #0
 8002ff4:	4605      	mov	r5, r0
 8002ff6:	b09b      	sub	sp, #108	; 0x6c
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	da05      	bge.n	8003008 <_vsniprintf_r+0x18>
 8002ffc:	238b      	movs	r3, #139	; 0x8b
 8002ffe:	f04f 30ff 	mov.w	r0, #4294967295
 8003002:	602b      	str	r3, [r5, #0]
 8003004:	b01b      	add	sp, #108	; 0x6c
 8003006:	bd30      	pop	{r4, r5, pc}
 8003008:	f44f 7302 	mov.w	r3, #520	; 0x208
 800300c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8003010:	bf0c      	ite	eq
 8003012:	4623      	moveq	r3, r4
 8003014:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003018:	9302      	str	r3, [sp, #8]
 800301a:	9305      	str	r3, [sp, #20]
 800301c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003020:	9100      	str	r1, [sp, #0]
 8003022:	9104      	str	r1, [sp, #16]
 8003024:	f8ad 300e 	strh.w	r3, [sp, #14]
 8003028:	4602      	mov	r2, r0
 800302a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800302c:	4669      	mov	r1, sp
 800302e:	4628      	mov	r0, r5
 8003030:	f000 f874 	bl	800311c <_svfiprintf_r>
 8003034:	1c43      	adds	r3, r0, #1
 8003036:	bfbc      	itt	lt
 8003038:	238b      	movlt	r3, #139	; 0x8b
 800303a:	602b      	strlt	r3, [r5, #0]
 800303c:	2c00      	cmp	r4, #0
 800303e:	d0e1      	beq.n	8003004 <_vsniprintf_r+0x14>
 8003040:	2200      	movs	r2, #0
 8003042:	9b00      	ldr	r3, [sp, #0]
 8003044:	701a      	strb	r2, [r3, #0]
 8003046:	e7dd      	b.n	8003004 <_vsniprintf_r+0x14>

08003048 <vsniprintf>:
 8003048:	b507      	push	{r0, r1, r2, lr}
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	4613      	mov	r3, r2
 800304e:	460a      	mov	r2, r1
 8003050:	4601      	mov	r1, r0
 8003052:	4803      	ldr	r0, [pc, #12]	; (8003060 <vsniprintf+0x18>)
 8003054:	6800      	ldr	r0, [r0, #0]
 8003056:	f7ff ffcb 	bl	8002ff0 <_vsniprintf_r>
 800305a:	b003      	add	sp, #12
 800305c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003060:	2000000c 	.word	0x2000000c

08003064 <__ssputs_r>:
 8003064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003068:	688e      	ldr	r6, [r1, #8]
 800306a:	4682      	mov	sl, r0
 800306c:	429e      	cmp	r6, r3
 800306e:	460c      	mov	r4, r1
 8003070:	4691      	mov	r9, r2
 8003072:	4698      	mov	r8, r3
 8003074:	d835      	bhi.n	80030e2 <__ssputs_r+0x7e>
 8003076:	898a      	ldrh	r2, [r1, #12]
 8003078:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800307c:	d031      	beq.n	80030e2 <__ssputs_r+0x7e>
 800307e:	2302      	movs	r3, #2
 8003080:	6825      	ldr	r5, [r4, #0]
 8003082:	6909      	ldr	r1, [r1, #16]
 8003084:	1a6f      	subs	r7, r5, r1
 8003086:	6965      	ldr	r5, [r4, #20]
 8003088:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800308c:	fb95 f5f3 	sdiv	r5, r5, r3
 8003090:	f108 0301 	add.w	r3, r8, #1
 8003094:	443b      	add	r3, r7
 8003096:	429d      	cmp	r5, r3
 8003098:	bf38      	it	cc
 800309a:	461d      	movcc	r5, r3
 800309c:	0553      	lsls	r3, r2, #21
 800309e:	d531      	bpl.n	8003104 <__ssputs_r+0xa0>
 80030a0:	4629      	mov	r1, r5
 80030a2:	f000 fb47 	bl	8003734 <_malloc_r>
 80030a6:	4606      	mov	r6, r0
 80030a8:	b950      	cbnz	r0, 80030c0 <__ssputs_r+0x5c>
 80030aa:	230c      	movs	r3, #12
 80030ac:	f8ca 3000 	str.w	r3, [sl]
 80030b0:	89a3      	ldrh	r3, [r4, #12]
 80030b2:	f04f 30ff 	mov.w	r0, #4294967295
 80030b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030ba:	81a3      	strh	r3, [r4, #12]
 80030bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030c0:	463a      	mov	r2, r7
 80030c2:	6921      	ldr	r1, [r4, #16]
 80030c4:	f000 fac4 	bl	8003650 <memcpy>
 80030c8:	89a3      	ldrh	r3, [r4, #12]
 80030ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80030ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030d2:	81a3      	strh	r3, [r4, #12]
 80030d4:	6126      	str	r6, [r4, #16]
 80030d6:	443e      	add	r6, r7
 80030d8:	6026      	str	r6, [r4, #0]
 80030da:	4646      	mov	r6, r8
 80030dc:	6165      	str	r5, [r4, #20]
 80030de:	1bed      	subs	r5, r5, r7
 80030e0:	60a5      	str	r5, [r4, #8]
 80030e2:	4546      	cmp	r6, r8
 80030e4:	bf28      	it	cs
 80030e6:	4646      	movcs	r6, r8
 80030e8:	4649      	mov	r1, r9
 80030ea:	4632      	mov	r2, r6
 80030ec:	6820      	ldr	r0, [r4, #0]
 80030ee:	f000 faba 	bl	8003666 <memmove>
 80030f2:	68a3      	ldr	r3, [r4, #8]
 80030f4:	2000      	movs	r0, #0
 80030f6:	1b9b      	subs	r3, r3, r6
 80030f8:	60a3      	str	r3, [r4, #8]
 80030fa:	6823      	ldr	r3, [r4, #0]
 80030fc:	441e      	add	r6, r3
 80030fe:	6026      	str	r6, [r4, #0]
 8003100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003104:	462a      	mov	r2, r5
 8003106:	f000 fb73 	bl	80037f0 <_realloc_r>
 800310a:	4606      	mov	r6, r0
 800310c:	2800      	cmp	r0, #0
 800310e:	d1e1      	bne.n	80030d4 <__ssputs_r+0x70>
 8003110:	6921      	ldr	r1, [r4, #16]
 8003112:	4650      	mov	r0, sl
 8003114:	f000 fac2 	bl	800369c <_free_r>
 8003118:	e7c7      	b.n	80030aa <__ssputs_r+0x46>
	...

0800311c <_svfiprintf_r>:
 800311c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003120:	b09d      	sub	sp, #116	; 0x74
 8003122:	9303      	str	r3, [sp, #12]
 8003124:	898b      	ldrh	r3, [r1, #12]
 8003126:	4680      	mov	r8, r0
 8003128:	061c      	lsls	r4, r3, #24
 800312a:	460d      	mov	r5, r1
 800312c:	4616      	mov	r6, r2
 800312e:	d50f      	bpl.n	8003150 <_svfiprintf_r+0x34>
 8003130:	690b      	ldr	r3, [r1, #16]
 8003132:	b96b      	cbnz	r3, 8003150 <_svfiprintf_r+0x34>
 8003134:	2140      	movs	r1, #64	; 0x40
 8003136:	f000 fafd 	bl	8003734 <_malloc_r>
 800313a:	6028      	str	r0, [r5, #0]
 800313c:	6128      	str	r0, [r5, #16]
 800313e:	b928      	cbnz	r0, 800314c <_svfiprintf_r+0x30>
 8003140:	230c      	movs	r3, #12
 8003142:	f8c8 3000 	str.w	r3, [r8]
 8003146:	f04f 30ff 	mov.w	r0, #4294967295
 800314a:	e0c4      	b.n	80032d6 <_svfiprintf_r+0x1ba>
 800314c:	2340      	movs	r3, #64	; 0x40
 800314e:	616b      	str	r3, [r5, #20]
 8003150:	2300      	movs	r3, #0
 8003152:	9309      	str	r3, [sp, #36]	; 0x24
 8003154:	2320      	movs	r3, #32
 8003156:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800315a:	2330      	movs	r3, #48	; 0x30
 800315c:	f04f 0b01 	mov.w	fp, #1
 8003160:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003164:	4637      	mov	r7, r6
 8003166:	463c      	mov	r4, r7
 8003168:	f814 3b01 	ldrb.w	r3, [r4], #1
 800316c:	2b00      	cmp	r3, #0
 800316e:	d13c      	bne.n	80031ea <_svfiprintf_r+0xce>
 8003170:	ebb7 0a06 	subs.w	sl, r7, r6
 8003174:	d00b      	beq.n	800318e <_svfiprintf_r+0x72>
 8003176:	4653      	mov	r3, sl
 8003178:	4632      	mov	r2, r6
 800317a:	4629      	mov	r1, r5
 800317c:	4640      	mov	r0, r8
 800317e:	f7ff ff71 	bl	8003064 <__ssputs_r>
 8003182:	3001      	adds	r0, #1
 8003184:	f000 80a2 	beq.w	80032cc <_svfiprintf_r+0x1b0>
 8003188:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800318a:	4453      	add	r3, sl
 800318c:	9309      	str	r3, [sp, #36]	; 0x24
 800318e:	783b      	ldrb	r3, [r7, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	f000 809b 	beq.w	80032cc <_svfiprintf_r+0x1b0>
 8003196:	2300      	movs	r3, #0
 8003198:	f04f 32ff 	mov.w	r2, #4294967295
 800319c:	9304      	str	r3, [sp, #16]
 800319e:	9307      	str	r3, [sp, #28]
 80031a0:	9205      	str	r2, [sp, #20]
 80031a2:	9306      	str	r3, [sp, #24]
 80031a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80031a8:	931a      	str	r3, [sp, #104]	; 0x68
 80031aa:	2205      	movs	r2, #5
 80031ac:	7821      	ldrb	r1, [r4, #0]
 80031ae:	4850      	ldr	r0, [pc, #320]	; (80032f0 <_svfiprintf_r+0x1d4>)
 80031b0:	f000 fa40 	bl	8003634 <memchr>
 80031b4:	1c67      	adds	r7, r4, #1
 80031b6:	9b04      	ldr	r3, [sp, #16]
 80031b8:	b9d8      	cbnz	r0, 80031f2 <_svfiprintf_r+0xd6>
 80031ba:	06d9      	lsls	r1, r3, #27
 80031bc:	bf44      	itt	mi
 80031be:	2220      	movmi	r2, #32
 80031c0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80031c4:	071a      	lsls	r2, r3, #28
 80031c6:	bf44      	itt	mi
 80031c8:	222b      	movmi	r2, #43	; 0x2b
 80031ca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80031ce:	7822      	ldrb	r2, [r4, #0]
 80031d0:	2a2a      	cmp	r2, #42	; 0x2a
 80031d2:	d016      	beq.n	8003202 <_svfiprintf_r+0xe6>
 80031d4:	2100      	movs	r1, #0
 80031d6:	200a      	movs	r0, #10
 80031d8:	9a07      	ldr	r2, [sp, #28]
 80031da:	4627      	mov	r7, r4
 80031dc:	783b      	ldrb	r3, [r7, #0]
 80031de:	3401      	adds	r4, #1
 80031e0:	3b30      	subs	r3, #48	; 0x30
 80031e2:	2b09      	cmp	r3, #9
 80031e4:	d950      	bls.n	8003288 <_svfiprintf_r+0x16c>
 80031e6:	b1c9      	cbz	r1, 800321c <_svfiprintf_r+0x100>
 80031e8:	e011      	b.n	800320e <_svfiprintf_r+0xf2>
 80031ea:	2b25      	cmp	r3, #37	; 0x25
 80031ec:	d0c0      	beq.n	8003170 <_svfiprintf_r+0x54>
 80031ee:	4627      	mov	r7, r4
 80031f0:	e7b9      	b.n	8003166 <_svfiprintf_r+0x4a>
 80031f2:	4a3f      	ldr	r2, [pc, #252]	; (80032f0 <_svfiprintf_r+0x1d4>)
 80031f4:	463c      	mov	r4, r7
 80031f6:	1a80      	subs	r0, r0, r2
 80031f8:	fa0b f000 	lsl.w	r0, fp, r0
 80031fc:	4318      	orrs	r0, r3
 80031fe:	9004      	str	r0, [sp, #16]
 8003200:	e7d3      	b.n	80031aa <_svfiprintf_r+0x8e>
 8003202:	9a03      	ldr	r2, [sp, #12]
 8003204:	1d11      	adds	r1, r2, #4
 8003206:	6812      	ldr	r2, [r2, #0]
 8003208:	9103      	str	r1, [sp, #12]
 800320a:	2a00      	cmp	r2, #0
 800320c:	db01      	blt.n	8003212 <_svfiprintf_r+0xf6>
 800320e:	9207      	str	r2, [sp, #28]
 8003210:	e004      	b.n	800321c <_svfiprintf_r+0x100>
 8003212:	4252      	negs	r2, r2
 8003214:	f043 0302 	orr.w	r3, r3, #2
 8003218:	9207      	str	r2, [sp, #28]
 800321a:	9304      	str	r3, [sp, #16]
 800321c:	783b      	ldrb	r3, [r7, #0]
 800321e:	2b2e      	cmp	r3, #46	; 0x2e
 8003220:	d10d      	bne.n	800323e <_svfiprintf_r+0x122>
 8003222:	787b      	ldrb	r3, [r7, #1]
 8003224:	1c79      	adds	r1, r7, #1
 8003226:	2b2a      	cmp	r3, #42	; 0x2a
 8003228:	d132      	bne.n	8003290 <_svfiprintf_r+0x174>
 800322a:	9b03      	ldr	r3, [sp, #12]
 800322c:	3702      	adds	r7, #2
 800322e:	1d1a      	adds	r2, r3, #4
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	9203      	str	r2, [sp, #12]
 8003234:	2b00      	cmp	r3, #0
 8003236:	bfb8      	it	lt
 8003238:	f04f 33ff 	movlt.w	r3, #4294967295
 800323c:	9305      	str	r3, [sp, #20]
 800323e:	4c2d      	ldr	r4, [pc, #180]	; (80032f4 <_svfiprintf_r+0x1d8>)
 8003240:	2203      	movs	r2, #3
 8003242:	7839      	ldrb	r1, [r7, #0]
 8003244:	4620      	mov	r0, r4
 8003246:	f000 f9f5 	bl	8003634 <memchr>
 800324a:	b138      	cbz	r0, 800325c <_svfiprintf_r+0x140>
 800324c:	2340      	movs	r3, #64	; 0x40
 800324e:	1b00      	subs	r0, r0, r4
 8003250:	fa03 f000 	lsl.w	r0, r3, r0
 8003254:	9b04      	ldr	r3, [sp, #16]
 8003256:	3701      	adds	r7, #1
 8003258:	4303      	orrs	r3, r0
 800325a:	9304      	str	r3, [sp, #16]
 800325c:	7839      	ldrb	r1, [r7, #0]
 800325e:	2206      	movs	r2, #6
 8003260:	4825      	ldr	r0, [pc, #148]	; (80032f8 <_svfiprintf_r+0x1dc>)
 8003262:	1c7e      	adds	r6, r7, #1
 8003264:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003268:	f000 f9e4 	bl	8003634 <memchr>
 800326c:	2800      	cmp	r0, #0
 800326e:	d035      	beq.n	80032dc <_svfiprintf_r+0x1c0>
 8003270:	4b22      	ldr	r3, [pc, #136]	; (80032fc <_svfiprintf_r+0x1e0>)
 8003272:	b9fb      	cbnz	r3, 80032b4 <_svfiprintf_r+0x198>
 8003274:	9b03      	ldr	r3, [sp, #12]
 8003276:	3307      	adds	r3, #7
 8003278:	f023 0307 	bic.w	r3, r3, #7
 800327c:	3308      	adds	r3, #8
 800327e:	9303      	str	r3, [sp, #12]
 8003280:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003282:	444b      	add	r3, r9
 8003284:	9309      	str	r3, [sp, #36]	; 0x24
 8003286:	e76d      	b.n	8003164 <_svfiprintf_r+0x48>
 8003288:	fb00 3202 	mla	r2, r0, r2, r3
 800328c:	2101      	movs	r1, #1
 800328e:	e7a4      	b.n	80031da <_svfiprintf_r+0xbe>
 8003290:	2300      	movs	r3, #0
 8003292:	240a      	movs	r4, #10
 8003294:	4618      	mov	r0, r3
 8003296:	9305      	str	r3, [sp, #20]
 8003298:	460f      	mov	r7, r1
 800329a:	783a      	ldrb	r2, [r7, #0]
 800329c:	3101      	adds	r1, #1
 800329e:	3a30      	subs	r2, #48	; 0x30
 80032a0:	2a09      	cmp	r2, #9
 80032a2:	d903      	bls.n	80032ac <_svfiprintf_r+0x190>
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d0ca      	beq.n	800323e <_svfiprintf_r+0x122>
 80032a8:	9005      	str	r0, [sp, #20]
 80032aa:	e7c8      	b.n	800323e <_svfiprintf_r+0x122>
 80032ac:	fb04 2000 	mla	r0, r4, r0, r2
 80032b0:	2301      	movs	r3, #1
 80032b2:	e7f1      	b.n	8003298 <_svfiprintf_r+0x17c>
 80032b4:	ab03      	add	r3, sp, #12
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	462a      	mov	r2, r5
 80032ba:	4b11      	ldr	r3, [pc, #68]	; (8003300 <_svfiprintf_r+0x1e4>)
 80032bc:	a904      	add	r1, sp, #16
 80032be:	4640      	mov	r0, r8
 80032c0:	f3af 8000 	nop.w
 80032c4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80032c8:	4681      	mov	r9, r0
 80032ca:	d1d9      	bne.n	8003280 <_svfiprintf_r+0x164>
 80032cc:	89ab      	ldrh	r3, [r5, #12]
 80032ce:	065b      	lsls	r3, r3, #25
 80032d0:	f53f af39 	bmi.w	8003146 <_svfiprintf_r+0x2a>
 80032d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80032d6:	b01d      	add	sp, #116	; 0x74
 80032d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032dc:	ab03      	add	r3, sp, #12
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	462a      	mov	r2, r5
 80032e2:	4b07      	ldr	r3, [pc, #28]	; (8003300 <_svfiprintf_r+0x1e4>)
 80032e4:	a904      	add	r1, sp, #16
 80032e6:	4640      	mov	r0, r8
 80032e8:	f000 f884 	bl	80033f4 <_printf_i>
 80032ec:	e7ea      	b.n	80032c4 <_svfiprintf_r+0x1a8>
 80032ee:	bf00      	nop
 80032f0:	080038e0 	.word	0x080038e0
 80032f4:	080038e6 	.word	0x080038e6
 80032f8:	080038ea 	.word	0x080038ea
 80032fc:	00000000 	.word	0x00000000
 8003300:	08003065 	.word	0x08003065

08003304 <_printf_common>:
 8003304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003308:	4691      	mov	r9, r2
 800330a:	461f      	mov	r7, r3
 800330c:	688a      	ldr	r2, [r1, #8]
 800330e:	690b      	ldr	r3, [r1, #16]
 8003310:	4606      	mov	r6, r0
 8003312:	4293      	cmp	r3, r2
 8003314:	bfb8      	it	lt
 8003316:	4613      	movlt	r3, r2
 8003318:	f8c9 3000 	str.w	r3, [r9]
 800331c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003320:	460c      	mov	r4, r1
 8003322:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003326:	b112      	cbz	r2, 800332e <_printf_common+0x2a>
 8003328:	3301      	adds	r3, #1
 800332a:	f8c9 3000 	str.w	r3, [r9]
 800332e:	6823      	ldr	r3, [r4, #0]
 8003330:	0699      	lsls	r1, r3, #26
 8003332:	bf42      	ittt	mi
 8003334:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003338:	3302      	addmi	r3, #2
 800333a:	f8c9 3000 	strmi.w	r3, [r9]
 800333e:	6825      	ldr	r5, [r4, #0]
 8003340:	f015 0506 	ands.w	r5, r5, #6
 8003344:	d107      	bne.n	8003356 <_printf_common+0x52>
 8003346:	f104 0a19 	add.w	sl, r4, #25
 800334a:	68e3      	ldr	r3, [r4, #12]
 800334c:	f8d9 2000 	ldr.w	r2, [r9]
 8003350:	1a9b      	subs	r3, r3, r2
 8003352:	429d      	cmp	r5, r3
 8003354:	db2a      	blt.n	80033ac <_printf_common+0xa8>
 8003356:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800335a:	6822      	ldr	r2, [r4, #0]
 800335c:	3300      	adds	r3, #0
 800335e:	bf18      	it	ne
 8003360:	2301      	movne	r3, #1
 8003362:	0692      	lsls	r2, r2, #26
 8003364:	d42f      	bmi.n	80033c6 <_printf_common+0xc2>
 8003366:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800336a:	4639      	mov	r1, r7
 800336c:	4630      	mov	r0, r6
 800336e:	47c0      	blx	r8
 8003370:	3001      	adds	r0, #1
 8003372:	d022      	beq.n	80033ba <_printf_common+0xb6>
 8003374:	6823      	ldr	r3, [r4, #0]
 8003376:	68e5      	ldr	r5, [r4, #12]
 8003378:	f003 0306 	and.w	r3, r3, #6
 800337c:	2b04      	cmp	r3, #4
 800337e:	bf18      	it	ne
 8003380:	2500      	movne	r5, #0
 8003382:	f8d9 2000 	ldr.w	r2, [r9]
 8003386:	f04f 0900 	mov.w	r9, #0
 800338a:	bf08      	it	eq
 800338c:	1aad      	subeq	r5, r5, r2
 800338e:	68a3      	ldr	r3, [r4, #8]
 8003390:	6922      	ldr	r2, [r4, #16]
 8003392:	bf08      	it	eq
 8003394:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003398:	4293      	cmp	r3, r2
 800339a:	bfc4      	itt	gt
 800339c:	1a9b      	subgt	r3, r3, r2
 800339e:	18ed      	addgt	r5, r5, r3
 80033a0:	341a      	adds	r4, #26
 80033a2:	454d      	cmp	r5, r9
 80033a4:	d11b      	bne.n	80033de <_printf_common+0xda>
 80033a6:	2000      	movs	r0, #0
 80033a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033ac:	2301      	movs	r3, #1
 80033ae:	4652      	mov	r2, sl
 80033b0:	4639      	mov	r1, r7
 80033b2:	4630      	mov	r0, r6
 80033b4:	47c0      	blx	r8
 80033b6:	3001      	adds	r0, #1
 80033b8:	d103      	bne.n	80033c2 <_printf_common+0xbe>
 80033ba:	f04f 30ff 	mov.w	r0, #4294967295
 80033be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033c2:	3501      	adds	r5, #1
 80033c4:	e7c1      	b.n	800334a <_printf_common+0x46>
 80033c6:	2030      	movs	r0, #48	; 0x30
 80033c8:	18e1      	adds	r1, r4, r3
 80033ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80033ce:	1c5a      	adds	r2, r3, #1
 80033d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80033d4:	4422      	add	r2, r4
 80033d6:	3302      	adds	r3, #2
 80033d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80033dc:	e7c3      	b.n	8003366 <_printf_common+0x62>
 80033de:	2301      	movs	r3, #1
 80033e0:	4622      	mov	r2, r4
 80033e2:	4639      	mov	r1, r7
 80033e4:	4630      	mov	r0, r6
 80033e6:	47c0      	blx	r8
 80033e8:	3001      	adds	r0, #1
 80033ea:	d0e6      	beq.n	80033ba <_printf_common+0xb6>
 80033ec:	f109 0901 	add.w	r9, r9, #1
 80033f0:	e7d7      	b.n	80033a2 <_printf_common+0x9e>
	...

080033f4 <_printf_i>:
 80033f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80033f8:	4617      	mov	r7, r2
 80033fa:	7e0a      	ldrb	r2, [r1, #24]
 80033fc:	b085      	sub	sp, #20
 80033fe:	2a6e      	cmp	r2, #110	; 0x6e
 8003400:	4698      	mov	r8, r3
 8003402:	4606      	mov	r6, r0
 8003404:	460c      	mov	r4, r1
 8003406:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003408:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800340c:	f000 80bc 	beq.w	8003588 <_printf_i+0x194>
 8003410:	d81a      	bhi.n	8003448 <_printf_i+0x54>
 8003412:	2a63      	cmp	r2, #99	; 0x63
 8003414:	d02e      	beq.n	8003474 <_printf_i+0x80>
 8003416:	d80a      	bhi.n	800342e <_printf_i+0x3a>
 8003418:	2a00      	cmp	r2, #0
 800341a:	f000 80c8 	beq.w	80035ae <_printf_i+0x1ba>
 800341e:	2a58      	cmp	r2, #88	; 0x58
 8003420:	f000 808a 	beq.w	8003538 <_printf_i+0x144>
 8003424:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003428:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800342c:	e02a      	b.n	8003484 <_printf_i+0x90>
 800342e:	2a64      	cmp	r2, #100	; 0x64
 8003430:	d001      	beq.n	8003436 <_printf_i+0x42>
 8003432:	2a69      	cmp	r2, #105	; 0x69
 8003434:	d1f6      	bne.n	8003424 <_printf_i+0x30>
 8003436:	6821      	ldr	r1, [r4, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800343e:	d023      	beq.n	8003488 <_printf_i+0x94>
 8003440:	1d11      	adds	r1, r2, #4
 8003442:	6019      	str	r1, [r3, #0]
 8003444:	6813      	ldr	r3, [r2, #0]
 8003446:	e027      	b.n	8003498 <_printf_i+0xa4>
 8003448:	2a73      	cmp	r2, #115	; 0x73
 800344a:	f000 80b4 	beq.w	80035b6 <_printf_i+0x1c2>
 800344e:	d808      	bhi.n	8003462 <_printf_i+0x6e>
 8003450:	2a6f      	cmp	r2, #111	; 0x6f
 8003452:	d02a      	beq.n	80034aa <_printf_i+0xb6>
 8003454:	2a70      	cmp	r2, #112	; 0x70
 8003456:	d1e5      	bne.n	8003424 <_printf_i+0x30>
 8003458:	680a      	ldr	r2, [r1, #0]
 800345a:	f042 0220 	orr.w	r2, r2, #32
 800345e:	600a      	str	r2, [r1, #0]
 8003460:	e003      	b.n	800346a <_printf_i+0x76>
 8003462:	2a75      	cmp	r2, #117	; 0x75
 8003464:	d021      	beq.n	80034aa <_printf_i+0xb6>
 8003466:	2a78      	cmp	r2, #120	; 0x78
 8003468:	d1dc      	bne.n	8003424 <_printf_i+0x30>
 800346a:	2278      	movs	r2, #120	; 0x78
 800346c:	496f      	ldr	r1, [pc, #444]	; (800362c <_printf_i+0x238>)
 800346e:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003472:	e064      	b.n	800353e <_printf_i+0x14a>
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800347a:	1d11      	adds	r1, r2, #4
 800347c:	6019      	str	r1, [r3, #0]
 800347e:	6813      	ldr	r3, [r2, #0]
 8003480:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003484:	2301      	movs	r3, #1
 8003486:	e0a3      	b.n	80035d0 <_printf_i+0x1dc>
 8003488:	f011 0f40 	tst.w	r1, #64	; 0x40
 800348c:	f102 0104 	add.w	r1, r2, #4
 8003490:	6019      	str	r1, [r3, #0]
 8003492:	d0d7      	beq.n	8003444 <_printf_i+0x50>
 8003494:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003498:	2b00      	cmp	r3, #0
 800349a:	da03      	bge.n	80034a4 <_printf_i+0xb0>
 800349c:	222d      	movs	r2, #45	; 0x2d
 800349e:	425b      	negs	r3, r3
 80034a0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80034a4:	4962      	ldr	r1, [pc, #392]	; (8003630 <_printf_i+0x23c>)
 80034a6:	220a      	movs	r2, #10
 80034a8:	e017      	b.n	80034da <_printf_i+0xe6>
 80034aa:	6820      	ldr	r0, [r4, #0]
 80034ac:	6819      	ldr	r1, [r3, #0]
 80034ae:	f010 0f80 	tst.w	r0, #128	; 0x80
 80034b2:	d003      	beq.n	80034bc <_printf_i+0xc8>
 80034b4:	1d08      	adds	r0, r1, #4
 80034b6:	6018      	str	r0, [r3, #0]
 80034b8:	680b      	ldr	r3, [r1, #0]
 80034ba:	e006      	b.n	80034ca <_printf_i+0xd6>
 80034bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80034c0:	f101 0004 	add.w	r0, r1, #4
 80034c4:	6018      	str	r0, [r3, #0]
 80034c6:	d0f7      	beq.n	80034b8 <_printf_i+0xc4>
 80034c8:	880b      	ldrh	r3, [r1, #0]
 80034ca:	2a6f      	cmp	r2, #111	; 0x6f
 80034cc:	bf14      	ite	ne
 80034ce:	220a      	movne	r2, #10
 80034d0:	2208      	moveq	r2, #8
 80034d2:	4957      	ldr	r1, [pc, #348]	; (8003630 <_printf_i+0x23c>)
 80034d4:	2000      	movs	r0, #0
 80034d6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80034da:	6865      	ldr	r5, [r4, #4]
 80034dc:	2d00      	cmp	r5, #0
 80034de:	60a5      	str	r5, [r4, #8]
 80034e0:	f2c0 809c 	blt.w	800361c <_printf_i+0x228>
 80034e4:	6820      	ldr	r0, [r4, #0]
 80034e6:	f020 0004 	bic.w	r0, r0, #4
 80034ea:	6020      	str	r0, [r4, #0]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d13f      	bne.n	8003570 <_printf_i+0x17c>
 80034f0:	2d00      	cmp	r5, #0
 80034f2:	f040 8095 	bne.w	8003620 <_printf_i+0x22c>
 80034f6:	4675      	mov	r5, lr
 80034f8:	2a08      	cmp	r2, #8
 80034fa:	d10b      	bne.n	8003514 <_printf_i+0x120>
 80034fc:	6823      	ldr	r3, [r4, #0]
 80034fe:	07da      	lsls	r2, r3, #31
 8003500:	d508      	bpl.n	8003514 <_printf_i+0x120>
 8003502:	6923      	ldr	r3, [r4, #16]
 8003504:	6862      	ldr	r2, [r4, #4]
 8003506:	429a      	cmp	r2, r3
 8003508:	bfde      	ittt	le
 800350a:	2330      	movle	r3, #48	; 0x30
 800350c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003510:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003514:	ebae 0305 	sub.w	r3, lr, r5
 8003518:	6123      	str	r3, [r4, #16]
 800351a:	f8cd 8000 	str.w	r8, [sp]
 800351e:	463b      	mov	r3, r7
 8003520:	aa03      	add	r2, sp, #12
 8003522:	4621      	mov	r1, r4
 8003524:	4630      	mov	r0, r6
 8003526:	f7ff feed 	bl	8003304 <_printf_common>
 800352a:	3001      	adds	r0, #1
 800352c:	d155      	bne.n	80035da <_printf_i+0x1e6>
 800352e:	f04f 30ff 	mov.w	r0, #4294967295
 8003532:	b005      	add	sp, #20
 8003534:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003538:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800353c:	493c      	ldr	r1, [pc, #240]	; (8003630 <_printf_i+0x23c>)
 800353e:	6822      	ldr	r2, [r4, #0]
 8003540:	6818      	ldr	r0, [r3, #0]
 8003542:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003546:	f100 0504 	add.w	r5, r0, #4
 800354a:	601d      	str	r5, [r3, #0]
 800354c:	d001      	beq.n	8003552 <_printf_i+0x15e>
 800354e:	6803      	ldr	r3, [r0, #0]
 8003550:	e002      	b.n	8003558 <_printf_i+0x164>
 8003552:	0655      	lsls	r5, r2, #25
 8003554:	d5fb      	bpl.n	800354e <_printf_i+0x15a>
 8003556:	8803      	ldrh	r3, [r0, #0]
 8003558:	07d0      	lsls	r0, r2, #31
 800355a:	bf44      	itt	mi
 800355c:	f042 0220 	orrmi.w	r2, r2, #32
 8003560:	6022      	strmi	r2, [r4, #0]
 8003562:	b91b      	cbnz	r3, 800356c <_printf_i+0x178>
 8003564:	6822      	ldr	r2, [r4, #0]
 8003566:	f022 0220 	bic.w	r2, r2, #32
 800356a:	6022      	str	r2, [r4, #0]
 800356c:	2210      	movs	r2, #16
 800356e:	e7b1      	b.n	80034d4 <_printf_i+0xe0>
 8003570:	4675      	mov	r5, lr
 8003572:	fbb3 f0f2 	udiv	r0, r3, r2
 8003576:	fb02 3310 	mls	r3, r2, r0, r3
 800357a:	5ccb      	ldrb	r3, [r1, r3]
 800357c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003580:	4603      	mov	r3, r0
 8003582:	2800      	cmp	r0, #0
 8003584:	d1f5      	bne.n	8003572 <_printf_i+0x17e>
 8003586:	e7b7      	b.n	80034f8 <_printf_i+0x104>
 8003588:	6808      	ldr	r0, [r1, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003590:	6949      	ldr	r1, [r1, #20]
 8003592:	d004      	beq.n	800359e <_printf_i+0x1aa>
 8003594:	1d10      	adds	r0, r2, #4
 8003596:	6018      	str	r0, [r3, #0]
 8003598:	6813      	ldr	r3, [r2, #0]
 800359a:	6019      	str	r1, [r3, #0]
 800359c:	e007      	b.n	80035ae <_printf_i+0x1ba>
 800359e:	f010 0f40 	tst.w	r0, #64	; 0x40
 80035a2:	f102 0004 	add.w	r0, r2, #4
 80035a6:	6018      	str	r0, [r3, #0]
 80035a8:	6813      	ldr	r3, [r2, #0]
 80035aa:	d0f6      	beq.n	800359a <_printf_i+0x1a6>
 80035ac:	8019      	strh	r1, [r3, #0]
 80035ae:	2300      	movs	r3, #0
 80035b0:	4675      	mov	r5, lr
 80035b2:	6123      	str	r3, [r4, #16]
 80035b4:	e7b1      	b.n	800351a <_printf_i+0x126>
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	1d11      	adds	r1, r2, #4
 80035ba:	6019      	str	r1, [r3, #0]
 80035bc:	6815      	ldr	r5, [r2, #0]
 80035be:	2100      	movs	r1, #0
 80035c0:	6862      	ldr	r2, [r4, #4]
 80035c2:	4628      	mov	r0, r5
 80035c4:	f000 f836 	bl	8003634 <memchr>
 80035c8:	b108      	cbz	r0, 80035ce <_printf_i+0x1da>
 80035ca:	1b40      	subs	r0, r0, r5
 80035cc:	6060      	str	r0, [r4, #4]
 80035ce:	6863      	ldr	r3, [r4, #4]
 80035d0:	6123      	str	r3, [r4, #16]
 80035d2:	2300      	movs	r3, #0
 80035d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035d8:	e79f      	b.n	800351a <_printf_i+0x126>
 80035da:	6923      	ldr	r3, [r4, #16]
 80035dc:	462a      	mov	r2, r5
 80035de:	4639      	mov	r1, r7
 80035e0:	4630      	mov	r0, r6
 80035e2:	47c0      	blx	r8
 80035e4:	3001      	adds	r0, #1
 80035e6:	d0a2      	beq.n	800352e <_printf_i+0x13a>
 80035e8:	6823      	ldr	r3, [r4, #0]
 80035ea:	079b      	lsls	r3, r3, #30
 80035ec:	d507      	bpl.n	80035fe <_printf_i+0x20a>
 80035ee:	2500      	movs	r5, #0
 80035f0:	f104 0919 	add.w	r9, r4, #25
 80035f4:	68e3      	ldr	r3, [r4, #12]
 80035f6:	9a03      	ldr	r2, [sp, #12]
 80035f8:	1a9b      	subs	r3, r3, r2
 80035fa:	429d      	cmp	r5, r3
 80035fc:	db05      	blt.n	800360a <_printf_i+0x216>
 80035fe:	68e0      	ldr	r0, [r4, #12]
 8003600:	9b03      	ldr	r3, [sp, #12]
 8003602:	4298      	cmp	r0, r3
 8003604:	bfb8      	it	lt
 8003606:	4618      	movlt	r0, r3
 8003608:	e793      	b.n	8003532 <_printf_i+0x13e>
 800360a:	2301      	movs	r3, #1
 800360c:	464a      	mov	r2, r9
 800360e:	4639      	mov	r1, r7
 8003610:	4630      	mov	r0, r6
 8003612:	47c0      	blx	r8
 8003614:	3001      	adds	r0, #1
 8003616:	d08a      	beq.n	800352e <_printf_i+0x13a>
 8003618:	3501      	adds	r5, #1
 800361a:	e7eb      	b.n	80035f4 <_printf_i+0x200>
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1a7      	bne.n	8003570 <_printf_i+0x17c>
 8003620:	780b      	ldrb	r3, [r1, #0]
 8003622:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003626:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800362a:	e765      	b.n	80034f8 <_printf_i+0x104>
 800362c:	08003902 	.word	0x08003902
 8003630:	080038f1 	.word	0x080038f1

08003634 <memchr>:
 8003634:	b510      	push	{r4, lr}
 8003636:	b2c9      	uxtb	r1, r1
 8003638:	4402      	add	r2, r0
 800363a:	4290      	cmp	r0, r2
 800363c:	4603      	mov	r3, r0
 800363e:	d101      	bne.n	8003644 <memchr+0x10>
 8003640:	2000      	movs	r0, #0
 8003642:	bd10      	pop	{r4, pc}
 8003644:	781c      	ldrb	r4, [r3, #0]
 8003646:	3001      	adds	r0, #1
 8003648:	428c      	cmp	r4, r1
 800364a:	d1f6      	bne.n	800363a <memchr+0x6>
 800364c:	4618      	mov	r0, r3
 800364e:	bd10      	pop	{r4, pc}

08003650 <memcpy>:
 8003650:	b510      	push	{r4, lr}
 8003652:	1e43      	subs	r3, r0, #1
 8003654:	440a      	add	r2, r1
 8003656:	4291      	cmp	r1, r2
 8003658:	d100      	bne.n	800365c <memcpy+0xc>
 800365a:	bd10      	pop	{r4, pc}
 800365c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003660:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003664:	e7f7      	b.n	8003656 <memcpy+0x6>

08003666 <memmove>:
 8003666:	4288      	cmp	r0, r1
 8003668:	b510      	push	{r4, lr}
 800366a:	eb01 0302 	add.w	r3, r1, r2
 800366e:	d803      	bhi.n	8003678 <memmove+0x12>
 8003670:	1e42      	subs	r2, r0, #1
 8003672:	4299      	cmp	r1, r3
 8003674:	d10c      	bne.n	8003690 <memmove+0x2a>
 8003676:	bd10      	pop	{r4, pc}
 8003678:	4298      	cmp	r0, r3
 800367a:	d2f9      	bcs.n	8003670 <memmove+0xa>
 800367c:	1881      	adds	r1, r0, r2
 800367e:	1ad2      	subs	r2, r2, r3
 8003680:	42d3      	cmn	r3, r2
 8003682:	d100      	bne.n	8003686 <memmove+0x20>
 8003684:	bd10      	pop	{r4, pc}
 8003686:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800368a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800368e:	e7f7      	b.n	8003680 <memmove+0x1a>
 8003690:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003694:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003698:	e7eb      	b.n	8003672 <memmove+0xc>
	...

0800369c <_free_r>:
 800369c:	b538      	push	{r3, r4, r5, lr}
 800369e:	4605      	mov	r5, r0
 80036a0:	2900      	cmp	r1, #0
 80036a2:	d043      	beq.n	800372c <_free_r+0x90>
 80036a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036a8:	1f0c      	subs	r4, r1, #4
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	bfb8      	it	lt
 80036ae:	18e4      	addlt	r4, r4, r3
 80036b0:	f000 f8d4 	bl	800385c <__malloc_lock>
 80036b4:	4a1e      	ldr	r2, [pc, #120]	; (8003730 <_free_r+0x94>)
 80036b6:	6813      	ldr	r3, [r2, #0]
 80036b8:	4610      	mov	r0, r2
 80036ba:	b933      	cbnz	r3, 80036ca <_free_r+0x2e>
 80036bc:	6063      	str	r3, [r4, #4]
 80036be:	6014      	str	r4, [r2, #0]
 80036c0:	4628      	mov	r0, r5
 80036c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80036c6:	f000 b8ca 	b.w	800385e <__malloc_unlock>
 80036ca:	42a3      	cmp	r3, r4
 80036cc:	d90b      	bls.n	80036e6 <_free_r+0x4a>
 80036ce:	6821      	ldr	r1, [r4, #0]
 80036d0:	1862      	adds	r2, r4, r1
 80036d2:	4293      	cmp	r3, r2
 80036d4:	bf01      	itttt	eq
 80036d6:	681a      	ldreq	r2, [r3, #0]
 80036d8:	685b      	ldreq	r3, [r3, #4]
 80036da:	1852      	addeq	r2, r2, r1
 80036dc:	6022      	streq	r2, [r4, #0]
 80036de:	6063      	str	r3, [r4, #4]
 80036e0:	6004      	str	r4, [r0, #0]
 80036e2:	e7ed      	b.n	80036c0 <_free_r+0x24>
 80036e4:	4613      	mov	r3, r2
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	b10a      	cbz	r2, 80036ee <_free_r+0x52>
 80036ea:	42a2      	cmp	r2, r4
 80036ec:	d9fa      	bls.n	80036e4 <_free_r+0x48>
 80036ee:	6819      	ldr	r1, [r3, #0]
 80036f0:	1858      	adds	r0, r3, r1
 80036f2:	42a0      	cmp	r0, r4
 80036f4:	d10b      	bne.n	800370e <_free_r+0x72>
 80036f6:	6820      	ldr	r0, [r4, #0]
 80036f8:	4401      	add	r1, r0
 80036fa:	1858      	adds	r0, r3, r1
 80036fc:	4282      	cmp	r2, r0
 80036fe:	6019      	str	r1, [r3, #0]
 8003700:	d1de      	bne.n	80036c0 <_free_r+0x24>
 8003702:	6810      	ldr	r0, [r2, #0]
 8003704:	6852      	ldr	r2, [r2, #4]
 8003706:	4401      	add	r1, r0
 8003708:	6019      	str	r1, [r3, #0]
 800370a:	605a      	str	r2, [r3, #4]
 800370c:	e7d8      	b.n	80036c0 <_free_r+0x24>
 800370e:	d902      	bls.n	8003716 <_free_r+0x7a>
 8003710:	230c      	movs	r3, #12
 8003712:	602b      	str	r3, [r5, #0]
 8003714:	e7d4      	b.n	80036c0 <_free_r+0x24>
 8003716:	6820      	ldr	r0, [r4, #0]
 8003718:	1821      	adds	r1, r4, r0
 800371a:	428a      	cmp	r2, r1
 800371c:	bf01      	itttt	eq
 800371e:	6811      	ldreq	r1, [r2, #0]
 8003720:	6852      	ldreq	r2, [r2, #4]
 8003722:	1809      	addeq	r1, r1, r0
 8003724:	6021      	streq	r1, [r4, #0]
 8003726:	6062      	str	r2, [r4, #4]
 8003728:	605c      	str	r4, [r3, #4]
 800372a:	e7c9      	b.n	80036c0 <_free_r+0x24>
 800372c:	bd38      	pop	{r3, r4, r5, pc}
 800372e:	bf00      	nop
 8003730:	2000008c 	.word	0x2000008c

08003734 <_malloc_r>:
 8003734:	b570      	push	{r4, r5, r6, lr}
 8003736:	1ccd      	adds	r5, r1, #3
 8003738:	f025 0503 	bic.w	r5, r5, #3
 800373c:	3508      	adds	r5, #8
 800373e:	2d0c      	cmp	r5, #12
 8003740:	bf38      	it	cc
 8003742:	250c      	movcc	r5, #12
 8003744:	2d00      	cmp	r5, #0
 8003746:	4606      	mov	r6, r0
 8003748:	db01      	blt.n	800374e <_malloc_r+0x1a>
 800374a:	42a9      	cmp	r1, r5
 800374c:	d903      	bls.n	8003756 <_malloc_r+0x22>
 800374e:	230c      	movs	r3, #12
 8003750:	6033      	str	r3, [r6, #0]
 8003752:	2000      	movs	r0, #0
 8003754:	bd70      	pop	{r4, r5, r6, pc}
 8003756:	f000 f881 	bl	800385c <__malloc_lock>
 800375a:	4a23      	ldr	r2, [pc, #140]	; (80037e8 <_malloc_r+0xb4>)
 800375c:	6814      	ldr	r4, [r2, #0]
 800375e:	4621      	mov	r1, r4
 8003760:	b991      	cbnz	r1, 8003788 <_malloc_r+0x54>
 8003762:	4c22      	ldr	r4, [pc, #136]	; (80037ec <_malloc_r+0xb8>)
 8003764:	6823      	ldr	r3, [r4, #0]
 8003766:	b91b      	cbnz	r3, 8003770 <_malloc_r+0x3c>
 8003768:	4630      	mov	r0, r6
 800376a:	f000 f867 	bl	800383c <_sbrk_r>
 800376e:	6020      	str	r0, [r4, #0]
 8003770:	4629      	mov	r1, r5
 8003772:	4630      	mov	r0, r6
 8003774:	f000 f862 	bl	800383c <_sbrk_r>
 8003778:	1c43      	adds	r3, r0, #1
 800377a:	d126      	bne.n	80037ca <_malloc_r+0x96>
 800377c:	230c      	movs	r3, #12
 800377e:	4630      	mov	r0, r6
 8003780:	6033      	str	r3, [r6, #0]
 8003782:	f000 f86c 	bl	800385e <__malloc_unlock>
 8003786:	e7e4      	b.n	8003752 <_malloc_r+0x1e>
 8003788:	680b      	ldr	r3, [r1, #0]
 800378a:	1b5b      	subs	r3, r3, r5
 800378c:	d41a      	bmi.n	80037c4 <_malloc_r+0x90>
 800378e:	2b0b      	cmp	r3, #11
 8003790:	d90f      	bls.n	80037b2 <_malloc_r+0x7e>
 8003792:	600b      	str	r3, [r1, #0]
 8003794:	18cc      	adds	r4, r1, r3
 8003796:	50cd      	str	r5, [r1, r3]
 8003798:	4630      	mov	r0, r6
 800379a:	f000 f860 	bl	800385e <__malloc_unlock>
 800379e:	f104 000b 	add.w	r0, r4, #11
 80037a2:	1d23      	adds	r3, r4, #4
 80037a4:	f020 0007 	bic.w	r0, r0, #7
 80037a8:	1ac3      	subs	r3, r0, r3
 80037aa:	d01b      	beq.n	80037e4 <_malloc_r+0xb0>
 80037ac:	425a      	negs	r2, r3
 80037ae:	50e2      	str	r2, [r4, r3]
 80037b0:	bd70      	pop	{r4, r5, r6, pc}
 80037b2:	428c      	cmp	r4, r1
 80037b4:	bf0b      	itete	eq
 80037b6:	6863      	ldreq	r3, [r4, #4]
 80037b8:	684b      	ldrne	r3, [r1, #4]
 80037ba:	6013      	streq	r3, [r2, #0]
 80037bc:	6063      	strne	r3, [r4, #4]
 80037be:	bf18      	it	ne
 80037c0:	460c      	movne	r4, r1
 80037c2:	e7e9      	b.n	8003798 <_malloc_r+0x64>
 80037c4:	460c      	mov	r4, r1
 80037c6:	6849      	ldr	r1, [r1, #4]
 80037c8:	e7ca      	b.n	8003760 <_malloc_r+0x2c>
 80037ca:	1cc4      	adds	r4, r0, #3
 80037cc:	f024 0403 	bic.w	r4, r4, #3
 80037d0:	42a0      	cmp	r0, r4
 80037d2:	d005      	beq.n	80037e0 <_malloc_r+0xac>
 80037d4:	1a21      	subs	r1, r4, r0
 80037d6:	4630      	mov	r0, r6
 80037d8:	f000 f830 	bl	800383c <_sbrk_r>
 80037dc:	3001      	adds	r0, #1
 80037de:	d0cd      	beq.n	800377c <_malloc_r+0x48>
 80037e0:	6025      	str	r5, [r4, #0]
 80037e2:	e7d9      	b.n	8003798 <_malloc_r+0x64>
 80037e4:	bd70      	pop	{r4, r5, r6, pc}
 80037e6:	bf00      	nop
 80037e8:	2000008c 	.word	0x2000008c
 80037ec:	20000090 	.word	0x20000090

080037f0 <_realloc_r>:
 80037f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037f2:	4607      	mov	r7, r0
 80037f4:	4614      	mov	r4, r2
 80037f6:	460e      	mov	r6, r1
 80037f8:	b921      	cbnz	r1, 8003804 <_realloc_r+0x14>
 80037fa:	4611      	mov	r1, r2
 80037fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003800:	f7ff bf98 	b.w	8003734 <_malloc_r>
 8003804:	b922      	cbnz	r2, 8003810 <_realloc_r+0x20>
 8003806:	f7ff ff49 	bl	800369c <_free_r>
 800380a:	4625      	mov	r5, r4
 800380c:	4628      	mov	r0, r5
 800380e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003810:	f000 f826 	bl	8003860 <_malloc_usable_size_r>
 8003814:	4284      	cmp	r4, r0
 8003816:	d90f      	bls.n	8003838 <_realloc_r+0x48>
 8003818:	4621      	mov	r1, r4
 800381a:	4638      	mov	r0, r7
 800381c:	f7ff ff8a 	bl	8003734 <_malloc_r>
 8003820:	4605      	mov	r5, r0
 8003822:	2800      	cmp	r0, #0
 8003824:	d0f2      	beq.n	800380c <_realloc_r+0x1c>
 8003826:	4631      	mov	r1, r6
 8003828:	4622      	mov	r2, r4
 800382a:	f7ff ff11 	bl	8003650 <memcpy>
 800382e:	4631      	mov	r1, r6
 8003830:	4638      	mov	r0, r7
 8003832:	f7ff ff33 	bl	800369c <_free_r>
 8003836:	e7e9      	b.n	800380c <_realloc_r+0x1c>
 8003838:	4635      	mov	r5, r6
 800383a:	e7e7      	b.n	800380c <_realloc_r+0x1c>

0800383c <_sbrk_r>:
 800383c:	b538      	push	{r3, r4, r5, lr}
 800383e:	2300      	movs	r3, #0
 8003840:	4c05      	ldr	r4, [pc, #20]	; (8003858 <_sbrk_r+0x1c>)
 8003842:	4605      	mov	r5, r0
 8003844:	4608      	mov	r0, r1
 8003846:	6023      	str	r3, [r4, #0]
 8003848:	f000 f814 	bl	8003874 <_sbrk>
 800384c:	1c43      	adds	r3, r0, #1
 800384e:	d102      	bne.n	8003856 <_sbrk_r+0x1a>
 8003850:	6823      	ldr	r3, [r4, #0]
 8003852:	b103      	cbz	r3, 8003856 <_sbrk_r+0x1a>
 8003854:	602b      	str	r3, [r5, #0]
 8003856:	bd38      	pop	{r3, r4, r5, pc}
 8003858:	20000118 	.word	0x20000118

0800385c <__malloc_lock>:
 800385c:	4770      	bx	lr

0800385e <__malloc_unlock>:
 800385e:	4770      	bx	lr

08003860 <_malloc_usable_size_r>:
 8003860:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8003864:	2800      	cmp	r0, #0
 8003866:	f1a0 0004 	sub.w	r0, r0, #4
 800386a:	bfbc      	itt	lt
 800386c:	580b      	ldrlt	r3, [r1, r0]
 800386e:	18c0      	addlt	r0, r0, r3
 8003870:	4770      	bx	lr
	...

08003874 <_sbrk>:
 8003874:	4b04      	ldr	r3, [pc, #16]	; (8003888 <_sbrk+0x14>)
 8003876:	4602      	mov	r2, r0
 8003878:	6819      	ldr	r1, [r3, #0]
 800387a:	b909      	cbnz	r1, 8003880 <_sbrk+0xc>
 800387c:	4903      	ldr	r1, [pc, #12]	; (800388c <_sbrk+0x18>)
 800387e:	6019      	str	r1, [r3, #0]
 8003880:	6818      	ldr	r0, [r3, #0]
 8003882:	4402      	add	r2, r0
 8003884:	601a      	str	r2, [r3, #0]
 8003886:	4770      	bx	lr
 8003888:	20000094 	.word	0x20000094
 800388c:	2000011c 	.word	0x2000011c

08003890 <_init>:
 8003890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003892:	bf00      	nop
 8003894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003896:	bc08      	pop	{r3}
 8003898:	469e      	mov	lr, r3
 800389a:	4770      	bx	lr

0800389c <_fini>:
 800389c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800389e:	bf00      	nop
 80038a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038a2:	bc08      	pop	{r3}
 80038a4:	469e      	mov	lr, r3
 80038a6:	4770      	bx	lr
